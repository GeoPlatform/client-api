import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Config, ItemService, DatasetService, ServiceService, LayerService, MapService, GalleryService, UtilsService, KGService, AgolService } from '@geoplatform/client';
import { NG2HttpClient } from './http/ng';
export function ng2HttpClientFactory(http) {
    return new NG2HttpClient(http);
}
export function itemServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new ItemService(Config.ualUrl, client);
}
export function datasetServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new DatasetService(Config.ualUrl, client);
}
export function serviceServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new ServiceService(Config.ualUrl, client);
}
export function layerServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new LayerService(Config.ualUrl, client);
}
export function mapServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new MapService(Config.ualUrl, client);
}
export function galleryServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new GalleryService(Config.ualUrl, client);
}
export function utilsServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new UtilsService(Config.ualUrl, client);
}
export function kgServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new KGService(Config.ualUrl, client);
}
export function agolServiceProviderFactory(http) {
    let client = ng2HttpClientFactory(http);
    return new AgolService(Config.ualUrl, client);
}
let GeoPlatformClientModule = class GeoPlatformClientModule {
};
GeoPlatformClientModule = tslib_1.__decorate([
    NgModule({
        imports: [
            CommonModule,
            HttpClientModule
        ],
        providers: [
            {
                provide: NG2HttpClient,
                useFactory: ng2HttpClientFactory,
                deps: [HttpClient]
            },
            {
                provide: ItemService,
                useFactory: itemServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: DatasetService,
                useFactory: datasetServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: ServiceService,
                useFactory: serviceServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: LayerService,
                useFactory: layerServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: MapService,
                useFactory: mapServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: GalleryService,
                useFactory: galleryServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: UtilsService,
                useFactory: utilsServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: KGService,
                useFactory: kgServiceProviderFactory,
                deps: [HttpClient]
            },
            {
                provide: AgolService,
                useFactory: agolServiceProviderFactory,
                deps: [HttpClient]
            }
        ]
    })
], GeoPlatformClientModule);
export { GeoPlatformClientModule };
//# sourceMappingURL=data:application/json;base64,