import { LayerService } from "@geoplatform/client";
import ServiceProxy from "./base";
var ɵ0 = function (svc, req) {
    return svc.search(req.query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
result, res) { res.status(204).end(); }, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ8 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, ɵ9 = function (svc, req) {
    return svc.style(req.params.id);
}, ɵ10 = function (svc, req) {
    return svc.style(req.params.id, req.params.styleId);
}, ɵ11 = function (svc, req) {
    return svc.styles(req.params.id);
}, ɵ12 = function (svc, req) {
    return svc.describe(req.params.id, req.body);
}, ɵ13 = function (svc, req) {
    return svc.validate(req.params.id, req.body);
};
var Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'layers',
        auth: false,
        onExecute: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'layers/:id',
        auth: false,
        onExecute: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'layers',
        auth: true,
        onExecute: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'layers/:id',
        auth: true,
        onExecute: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'layers/:id',
        auth: true,
        onExecute: ɵ4,
        onResponse: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'layers/:id',
        auth: true,
        onExecute: ɵ6
    },
    {
        key: 'export',
        method: 'get',
        path: 'layers/:id/export',
        auth: false,
        onExecute: ɵ7,
        onResponse: ɵ8
    },
    {
        key: 'style',
        method: 'get',
        path: 'layers/:id/style',
        auth: false,
        onExecute: ɵ9
    },
    {
        key: 'styleById',
        method: 'get',
        path: 'layers/:id/styles/:styleId',
        auth: false,
        onExecute: ɵ10
    },
    {
        key: 'styles',
        method: 'get',
        path: 'layers/:id/styles',
        auth: false,
        onExecute: ɵ11
    },
    {
        key: 'describe',
        method: 'post',
        path: 'layers/:id/describe',
        auth: false,
        onExecute: ɵ12
    },
    {
        key: 'validate',
        method: 'post',
        path: 'layers/:id/validate',
        auth: false,
        onExecute: ɵ13
    }
];
/**
 *
 */
function LayerServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("LayerServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("LayerServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = LayerService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default LayerServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13 };
//# sourceMappingURL=data:application/json;base64,