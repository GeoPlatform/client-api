{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@geoplatform/client/shared/error.ts","ng://@geoplatform/client/shared/types.ts","ng://@geoplatform/client/shared/uri-factory.ts","ng://@geoplatform/client/shared/parameters.ts","ng://@geoplatform/client/shared/kg-query.ts","ng://@geoplatform/client/shared/classifiers.ts","ng://@geoplatform/client/shared/query.ts","ng://@geoplatform/client/shared/config.ts","ng://@geoplatform/client/http/client.ts","ng://@geoplatform/client/http/xhr.ts","ng://@geoplatform/client/services/base.ts","ng://@geoplatform/client/services/item.ts","ng://@geoplatform/client/services/dataset.ts","ng://@geoplatform/client/services/map.ts","ng://@geoplatform/client/services/layer.ts","ng://@geoplatform/client/services/service.ts","ng://@geoplatform/client/services/gallery.ts","ng://@geoplatform/client/services/utils.ts","ng://@geoplatform/client/services/association.ts","ng://@geoplatform/client/services/agol.ts","ng://@geoplatform/client/services/tracking.ts","ng://@geoplatform/client/services/kg.ts","ng://@geoplatform/client/services/factory.ts","ng://@geoplatform/client/shared/polyfills.ts","ng://@geoplatform/client/public_api.ts","ng://@geoplatform/client/shared/query-factory.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","GPError","_super","message","_this","call","status","statusCode","error","tslib_1.__extends","setError","value","setStatus","Error","ItemTypes","DATASET","SERVICE","LAYER","MAP","GALLERY","COMMUNITY","APPLICATION","TOPIC","WEBSITE","ORGANIZATION","CONTACT","PERSON","CONCEPT","CONCEPT_SCHEME","STANDARD","RIGHTS_STATEMENT","ItemTypeLabels","URI_BASE","ESRI_TYPES","formatReference","ref","toLowerCase","replace","result","prop","fixServiceHref","service","type","serviceType","conformsTo","indexOf","uri","href","accessURL","matches","match","length","stripLayerFromServiceHref","url","lastChar","trim","substring","URIFactory","factories","register","factory","object","md5Fn","dataset","md5","pubName","publisher","publishers","map","pub","label","join","title","layer","svcUrl","services","servicedBy","lyrUrl","args","layerName","author","createdBy","_createdBy","identifiers","identifier","gallery","community","org","name","person","vcard","email","hasEmail","tel","orgName","positionTitle","scheme","inScheme","schemeRef","prefLabel","item","landingPage","Parameters","ALTERNATE_TITLE","BEGINS","CLASSIFIERS","CREATED","CREATED_BEFORE","CREATED_AFTER","CREATED_BY","CREATOR","CONTRIBUTED_BY","ENDS","EXTENT","IDENTIFIERS","KEYWORDS","LAST_MODIFIED_BY","MODIFIED","MODIFIED_BEFORE","MODIFIED_AFTER","PUBLISHERS_ID","PUBLISHERS_LABEL","PUBLISHERS_URI","CONTACTS_ID","CONTACTS_LABEL","CONTACTS_URI","QUERY","SCHEMES_ID","SCHEMES_LABEL","SCHEMES_URI","SEMANTIC_CONCEPTS","SIMILAR_TO","STATUS","SERVICE_TYPES","THEMES_ID","THEMES_LABEL","THEMES_URI","TOPICS_ID","TOPICS_LABEL","TOPICS_URI","TYPES","URI","USED_BY_ID","USED_BY_LABEL","USED_BY_URI","VISIBILITY","RESOURCE_TYPE","LANDING_PAGE","PURPOSE","RELIABILITY","RELIABILITY_MIN","RELIABILITY_MAX","ONLINE","COMPLIANT","SPEED","SPEED_MIN","SPEED_MAX","LIKES","LIKES_MIN","LIKES_MAX","VIEWS","VIEWS_MIN","VIEWS_MAX","HREF","LAYER_TYPE","LAYER_NAME","PARENT_LAYER","SUB_LAYER","MAP_LAYER","GALLERY_ITEM","FACETS","FIELDS","SORT","PAGE","PAGE_SIZE","FOR_TYPES","SORT_OPTIONS_DEFAULT","KGQuery","options","defaultQuery","page","size","sort","query","applyParameters","getQuery","parameter","setParameter","getParameter","key","obj","q","text","setQ","QueryParameters","getQ","classifiers","types","setClassifiers","getClassifiers","objTypes","setTypes","getTypes","setPage","isNaN","getPage","nextPage","previousPage","pageSize","setPageSize","getPageSize","order","setSort","getSort","getSortField","split","getSortOrder","getSortOptions","slice","clear","Classifiers","FUNCTION","TOPIC_PRIMARY","TOPIC_SECONDARY","SUBJECT_PRIMARY","SUBJECT_SECONDARY","AUDIENCE","PLACE","CATEGORY","Fields","ACCESS_RIGHTS","ALTERNATE_TITLES","ANNOTATIONS","CONTACTS","DATASETS","DESCRIPTION","DISTRIBUTIONS","GALLERY_ITEMS","LABEL","LAYERS","LEGEND","PUBLISHERS","RESOURCE_TYPES","SERVICE_TYPE","SERVICES","SPATIAL","STATISTICS","SUB_LAYERS","TEMPORAL","THEMES","THUMBNAIL","TOPICS","USED_BY","FIELDS_DEFAULT","Facets","CONCEPT_SCHEMES","FACETS_DEFAULT","FacetToParam","BBOX_REGEX","toArray","Query","toString","defaults","assign","JSON","parse","stringify","clone","json","clearParameter","setFacetParameter","facet","param","console","log","keywords","setKeywords","getKeywords","setUri","getUri","user","setCreatedBy","getCreatedBy","lastModifiedBy","setLastModifiedBy","getLastModifiedBy","themes","setThemes","getThemes","topics","setTopics","getTopics","setPublishers","getPublishers","contacts","setContacts","getContacts","usedBy","ids","setUsedBy","getUsedBy","schemes","setSchemes","getSchemes","serviceTypes","setServiceTypes","getServiceTypes","visibility","vis","setVisibility","getVisibility","getStatus","extent","bbox","setExtent","toBboxString","test","getExtent","classifier","setClassifier","arr","getClassifier","classes","keys","k","isArray","forEach","modified","date","beforeOrAfter","setModified","Date","dir","oppProp","arg","getTime","getModified","created","setCreated","getCreated","begins","setBeginDate","getBeginDate","ends","setEndDate","getEndDate","between","begin","end","setBetween","resourceTypes","setResourceTypes","getResourceTypes","facets","names","setFacets","getFacets","addFacet","push","removeFacet","idx","splice","fields","setFields","getFields","addField","field","removeField","Config","ualUrl","configure","GPHttpClient","timeout","authCookieName","setTimeout","setAuthToken","token","setCookie","cookie","getToken","getCookie","createRequestOpts","execute","opts","Promise","reject","XHRHttpClient","method","responseType","params","data","contentType","headers","Authorization","withCredentials","Cookie","o","axios","then","response","catch","err","BaseService","httpClient","_timeout","httpMethods","setUrl","client","baseUrl","apiBase","milliseconds","getClient","createPromise","createAndResolvePromise","resolve","createAndRejectPromise","setLogger","logger","logError","e","logDebug","msg","debug","buildRequest","req_1","request","ItemService","get","id","version","save","itemObj","remove","patch","overrides","search","ps","import","format","isFile","ro","processData","formData","file","overwrite","export","getMultiple","exists","uris","like","view","associations","versions","DatasetService","MapService","LayerService","style","_i","arguments","styles","describe","req","missing","find","srs","height","width","info_format","x","y","i","j","validate","ServiceService","about","svc","layers","svcId","results","harvest","liveTest","statistics","GalleryService","addItem","galleryId","removeItem","itemId","UtilsService","capabilities","property","parseFile","locate","location","store","AssociationService","associationId","AgolQuery","_query","val","groups","setGroups","getGroups","orgs","setOrgs","getOrgs","AgolService","getOrg","searchOrgs","getGroup","searchGroups","getItem","searchItems","getAgolId","filter","Categories","UNKNOWN","IMAGE_PRODUCT","KNOWLEDGE_GRAPH","USER","COMMUNITY_POST","COMMUNITY_PAGE","APP_PAGE","Events","ACCESSED","DISPLAYED","VIEWED","EDITED","DELETED","CLONED","ADDED","REMOVED","EXPORTED","IMPORTED","Event","category","related","setItem","setRelated","getCategory","getType","getRelated","DefaultTrackingServiceProvider","logEvent","event","logPageView","logSearch","resultCount","TrackingService","provider","setProvider","evt","pageView","KGService","suggest","_search","sources","ServiceFactory","defineProperty","target","varArgs","TypeError","to","index","nextSource","nextKey","writable","configurable","TrackingEventFactory","eventType","layerState","layerEvents","concat","baseLayer","baseEvents","cats","cat"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nclass GPError extends Error {\n    public error : string|null;\n    public status: number = 500;\n    public statusCode : number = 500;\n    constructor(message : string) {\n        super(message);\n        this.error = null;\n    }\n    public setError(value:string) { this.error = value; }\n    public setStatus(value:number) { this.status = this.statusCode = value; }\n}\n\nexport default GPError;\n","\n\nconst ItemTypes = {\n    DATASET         : \"dcat:Dataset\",\n    SERVICE         : \"regp:Service\",\n    LAYER           : \"Layer\",\n    MAP             : \"Map\",\n    GALLERY         : \"Gallery\",\n    COMMUNITY       : 'Community',\n    APPLICATION     : 'Application',\n    TOPIC           : 'Topic',\n    WEBSITE         : 'WebSite',\n    ORGANIZATION    : \"org:Organization\",\n    CONTACT         : \"vcard:VCard\",\n    PERSON          : \"foaf:Person\",\n    CONCEPT         : \"skos:Concept\",\n    CONCEPT_SCHEME  : \"skos:ConceptScheme\",\n    STANDARD        : 'dct:Standard',\n    RIGHTS_STATEMENT: 'dct:RightsStatement'\n};\n\nconst ItemTypeLabels = {};\nItemTypeLabels[ItemTypes.DATASET]          = \"Dataset\";\nItemTypeLabels[ItemTypes.SERVICE]          = \"Service\";\nItemTypeLabels[ItemTypes.LAYER]            = \"Layer\";\nItemTypeLabels[ItemTypes.MAP]              = \"Map\";\nItemTypeLabels[ItemTypes.GALLERY]          = \"Gallery\";\nItemTypeLabels[ItemTypes.COMMUNITY]        = 'Community';\nItemTypeLabels[ItemTypes.APPLICATION]      = 'Application';\nItemTypeLabels[ItemTypes.TOPIC]            = 'Topic';\nItemTypeLabels[ItemTypes.WEBSITE]          = 'WebSite';\nItemTypeLabels[ItemTypes.ORGANIZATION]     = \"Organization\";\nItemTypeLabels[ItemTypes.CONTACT]          = \"Contact\";\nItemTypeLabels[ItemTypes.PERSON]           = \"Person\";\nItemTypeLabels[ItemTypes.CONCEPT]          = \"Concept\";\nItemTypeLabels[ItemTypes.CONCEPT_SCHEME]   = \"Concept Scheme\";\nItemTypeLabels[ItemTypes.STANDARD]         = 'Standard';\nItemTypeLabels[ItemTypes.RIGHTS_STATEMENT] = 'Rights Statement';\n\n\nexport {\n    ItemTypes as default,\n    ItemTypes,\n    ItemTypeLabels\n};\n","\nimport ItemTypes from './types';\n\n\n\nconst URI_BASE = 'http://www.geoplatform.gov';\n\nconst ESRI_TYPES = [\n    \"http://www.geoplatform.gov/spec/esri-feature-rest\",\n    \"http://www.geoplatform.gov/spec/esri-image-rest\",\n    \"http://www.geoplatform.gov/spec/esri-map-rest\",\n    \"http://www.geoplatform.gov/spec/esri-tile-rest\"\n];\n\n\n\n\nfunction formatReference( ref : any ) : any {\n    if(ref === null) return '';\n    if(typeof(ref) === 'string')\n        return ref.toLowerCase().replace(/\\s/g,'');\n    else if(typeof(ref) === 'object') {\n        var result = '';\n        for(var prop in ref) {\n            if(ref.hasOwnProperty(prop)) {\n                var value = ref[prop];\n                if(value !== null && typeof(value) !== 'undefined') {\n                    //TODO catch non-string-able values\n                    result += (value+'').toLowerCase().replace(/\\s/g,'');\n                }\n            }\n        }\n        return result;\n    }\n    return '';\n}\n\n/**\n * Adjusts service access url to ignore certain patterns that can affect\n * how URI uniqueness is.\n * @param service - GP Service instance\n * @return access url adjusted for URI generation needs\n */\nfunction fixServiceHref(service : any) : string {\n    stripLayerFromServiceHref(service);\n    let url = service.accessURL || service.href;\n    if(!url || !url.length) return null;\n\n    //ensure case sensitivity is not an issue\n    // and that any surrounding whitespace is ignored\n    url = (url + '').trim().toLowerCase();\n\n    url = url.replace(/http(s)?:\\/\\//,'');    //ignore protocol for URI purposes\n\n    url = url.replace(/&?request=[A-Za-z]+/i,'')\n             .replace(/&?service=(WMS|WFS|WCS|CSW)/i,'')\n             .replace(/&?version=[0-9\\.]*/i,'')\n             .replace(/&?layers=[A-Za-z0-9\\-\\:_,]*/i, '')\n             .replace(/&?srs=[A-Za-z0-9\\:]*/i, '')\n             .replace(/&?crs=[A-Za-z0-9\\:]*/i, '')\n             .replace(/&?format=[A-Za-z\\/]*/i, '')\n             .replace(/&?bbox=[0-9,\\.]*/i, '');\n\n    let lastChar = url[url.length-1];\n    if( '/' === lastChar || '?' === lastChar) { //ignore empty querystring or trailing slashes\n        url = url.substring(0, url.length-1);\n    }\n    return url;\n}\n\n\n/**\n * ESRI services sometimes have layer information baked into their URL\n * which needs to be removed before the service can be used.\n * @param service - GP Service object\n */\nfunction stripLayerFromServiceHref(service : any) : string {\n\n    if(!service) return;\n    let type = service.serviceType || service.conformsTo;\n    if(!type) return;\n\n    //if ESRI service, make sure it doesn't have a layer id on the href\n    if( ESRI_TYPES.indexOf(type.uri) >= 0 ) {\n\n        let href = service.href || service.accessURL;\n        let matches = href.match(/(Map|Feature|Image)(Server\\/\\d+)/i);\n        if(matches && matches.length > 2) {\n            // 0 < full string match (ie, 'MapServer/1')\n            // 1 < server type match (ie, 'Map' or 'Feature')\n            // 2 < bit we care about (ie, 'Server/1')\n            href = href.replace(matches[2], 'Server/');\n\n            if(service.href) service.href = href;\n            if(service.accessURL) service.accessURL = href;\n        }\n    }\n}\n\n\n\n\n/**\n * @see https://geoplatform.atlassian.net/wiki/display/DT/Common+Object+Identifier+Scheme\n */\nconst URIFactory = {\n\n    factories : {},\n\n    register : function (type : string, factory : Function) {\n        this.factories[type] = factory;\n    },\n\n    create : function(object : any, md5Fn : Function) {\n        if(!object || !object.type) return null;\n        if( typeof(md5Fn) !== 'function' ) {\n            throw new Error(\"Must specify a MD5 function when using URIFactory\");\n        }\n        let factory = this.factories[object.type];\n        if(!factory) return null;\n        return factory(object, md5Fn);\n    }\n};\n\n\n\n\nURIFactory.register(ItemTypes.DATASET, function(dataset : any, md5 : Function) {\n    let pubName = (dataset.publisher||dataset.publishers||[])\n        .map( pub => { return pub.label||\"\"; }).join('');\n    let ref : any = formatReference({\n        title: dataset.title,\n        pub: pubName\n    });\n    return URI_BASE + '/id/dataset/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.SERVICE, function(service : any, md5 : Function) {\n    let url = fixServiceHref(service);\n    let ref = formatReference(url);\n    return URI_BASE + '/id/service/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.LAYER, function(layer : any, md5 : Function) {\n\n    let svcUrl = '';\n    let services = layer.servicedBy || layer.services;\n    if(services && services.length)\n        svcUrl = services[0].accessURL || services[0].href || '';\n    let lyrUrl = layer.accessURL || layer.href || '';\n    let lyrName = layer.layerName || '';\n\n    //not recommended based upon following example:\n    //  http://services.nationalmap.gov/.../MapServer/WMSServer?request=GetCapabilities&service=WMS/layer/1\n    // return url + '/layer/' + layer.layerName;\n\n    let args = svcUrl + lyrName + lyrUrl;\n    if(!args.length) return null;   //nothing was provided\n\n    //ALTERNATE URI PATTERN\n    let ref = formatReference(args);\n    return URI_BASE + '/id/layer/' + md5(ref);\n\n});\n\n/**\n * Uses the map title, createdBy, and all third-party identifiers associated with the map\n * @param {object} map - GP Map object\n * @return {string} uri unique to this object\n */\nURIFactory.register(ItemTypes.MAP, function(map : any, md5 : Function) {\n    let author = map.createdBy || map._createdBy || \"\";\n    let identifiers = (map.identifiers || map.identifier || []).join('');\n    let ref = formatReference({title: map.title, author: author, identifiers: identifiers});\n    return URI_BASE + '/id/map/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.GALLERY, function(gallery : any, md5 : Function) {\n    let author = gallery.createdBy || gallery._createdBy || \"\";\n    let ref = formatReference({title: gallery.title, author: author});\n    return URI_BASE + '/id/gallery/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.COMMUNITY, function(community : any, md5 : Function) {\n    let ref = formatReference({title: community.title});\n    return URI_BASE + '/id/community/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.ORGANIZATION, function(org : any, md5 : Function) {\n    let ref = formatReference(org.label || org.name);\n    return URI_BASE + '/id/organization/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.PERSON, function(person : any, md5 : Function) {\n    let ref = formatReference(person.name);\n    return URI_BASE + '/id/person/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONTACT, function(vcard : any, md5 : Function) {\n    let ref : any = {};\n    if(vcard.email || vcard.hasEmail)\n        ref.email = vcard.email || vcard.hasEmail; //email\n    if(vcard.tel)\n        ref.tel = vcard.tel; //tel\n    if(vcard.orgName || vcard['organization-name'])\n        ref.orgName = vcard.orgName || vcard['organization-name']; //orgName\n    if(vcard.positionTitle)\n        ref.positionTitle = vcard.positionTitle; //positionTitle\n    ref = formatReference(ref);\n    return URI_BASE + '/id/contact/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONCEPT, function(object : any, md5 : Function) {\n    let scheme = object.inScheme || object.scheme;\n    let schemeLabel = scheme ? (scheme.label || scheme.prefLabel) : '';\n    let schemeRef = formatReference(schemeLabel);\n    let ref = formatReference( object.label || object.prefLabel );\n    return URI_BASE + '/id/metadata-codelists/' + md5(schemeRef) + '/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONCEPT_SCHEME, function(object : any, md5 : Function) {\n    let ref = formatReference(object.label || object.prefLabel);\n    return URI_BASE + '/id/metadata-codelists/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.APPLICATION, function(object : any, md5 : Function) {\n    if(!object || !object.title) return null;\n    let author = object.createdBy || object._createdBy || \"\";\n    let ref = formatReference({title: object.title, author: author});\n    return URI_BASE + '/id/application/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.TOPIC, function(object : any, md5 : Function) {\n    if(!object || !object.title) return null;\n    let author = object.createdBy || object._createdBy || \"\";\n    let ref = formatReference({title: object.title, author: author});\n    return URI_BASE + '/id/topic/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.WEBSITE, function(item : any, md5 : Function) {\n    if(!item || !item.landingPage) return null;\n    let ref = formatReference(item.landingPage);\n    return URI_BASE + '/id/website/' + md5(ref);\n});\n\n\n\nfunction factoryFn(md5Fn) {\n    if( typeof(md5Fn) !== 'function' ) {\n        throw new Error(\"Must specify a MD5 function when using URIFactory\");\n    }\n    return function(object) {\n        return URIFactory.create(object, md5Fn);\n    };\n}\n\n\n\nexport {\n    factoryFn as default,\n    factoryFn as URIFactory\n};\n","\n\nexport default {\n    ALTERNATE_TITLE  : 'alternateTitles',\n    BEGINS           : 'startDate.min',\n    CLASSIFIERS      : 'classifiers',\n    CREATED          : 'created',\n    CREATED_BEFORE   : 'created.max',\n    CREATED_AFTER    : 'created.min',\n    CREATED_BY       : 'createdBy',\n    CREATOR          : 'creator.id',\n    CONTRIBUTED_BY   : 'contributedBy',\n    ENDS             : 'endDate.max',\n    EXTENT           : 'extent',\n    IDENTIFIERS      : 'identifiers',\n    KEYWORDS         : 'keywords',\n    LAST_MODIFIED_BY : 'lastModifiedBy',\n    MODIFIED         : 'modified',\n    MODIFIED_BEFORE  : 'modified.max',\n    MODIFIED_AFTER   : 'modified.min',\n    PUBLISHERS_ID    : 'publisher.id',\n    PUBLISHERS_LABEL : 'publisher.label',\n    PUBLISHERS_URI   : 'publisher.uri',\n    CONTACTS_ID      : 'contacts.id',\n    CONTACTS_LABEL   : 'contacts.label',\n    CONTACTS_URI     : 'contacts.uri',\n    QUERY            : 'q',\n    SCHEMES_ID       : 'scheme.id',\n    SCHEMES_LABEL    : 'scheme.label',\n    SCHEMES_URI      : 'scheme.uri',\n    SEMANTIC_CONCEPTS: 'concepts',  // <- for Semantic filter by concepts\n    SIMILAR_TO       : 'similarTo',\n    STATUS           : 'status',\n    SERVICE_TYPES    : 'serviceType.id',\n    THEMES_ID        : 'theme.id',\n    THEMES_LABEL     : 'theme.label',\n    THEMES_URI       : 'theme.uri',\n    TOPICS_ID        : 'topic.id',\n    TOPICS_LABEL     : 'topic.label',\n    TOPICS_URI       : 'topic.uri',\n    TYPES            : 'type',      //TODO change to 'types'\n    URI              : 'uri',\n    USED_BY_ID       : 'usedBy.id',\n    USED_BY_LABEL    : 'usedBy.label',\n    USED_BY_URI      : 'usedBy.uri',\n    VISIBILITY       : 'visibility',\n    RESOURCE_TYPE    : 'resourceType',\n    DATASET          : 'dataset',\n    LANDING_PAGE     : 'landingPage',\n    PURPOSE          : 'purpose',\n\n    //statistics parameters\n    RELIABILITY      : 'reliability',\n    RELIABILITY_MIN  : 'reliability.min',\n    RELIABILITY_MAX  : 'reliability.max',\n    ONLINE           : 'online',\n    COMPLIANT        : 'compliant',\n    SPEED            : 'speed',\n    SPEED_MIN        : 'speed.min',\n    SPEED_MAX        : 'speed.max',\n    LIKES            : 'likes',\n    LIKES_MIN        : 'likes.min',\n    LIKES_MAX        : 'likes.max',\n    VIEWS            : 'views',\n    VIEWS_MIN        : 'views.min',\n    VIEWS_MAX        : 'views.max',\n\n    //type-specific parameters\n    HREF             : 'href',           //service-specific\n    LAYER_TYPE       : 'layerType',     //layer-specific\n    LAYER_NAME       : 'layerName',     //...\n    PARENT_LAYER     : 'parentLayer',   //...\n    SUB_LAYER        : 'subLayer',      //...\n    SERVICE          : 'service',       //...\n    MAP_LAYER        : 'mapLayer',      //map-specific\n    GALLERY_ITEM     : 'galleryItem',   //gallery-specific\n\n    //meta-parameters\n    FACETS           : 'includeFacets',  //TODO change to 'facets'\n    FIELDS           : 'fields',\n    SORT             : 'sort',\n    PAGE             : 'page',\n    PAGE_SIZE        : 'size',\n\n    //recommender service-specific\n    FOR_TYPES        : 'for'\n};\n","\nimport QueryParameters from './parameters';\n\ninterface KVP<U> { [ key : string ] : U }\n\n\nconst SORT_OPTIONS_DEFAULT : { value:string; label:string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nclass KGQuery {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    constructor( options ?: KVP<any> ) {\n\n        this.defaultQuery = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n        this.query = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    parameter(name : string, value: any) : KGQuery {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    setParameter (name : string, value : any) {\n        if(value === null || value === undefined)\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    applyParameters (obj : KVP<any> ) {Â \n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p, obj[p]);\n            }\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    q(text : string) : KGQuery {\n        this.setQ(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setQ (text : string) {\n        this.setParameter(QueryParameters.QUERY, text);\n    }\n\n    getQ() : string|null {\n        return this.getParameter(QueryParameters.QUERY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    classifiers(types : string|string[]) : KGQuery {\n        this.setClassifiers(types);\n        return this;\n    }\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    setClassifiers (types : string|string[]) {\n        if(!types) return;\n        if(typeof(types) === 'string') types = types = [types];\n        this.setParameter(QueryParameters.TYPES, types);\n    }\n\n    /**\n     * @return KG classifiers for which concepts should be returned\n     */\n    getClassifiers () : string[] {\n        return this.getParameter(QueryParameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.types()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    types(objTypes : string|string[]) : KGQuery {\n        this.setTypes(objTypes);\n        return this;\n    }\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.setTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    setTypes (objTypes : string|string[]) {\n        if(!objTypes) return;\n        if(typeof(objTypes) === 'string') objTypes = [objTypes];\n        this.setParameter(QueryParameters.FOR_TYPES, objTypes);\n    }\n\n    /**\n     * Get the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.getTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @return Item object type names\n     */\n    getTypes () : string[] {\n        return this.getParameter(QueryParameters.FOR_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : KGQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this.query.page = page*1;\n    }\n\n    getPage() : number {\n        return this.query.page;\n    }\n\n    nextPage() : void {\n        this.setPage(this.query.page+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : KGQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this.query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this.query.size;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order ?: string) : KGQuery {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order ?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.query.sort = sort;\n    }\n\n    getSort() : string | null {\n        return this.query.sort;\n    }\n\n    getSortField() : string | null {\n        return this.query.sort.split(',')[0];\n    }\n\n    getSortOrder() : boolean {\n        return this.query.sort.split(',')[1] === 'asc';\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string, label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = this.defaultQuery;\n    }\n}\n\nexport default KGQuery;\n","\n\n\nexport default  {\n    PURPOSE             : 'purpose',\n    FUNCTION            : 'function',\n    TOPIC_PRIMARY       : 'primaryTopic',\n    TOPIC_SECONDARY     : 'secondaryTopic',\n    SUBJECT_PRIMARY     : 'primarySubject',\n    SUBJECT_SECONDARY   : 'secondarySubject',\n    COMMUNITY           : 'community',\n    AUDIENCE            : 'audience',\n    PLACE               : 'place',\n    CATEGORY            : 'category'\n};\n","\nimport Parameters from './parameters';\nimport Classifiers from './classifiers';\n\ninterface KVP<U> { [ key : string ] : U }\n\nconst Fields : KVP<string> = {\n    ACCESS_RIGHTS       : 'rights',\n    ALTERNATE_TITLES    : 'alternateTitles',\n    ANNOTATIONS         : 'annotations',\n    CLASSIFIERS         : 'classifiers',\n    CONCEPT_SCHEME      : 'scheme',\n    CONTACTS            : 'contacts',\n    CREATED             : 'created',\n    CREATED_BY          : 'createdBy',\n    DATASETS            : 'datasets',\n    DESCRIPTION         : 'description',\n    DISTRIBUTIONS       : 'distributions',\n    EXTENT              : 'extent',\n    GALLERY_ITEMS       : 'items',\n    HREF                : 'href',\n    IDENTIFIERS         : 'identifiers',\n    KEYWORDS            : 'keywords',\n    LABEL               : 'label',\n    LAST_MODIFIED_BY    : 'lastModifiedBy',\n    LAYERS              : 'layers',\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LEGEND              : 'legend',\n    MODIFIED            : 'modified',\n    PARENT_LAYER        : 'parentLayer',\n    PUBLISHERS          : 'publishers',\n    RESOURCE_TYPES      : 'resourceTypes',\n    SERVICE_TYPE        : 'serviceType',\n    SERVICES            : 'services',\n    SPATIAL             : 'spatial',\n    STATISTICS          : 'statistics',\n    STATUS              : 'status',\n    SUB_LAYERS          : 'subLayers',\n    TEMPORAL            : 'temporal',\n    THEMES              : 'themes',\n    THUMBNAIL           : 'thumbnail',\n    TOPICS              : 'topics',\n    USED_BY             : 'usedBy',\n    VISIBILITY          : 'visibility',\n    LANDING_PAGE        : 'landingPage'\n};\n\nconst FIELDS_DEFAULT : string[] = [\n    Fields.CREATED, Fields.MODIFIED, Fields.CREATED_BY,\n    Fields.PUBLISHERS, Fields.THEMES, Fields.DESCRIPTION\n];\n\n/* --------------------------------------------------------- */\n\nconst Facets : KVP<string> = {\n    ALTERNATE_TITLES    : 'alternateTitles',\n    CONCEPT_SCHEMES     : 'schemes',\n    CREATED_BY          : 'createdBy',\n    HREF                : 'href',\n    IDENTIFIERS         : \"identifiers\",\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LIKES               : 'likes',\n    ONLINE              : 'online',\n    PUBLISHERS          : 'publishers',\n    CONTACTS            : 'contacts',\n    RELIABILITY         : 'reliability',\n    SERVICE_TYPES       : 'serviceTypes',\n    SPEED               : 'speed',\n    STATUS              : 'status',\n    THEMES              : 'themes',\n    TOPICS              : 'topics',\n    TYPES               : 'type',   //TODO change to 'types'\n    USED_BY             : 'usedBy',\n    VIEWS               : 'views',\n    VISIBILITY          : 'visibility'\n};\n\nconst FACETS_DEFAULT : string[] = [\n    Facets.TYPES,\n    Facets.PUBLISHERS,\n    Facets.SERVICE_TYPES,\n    Facets.CONCEPT_SCHEMES,\n    Facets.VISIBILITY,\n    Facets.CREATED_BY\n];\n\n\n/*\n    Map facet keys to parameters so clients can set\n    query params using faceted results\n\n    //TODO remove these and their function below\n */\nconst FacetToParam : KVP<string> = {};\nFacetToParam[Facets.TYPES]           = Parameters.TYPES;\nFacetToParam[Facets.THEMES]          = Parameters.THEMES_ID;\nFacetToParam[Facets.TOPICS]          = Parameters.TOPICS_ID;\nFacetToParam[Facets.PUBLISHERS]      = Parameters.PUBLISHERS_ID;\nFacetToParam[Facets.CONTACTS]        = Parameters.CONTACTS_ID;\nFacetToParam[Facets.CONCEPT_SCHEMES] = Parameters.SCHEMES_ID;\nFacetToParam[Facets.USED_BY]         = Parameters.USED_BY_ID;\n\n\n\n/* --------------------------------------------------------- */\n\n\nconst SORT_OPTIONS_DEFAULT : { value: string; label: string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nconst BBOX_REGEX = /^\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?$/;\n\n\nfunction toArray(value : any) : any | null {\n    let result = value;\n    //if given a non-array value, wrap in array\n    if(result !== null && typeof(result.push) === 'undefined') result = [result];\n    //if array value is empty, nullify the result\n    if(result !== null && !result.length) result = null;\n    return result;\n}\n\n\n\n/**\n * Query\n *\n * Specify the \"default\" query constraints to use by passing in 'options.defaults = {...}';\n *\n */\nclass Query {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    /**\n     * @param options - set of initial constraints\n     */\n    constructor(options ?: KVP<any>) {\n        this.defaultQuery = { };\n        this.defaultQuery[Parameters.PAGE.toString()] = 0;\n        this.defaultQuery[Parameters.PAGE_SIZE.toString()] = 10;\n        this.defaultQuery[Parameters.SORT.toString()] = \"modified,desc\";\n        this.defaultQuery[Parameters.FIELDS.toString()] = FIELDS_DEFAULT.slice(0);\n        this.defaultQuery[Parameters.FACETS.toString()] = FACETS_DEFAULT.slice(0);\n        if(options && options.defaults) {\n            Object.assign(this.defaultQuery, options.defaults);\n            delete options.defaults;\n        }\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n\n    /**\n     * @return containing request-ready parameters/values\n     */\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    /**\n     * @return Query\n     */\n    clone() : Query {\n        let result = new Query();\n        let json = JSON.parse(JSON.stringify(this.query));\n        result.applyParameters(json);\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param name\n     * @param value\n     * @return Query this\n     */\n    parameter(name : string, value : any) : Query {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    /**\n     * @param name\n     * @param value\n     */\n    setParameter (name : string, value: any) : void {\n        if(value === null || value === undefined || //if no value was provide\n            (typeof(value.push) !== 'undefined' && !value.length)) //or empty array\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    /**\n     * @param key - name of parameter\n     * @return value of parameter\n     */\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    /**\n     * @param name - name of parameter to remove existing value for\n     */\n    clearParameter(name : string) {\n        delete this.query[name];\n    }\n\n    /**\n     * @param obj - set of parameter/values to apply to this query\n     */\n    applyParameters (obj : KVP<any>) : void {Â \n        for(let p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p as string, obj[p] as any);\n            }\n        }\n    }\n\n    /**\n     * @param facet - name of facet to set the value for as a parameter\n     * @param value - value of the facet to use as the parameter's value\n     */\n     //TODO remove this function\n    setFacetParameter (facet: string, value: string) : void {\n        let param : string = FacetToParam[facet];\n        if(!param) {\n            console.log(\"WARN : Query.applyFacetParameter() - \" +\n                \"unable to map facet to known parameter '\" + facet + \"', using \" +\n                \"as direct parameter which may not operate as intended\");\n        }\n        this.setParameter(param||facet, value);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param text\n     * @return Query this\n     */\n    q(text : string) : Query { this.setQ(text); return this; }\n\n    /** @param text - free text query */\n    setQ (text : string) : void { this.setParameter(Parameters.QUERY, text); }\n    /** @return */\n    getQ() : string { return this.getParameter(Parameters.QUERY) as string; }\n\n\n    // -----------------------------------------------------------\n\n\n    keywords(text : string|string[]) : Query {\n        this.setKeywords(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setKeywords (text : string|string[]) : void {\n        this.setParameter(Parameters.KEYWORDS, toArray(text));\n    }\n\n    getKeywords() : string[] {\n        return this.getParameter(Parameters.KEYWORDS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    uri (uri : string) : Query {\n        this.setUri(uri);\n        return this;\n    }\n\n    setUri(uri : string) {\n        this.setParameter(Parameters.URI, uri);\n    }\n\n    getUri() : any {\n        return this.getParameter(Parameters.URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    types(types : string|string[]) : Query {\n        this.setTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - name of class(es) to request\n     */\n    setTypes (types : string|string[]) {\n        this.setParameter(Parameters.TYPES, toArray(types));\n    }\n\n    getTypes () : string[] {\n        return this.getParameter(Parameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    createdBy(user : string) : Query {\n        this.setCreatedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setCreatedBy (user : string) {\n        this.setParameter(Parameters.CREATED_BY, user);\n    }\n\n    /** @return username */\n    getCreatedBy () : any {\n        return this.getParameter(Parameters.CREATED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    lastModifiedBy(user : string) : Query {\n        this.setLastModifiedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setLastModifiedBy (user: string) {\n        this.setParameter(Parameters.LAST_MODIFIED_BY, user);\n    }\n\n    /** @return username */\n    getLastModifiedBy () : any {\n        return this.getParameter(Parameters.LAST_MODIFIED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - string or array of strings containing theme constraint\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    themes(themes: string|string[], parameter?:string) : Query {\n        this.setThemes(themes, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - theme or themes to constrain by\n     */\n    setThemes (themes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.THEMES_ID, null);\n        this.setParameter(Parameters.THEMES_LABEL, null);\n        this.setParameter(Parameters.THEMES_URI, null);\n\n        let param = parameter || Parameters.THEMES_ID;\n        this.setParameter(param, toArray(themes));\n    }\n\n    getThemes () : string[] {\n        return this.getParameter(Parameters.THEMES_ID) ||\n            this.getParameter(Parameters.THEMES_LABEL) ||\n            this.getParameter(Parameters.THEMES_URI);\n    }\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param  topics - string or array of strings containing theme constraint\n     * @param  parameter - optional, to indicate the parameter to use\n     * @return Query instance\n     */\n    topics(topics:string|string[], parameter ?: string) : Query {\n        this.setTopics(topics, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param topics - theme or topics to constrain by\n     */\n    setTopics (topics:string|string[], parameter ?: string) {\n\n        //clear existing\n        this.setParameter(Parameters.TOPICS_ID, null);\n        this.setParameter(Parameters.TOPICS_LABEL, null);\n        this.setParameter(Parameters.TOPICS_URI, null);\n\n        let param = parameter || Parameters.TOPICS_ID;\n        this.setParameter(param, toArray(topics));\n    }\n\n    getTopics () : string[] {\n        return this.getParameter(Parameters.TOPICS_ID) ||\n            this.getParameter(Parameters.TOPICS_LABEL) ||\n            this.getParameter(Parameters.TOPICS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    publishers(publishers:string|string[], parameter?:string) : Query {\n        this.setPublishers(publishers, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param publishers - publishing orgs to constrain by\n     */\n    setPublishers (publishers:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.PUBLISHERS_ID, null);\n        this.setParameter(Parameters.PUBLISHERS_LABEL, null);\n        this.setParameter(Parameters.PUBLISHERS_URI, null);\n\n        let param = parameter || Parameters.PUBLISHERS_ID;\n        this.setParameter(param, toArray(publishers));\n    }\n\n    getPublishers () : string[] {\n        return this.getParameter(Parameters.PUBLISHERS_ID) ||\n            this.getParameter(Parameters.PUBLISHERS_LABEL) ||\n            this.getParameter(Parameters.PUBLISHERS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Point of Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    contacts(contacts:string|string[], parameter?:string) : Query {\n        this.setContacts(contacts, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param contacts - publishing orgs to constrain by\n     */\n    setContacts (contacts:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.CONTACTS_ID, null);\n        this.setParameter(Parameters.CONTACTS_LABEL, null);\n        this.setParameter(Parameters.CONTACTS_URI, null);\n\n        let param = parameter || Parameters.CONTACTS_ID;\n        this.setParameter(param, toArray(contacts));\n    }\n\n    getContacts () : string[] {\n        return this.getParameter(Parameters.CONTACTS_ID) ||\n            this.getParameter(Parameters.CONTACTS_LABEL) ||\n            this.getParameter(Parameters.CONTACTS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    usedBy(ids:string|string[], parameter?:string) : Query {\n        this.setUsedBy(ids, parameter);\n        return this;\n    }\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param ids - publishing orgs to constrain by\n     */\n    setUsedBy (ids:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.USED_BY_ID, null);\n        this.setParameter(Parameters.USED_BY_LABEL, null);\n        this.setParameter(Parameters.USED_BY_URI, null);\n\n        let param = parameter || Parameters.USED_BY_ID;\n        this.setParameter(param, toArray(ids));\n    }\n\n    getUsedBy () : string[] {\n        return this.getParameter(Parameters.USED_BY_ID) ||\n            this.getParameter(Parameters.USED_BY_LABEL) ||\n            this.getParameter(Parameters.USED_BY_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    schemes(schemes:string|string[], parameter?:string) : Query {\n        this.setSchemes(schemes, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     */\n    setSchemes (schemes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.SCHEMES_ID, null);\n        this.setParameter(Parameters.SCHEMES_LABEL, null);\n        this.setParameter(Parameters.SCHEMES_URI, null);\n\n        let param = parameter || Parameters.SCHEMES_ID;\n        this.setParameter(param, toArray(schemes));\n    }\n\n    getSchemes() : string[] {\n        return this.getParameter(Parameters.SCHEMES_ID) ||\n            this.getParameter(Parameters.SCHEMES_LABEL) ||\n            this.getParameter(Parameters.SCHEMES_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     *\n     */\n    serviceTypes(types:string|string[]) : Query {\n        this.setServiceTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - ids\n     */\n    setServiceTypes (types:string|string[]) {\n        this.setParameter(Parameters.SERVICE_TYPES, toArray(types));\n    }\n\n    getServiceTypes () : string[] {\n        return this.getParameter(Parameters.SERVICE_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    visibility(vis:\"public\"|\"private\") : Query {\n        this.setVisibility(vis);\n        return this;\n    }\n\n    /**\n     * @param visibility - one of 'public' or 'private'\n     */\n    setVisibility (visibility : \"public\"|\"private\") {\n        this.setParameter(Parameters.VISIBILITY, visibility);\n    }\n\n    getVisibility () : any {\n        return this.getParameter(Parameters.VISIBILITY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    status(value : string) : Query {\n        this.setStatus(value);\n        return this;\n    }\n\n    /**\n     * @param status - current status of Item\n     */\n    setStatus (value : string) {\n        this.setParameter(Parameters.STATUS, value);\n    }\n\n    getStatus () : any {\n        return this.getParameter(Parameters.STATUS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    extent(bbox : any) : Query {\n        this.setExtent(bbox);\n        return this;\n    }\n\n    /**\n     * @param bbox - string form of \"minx,miny,maxx,maxy\", or L.LatLngBounds, or Array\n     */\n    setExtent (bbox : any) {\n        if(bbox) {\n            if(typeof(bbox.toBboxString) !== 'undefined') {\n                //Leaflet Bounds instance\n                bbox = bbox.toBboxString();\n\n            } else if(typeof(bbox.push) !== 'undefined' && bbox.length &&\n                //Nested array (alternate Leaflet representation):\n                // [ [minLat,minLong], [maxLat,maxLong] ]\n                typeof(bbox[0].push) !== 'undefined') {\n                bbox = bbox[0][1]+','+bbox[0][0]+','+bbox[1][1]+','+bbox[1][0];\n\n            } else if(typeof(bbox) === 'string') {\n                if(!BBOX_REGEX.test(bbox)) {\n                    throw new Error(\"Invalid argument: bbox string must be \" +\n                        \"in form of 'minx,miny,maxx,maxy'\");\n                }\n            } else {\n                throw new Error(\"Invalid argument: bbox must be one of \" +\n                    \"Leaflet.Bounds, nested array, or bbox string\");\n            }\n        }\n        this.setParameter(Parameters.EXTENT, bbox);\n    }\n\n    /**\n     * @return bbox string or null if not set\n     */\n    getExtent () : any {\n        return this.getParameter(Parameters.EXTENT);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.classifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     * @return Query\n     */\n    classifier(classifier : string, value : string|string[]) : Query {\n        this.setClassifier(classifier, value);\n        return this;\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.setClassifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     */\n    setClassifier(classifier : string, value : string|string[]) {\n        let arr = toArray(value);\n        this.setParameter(Parameters.CLASSIFIERS + \".\" + classifier, arr);\n    }\n\n    /**\n     * @param classifier - name of classifier constraint in use\n     * @return array of concept ids\n     */\n    getClassifier(classifier : string) : string[] {\n        return this.getParameter(Parameters.CLASSIFIERS + \".\" + classifier) || [];\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...',\n     *      functionIds = ['...','...'];\n     *  let query = new Query();\n     *  query.classifiers({\n     *       KGClassifiers.PURPOSE: purposeId,\n     *       KGClassifiers.FUNCTION: functionIds\n     *  });\n     *\n     * @param value - object defining classifiers\n     * @return Query instance\n     */\n    classifiers(value : any) : Query {\n        this.setClassifiers(value);\n        return this;\n    }\n\n    /**\n     * @param value - object defining classifiers\n     */\n    setClassifiers (value : any) {\n        const classes = Object.keys(Classifiers).map(k=>Classifiers[k]);\n        if(!value || typeof(value) !== 'object' || Array.isArray(value)) {\n            classes.forEach( classifier => {\n                this.clearParameter( Parameters.CLASSIFIERS + \".\" + classifier );\n            });\n            return;\n        }\n        Object.keys(value).forEach( classifier => {\n            if(~classes.indexOf(classifier)) {\n                this.setClassifier( classifier, value[classifier] );\n            }\n        });\n    }\n\n    /**\n     * @return classifiers used in the query\n     */\n    getClassifiers () : any {\n        let result = {};\n        Object.keys(Classifiers).map(k=>Classifiers[k]).forEach( classifier => {\n            result[classifier] = this.getClassifier(classifier);\n        });\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    modified(date : number|Date, beforeOrAfter : boolean) : Query {\n        this.setModified(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setModified (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.MODIFIED_BEFORE, null);\n            this.setParameter(Parameters.MODIFIED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.MODIFIED_BEFORE : Parameters.MODIFIED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.MODIFIED_AFTER : Parameters.MODIFIED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getModified () : Date {\n        let value = this.getParameter(Parameters.MODIFIED_BEFORE) ||\n            this.getParameter(Parameters.MODIFIED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    created(date : number|Date, beforeOrAfter:boolean) : Query {\n        this.setCreated(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setCreated (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.CREATED_BEFORE, null);\n            this.setParameter(Parameters.CREATED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.CREATED_BEFORE : Parameters.CREATED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.CREATED_AFTER : Parameters.CREATED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getCreated () : Date {\n        let value = this.getParameter(Parameters.CREATED_BEFORE) ||\n            this.getParameter(Parameters.CREATED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    begins(date : number|Date) : Query {\n        this.setBeginDate(date);\n        return this;\n    }\n\n    setBeginDate (date : number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.BEGINS, date);\n    }\n\n    getBeginDate () : Date {\n        let date = this.getParameter(Parameters.BEGINS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    ends(date : number|Date) : Query {\n        this.setEndDate(date);\n        return this;\n    }\n\n    setEndDate (date: number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.ENDS, date);\n    }\n\n    getEndDate () : Date {\n        let date = this.getParameter(Parameters.ENDS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    between(begin : number|Date, end : number|Date) : Query {\n        this.setBetween(begin, end);\n        return this;\n    }\n\n    setBetween(begin : number|Date, end : number|Date) {\n        this.begins(begin);\n        this.ends(end);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    resourceTypes(types: string|string[]) : Query {\n        this.setResourceTypes(types);\n        return this;\n    }\n\n    setResourceTypes(types: string|string[]) {\n        this.setParameter(Parameters.RESOURCE_TYPE, toArray(types));\n    }\n\n    getResourceTypes() : string[] {\n        return this.getParameter(Parameters.RESOURCE_TYPE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    facets(names : string|string[]) : Query {\n        this.setFacets(names);\n        return this;\n    }\n\n    /*\n     * @param names - names of facets\n     */\n    setFacets (names: string|string[]) {\n        this.setParameter(Parameters.FACETS, toArray(names));\n    }\n\n    getFacets() : string[] {\n        return this.getParameter(Parameters.FACETS);\n    }\n\n    /**\n     * @param name - name of facet to add\n     */\n    addFacet(name: string) {\n        let facets = this.getFacets() || [];\n        facets.push(name);\n        this.setFacets(facets);\n    }\n\n    /**\n     * @param name - name of facet to remove\n     */\n    removeFacet(name: string) {\n        let facets = this.getFacets() || [];\n        let idx = facets.indexOf(name);\n        if(idx>=0) {\n            facets.splice(idx, 1);\n            this.setFacets(facets);\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    fields(fields: string|string[]) : Query {\n        this.setFields(fields);\n        return this;\n    }\n\n    /**\n     * @param fields - list of field names to request for each search result\n     */\n    setFields (fields: string|string[]) {\n        this.setParameter(Parameters.FIELDS, toArray(fields));\n    }\n\n    getFields() : string[] {\n        return this.getParameter(Parameters.FIELDS);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    addField(field: string) {\n        let fields = this.getFields() || [];\n        fields.push(field);\n        this.setFields(fields);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    removeField(field: string) {\n        let fields = this.getFields() || [];\n        let idx = fields.indexOf(field);\n        if(idx>=0) {\n            fields.splice(idx, 1);\n            this.setFields(fields);\n        }\n    }\n\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page: number) : Query {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page: number) {\n        if(isNaN(page) || page*1<0) return;\n        this.setParameter(Parameters.PAGE, page*1);\n    }\n\n    getPage() : number {\n        return this.getParameter(Parameters.PAGE);\n    }\n\n    nextPage() : void {\n        this.setPage(this.getPage()+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.getPage()-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : Query {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size: number) {\n        if(isNaN(size) || size*1<0) return;\n        this.setParameter(Parameters.PAGE_SIZE, size*1);\n    }\n\n    getPageSize() : number {\n        return this.getParameter(Parameters.PAGE_SIZE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort: string, order?:string) : Query {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort: string, order?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.setParameter(Parameters.SORT, sort);\n    }\n\n    getSort() : string {\n        return this.getParameter(Parameters.SORT);\n    }\n\n    getSortField() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[0] : null;\n    }\n\n    getSortOrder() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[1] : null;\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string; label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n    }\n}\n\nexport {\n    Query as default,\n    Query,\n    Fields,\n    Facets\n};\n","\nvar Config : { [key:string] : any } = {\n\n    ualUrl: 'https://ual.geoplatform.gov',\n    //appId: '...',\n\n    configure: function(options : any) {\n        Object.assign(this, options);\n    }\n};\n\nexport default Config;\n","\n\nclass GPHttpClient {\n\n    protected token : any;\n    protected cookie : any;\n    protected timeout : number = 5000;\n\n    protected authCookieName = 'gpoauth-a';\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        options = options || {};\n        this.setTimeout(options.timeout||30000);\n        this.setAuthToken(options.token);\n        this.setCookie(options.cookie);\n    }\n\n    setTimeout(timeout : number) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg : string|Function) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    getToken() : string {\n        if(this.token && typeof(this.token) === 'function') return this.token();\n        else return this.token || null;\n    }\n\n    setCookie(cookie) {\n        this.cookie = cookie;\n    }\n\n    getCookie() {\n        return this.cookie;\n    }\n\n    createRequestOpts(\n        // @ts-ignore\n        options : { [key:string] : any }\n    ) : any {\n        throw new Error(\"Must implement 'createRequestOpts' in a sub-class\");\n    }\n\n    execute(\n        // @ts-ignore\n        opts : any\n    ) : Promise<any> {\n        return Promise.reject(new Error(\"Must overrdie 'execute' in a sub-class\"));\n    }\n\n}\n\nexport default GPHttpClient;\n","\nimport axios from 'axios';\nimport GPError from '../shared/error';\nimport GPHttpClient from './client';\n\n\nclass XHRHttpClient extends GPHttpClient {\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        super(options);\n    }\n\n\n    createRequestOpts(options : { [key:string] : any }) : any {\n\n        let opts : { [key:string] : any } = {\n            method: options.method,\n            url: options.url,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.json === true)\n            opts.responseType = 'json';\n\n        if(options.params) {\n            opts.params = options.params;\n        }\n\n        if(options.data) {\n            opts.data = options.data;\n            opts.contentType = 'application/json';\n        }\n\n        //set headers requested by user config\n        opts.headers = {};\n        if(options.headers) {\n            Object.assign(opts.headers, options.headers);\n        }\n\n        //set authorization header if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.headers.Authorization = 'Bearer ' + token;\n                opts.withCredentials = true;\n            }\n        }\n        let cookie = this.getCookie();\n        if(cookie) opts.headers.Cookie = this.authCookieName + '=' + cookie;\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        return opts;\n    }\n\n\n    execute(opts : any) : Promise<any> {\n\n        if(typeof(axios) === 'undefined') {\n            throw new Error(\"Axios not found, check that you have included \" +\n                \"it as a dependency of the application or use a different \" +\n                \"HttpClient implementation\")\n        }\n\n        let promise = axios(opts)\n        .then( response => { return response.data; })\n        .catch( error => {\n            let err : GPError = new GPError(error.message);\n            if (error.response) {\n                err = new GPError(error.response.data);\n            }\n            throw err;\n        });\n        return promise;\n    }\n\n}\n\nexport default XHRHttpClient;\n","\nimport Config from '../shared/config';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\n/**\n * BaseService\n * abstract service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n */\nclass BaseService {\n\n    protected apiBase ?: string;\n    protected baseUrl ?: string;\n    protected client : GPHttpClient;\n    protected _timeout : number = 30000;\n    protected logger : any;\n    protected httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n    }\n\n    setUrl(baseUrl : string) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/items';\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    setTimeout(milliseconds : number) {\n        this._timeout = milliseconds;\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    timeout(milliseconds : number) : BaseService {\n        this.setTimeout(milliseconds);\n        return this;\n    }\n\n    /**\n     * @return GPHttpClient instance or null if one was not provided\n     */\n    getClient() {\n        return this.client;\n    }\n\n    createPromise ( arg: (resolve: (value?: any) => void, reject: (reason?: any) => void) => void ) : Promise<any> {\n        return new Promise<any>( arg );\n    }\n    createAndResolvePromise( value : any ) : Promise<any> {\n        return Promise.resolve(value);\n    }\n    createAndRejectPromise ( error : Error ) : Promise<any>{\n        return Promise.reject(error);\n    }\n\n    /**\n     * @param logger - log service\n     */\n    setLogger(logger : any) {\n        this.logger = logger;\n    }\n\n    /**\n     * @param e - error to log (if logger specified)\n     */\n    logError(e : string|Error) {\n        if(this.logger && this.logger.error) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * @param msg - message to log as debug\n     */\n    logDebug(msg : string) {\n        if(this.logger && this.logger.debug) {\n            this.logger.debug(msg);\n        }\n    }\n\n\n\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this._timeout || 30000;\n        let opts = this.createRequestOpts(options);\n        return opts;\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(typeof(options.options)==='object') {\n            let req = options.options;  //user supplied configuration\n            delete options.options;\n\n            if(req.params && options.params) {    //merge user params with ones needed by API calls\n                //Note: any user-supplied parameter of the same name as one used\n                // by the GP API call will be overwritten\n                Object.keys(options.params).forEach( param => {\n                    req.params[param] = options.params[param];\n                });\n                delete options.params;\n            }\n\n            Object.assign(req, options);\n            options = req;\n        }\n\n        let request = this.client.createRequestOpts(options);\n        this.logDebug(\"BaseService.createRequestOpts() - \" + JSON.stringify(request));\n        return request;\n    }\n\n    execute(opts : {[key:string]:any} ) : Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return this.createAndRejectPromise(e);\n        });\n    }\n\n}\n\n\nexport default BaseService;\n","\nimport { Item, SearchResults } from '../shared/models';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\nimport BaseService from './base';\n\n/**\n * ItemService\n * service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n * Ex Searching Items\n *      let params = { q: 'test' };\n *      itemService.search(params).then(response=>{\n *          console.log(response.results.length + \" of \" + response.totalResults);\n *      }).catch(e=>{...});\n *\n * Ex Fetch Item:\n *      itemService.get(itemId).then(item=>{...}).catch(e=>{...});\n *\n * Ex Saving Item:\n *      itemService.save(item).then(item=>{...}).catch(e=>{...});\n *\n * Ex Deleting Item:\n *      itemService.remove(itemId).then(()=>{...}).catch(e=>{...});\n *\n * Ex Patching Item:\n *      itemService.patch(itemId,patch).then(item=>{...}).catch(e=>{...});\n *\n */\nclass ItemService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n\n    /**\n     * @param id - identifier of item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    get (id : string, options ?: any) : Promise<Item> {\n\n        let url = this.baseUrl + '/' + id;\n        if(options && options.version) {\n            url += '/versions/' + options.version;\n            // this.logDebug(\"Client.get requesting version: \" + options.version);\n        }\n        return this.createAndResolvePromise( url )\n        .then( url => {\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.get() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param itemObj - item to create or update\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    save (itemObj : Item, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( itemObj )\n        .then( item => {\n\n            let method = 'POST',\n                url = this.baseUrl;\n            if(item.id) {\n                method = \"PUT\";\n                url += '/' + item.id;\n            } else {\n                //if item is being created and has no URI already defined\n                // attempt to create one using the API's method for doing so\n                // and then attempt the actual item creation\n                if(!item.uri) {\n                    return this.getUri(item, options)\n                    .then( uri => {\n                        item.uri = uri;\n                        let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n                        return this.execute(opts);\n                    });\n                }\n            }\n\n            let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error saving item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.save() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to delete\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving true if successful or an error\n     */\n    remove (id : string, options ?: any) : Promise<boolean> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:\"DELETE\", url: url, options: options\n            });\n            return this.execute(opts);\n        })\n        .then( () => true)\n        .catch(e => {\n            let err = new Error(`Error deleting item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.remove() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to patch\n     * @param patch - HTTP-PATCH compliant set of properties to patch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    patch (id : string, patch : any, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"PATCH\", url: url, data: patch, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error patching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.patch() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to clone\n     * @param overrides - KVP of property-value overrides to apply to cloned instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving clone of Item or an error\n     */\n    clone (id : string, overrides : any, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id + '/clone' )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: overrides, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error cloning item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.clone() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    search (arg ?: any, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n            let ps = {};\n            if(params && typeof(params.getQuery) === 'function') ps = params.getQuery();\n            else if(typeof(params) === 'object') ps = params;\n            else ps = {};\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl,\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.search() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     *\n     * @param arg - URL to metadata document or File to upload\n     * @param format - metadata format of specified document\n     * @return Promise resolving GeoPlatform Item\n     */\n    import (arg : any, format : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            if(arg===null || arg === undefined) {\n                throw new Error(\"Must provide a valid URL or File\");\n            }\n            let isFile = typeof(arg) !== 'string';\n            let ro : { [key:string]:any } = {\n                method:\"POST\",\n                url: this.apiBase + '/api/import',\n                processData: true,  //for jQuery\n                formData: true,     //for Node (RequestJS)\n                options: options\n            };\n            if(isFile) {\n                ro.file = arg;\n                ro.data = { format: format };\n            } else {\n                ro.formData = false;    //must be false for data to not be multi-part formdata\n                ro.data = { url: arg, format: format };\n            }\n            if(options && options.overwrite) {\n                ro.data.overwrite = (!!options.overwrite)+'';\n                delete options.overwrite;\n            }\n            let opts = this.buildRequest(ro);\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error importing item: ${e.message||e}`);\n            Object.assign(err, e);\n            if(e.status === 409 || (e.message && ~e.message.indexOf('Item already exists') ))\n                Object.assign(err, {status: 409});\n            if(e.item)\n                Object.assign(err, { item : e.item });\n            this.logError('ItemService.import() - ' + (err.message||e));\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param id - identifier of the item to export\n     * @param format - string mime type to export\n     * @return Promise resolving HTTP response object for enabling attachment downloading\n     */\n    export (id : string, format : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/export';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                params: {format:format},\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            //https://github.com/GeoPlatform/client-api/issues/1\n            if(e.statusCode && e.statusCode===406 || e.statusCode==='406') {\n                msg = `Unsupported export format specified '${format}'`;\n            }\n            let err = new Error(`Error exporting item: ${msg}`);\n            Object.assign(err, e);\n            this.logError('ItemService.export() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param object - GP object definition to generate a URI for\n     * @param options - optional request options\n     * @return Promise resolving string URI\n     */\n    getUri (object : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( object )\n        .then( obj => {\n            if(!obj || !obj.type)\n                throw new Error(\"Must provide an object with a type property\");\n            let url = this.apiBase + '/api/utils/uri';\n            options = options || {};\n            options.responseType = 'text';  //to ensure plaintext is expected\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: obj, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error getting URI for item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getUri() - ' + err.message);\n            throw err;\n        });\n\n    }\n\n\n    /**\n     * @param ids - list of identifiers to fetch objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list of matching items or an error\n     */\n    getMultiple (ids : string[], options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( ids )\n        .then( identifiers => {\n\n            let method = 'POST',\n                url = this.apiBase + '/api/fetch';\n\n            let opts = this.buildRequest({method:method, url:url, data:identifiers, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getMultiple() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param uris - list of URIs to retrieve objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list containing uri-item association where exists\n     */\n    exists(uris : string[], options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(uris)\n        .then( uris => {\n            let method = 'POST', url = this.apiBase + '/api/utils/exists';\n            let opts = this.buildRequest({method:method, url:url, data:uris, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error resolving items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.exists() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    like(item : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/likes';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error liking item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            throw err;\n        });\n    }\n\n    view(item : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/views';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error incrementing views for item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to fetch associations for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of associated items of the item in question\n     */\n    associations (id : string, params : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/associations';\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:url,\n                params: params || {},\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching associations for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.associations() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to fetch version info for\n     * @param params - optional set of query parameters to constrain list of versions\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of available versions of the item\n     */\n    versions (id : string, params ?: any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/versions';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params: params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching versions for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.versions() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /*\n    getThumbnail ( id : string, options ?: any ) : Promise<any> {\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/thumbnail';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            let err = new Error(`Error getting thumbnail for item: ${msg}`);\n            Object.assign(err, e);\n            this.logError(`ItemService.getThumbnail() - ${msg}`);\n            throw err;\n        });\n    }\n\n    createThumbnail ( id : string, options ?: any ) : Promise<any> {\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/thumbnail';\n            let opts = this.buildRequest({\n                method: \"POST\", url: url,\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            let err = new Error(`Error creating thumbnail for item: ${msg}`);\n            Object.assign(err, e);\n            this.logError(`ItemService.createThumbnail() - ${msg}`);\n            throw err;\n        });\n    }\n    */\n\n\n}\n\nexport default ItemService;\n","\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass DatasetService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/datasets';\n    }\n\n}\n\nexport default DatasetService;\n","\n\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass MapService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/maps';\n    }\n\n\n}\n\nexport default MapService;\n","\n\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass LayerService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/layers';\n    }\n\n    /**\n     * Fetch a style associated with a given GeoPlatform Layer asset. This may\n     * be the style for an Esri FeatureServer layer using the following:\n     *\n     *   .style( layerId, options);\n     *\n     * or a specific style definition for a non-Esri layer using the following call:\n     *\n     *   .style( layerId, styleId, options);\n     *\n     * @param id - GeoPlatform Layer identifier\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving style JSON object\n     */\n    style (id : string, ...args) : Promise<any> {\n        return this.createAndResolvePromise( id )\n        .then( (id) => {\n\n            let options = { params: null };\n            let url = this.baseUrl + '/' + id + '/style';\n\n            if(args[0] && typeof(args[0]) === 'string') { //style id parameter\n                url += 's/' + args[0];                    //\n                if(args[1]) options.params = args[1];            // ... plus options parameter\n\n            } else if(args[0] && typeof(args[0]) === 'object') { //options parameter\n                options.params = args[0];\n            }\n\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching style: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.style() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * Fetch the list of styles associated with a given GeoPlatform Layer asset\n     * @param id - GeoPlatform Layer identifier\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving style JSON object\n     */\n    styles ( id : string, options ?: any ) : Promise<any[]> {\n        return this.createAndResolvePromise( id )\n        .then( (id) => {\n            let url = this.baseUrl + '/' + id + '/styles';\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching style: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.style() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param req identifying extent, x, y\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving feature JSON object\n     */\n    describe( id : string, req : any, options ?: any ) : Promise<any> {\n\n        return this.createAndResolvePromise( req )\n        .then( (req) => {\n\n            if(!req) {\n                throw new Error(\"Must provide describe parameters to use\");\n            }\n\n            let keys = ['bbox', 'height', 'width', 'x', 'y'];\n            let missing = keys.find(key => !req[key]);\n            if(missing) {\n                throw new Error(`Must specify ${missing} in describe req`);\n            }\n\n            let params = {\n                srs         : 'EPSG:4326',\n                bbox        : req.bbox,\n                height      : req.height,\n                width       : req.width,\n                info_format : 'text/xml',\n                x           : req.x,\n                y           : req.y,\n                i           : req.x, //WMS 1.3.0\n                j           : req.y  //WMS 1.3.0\n            };\n\n            let url = this.baseUrl + '/' + id + '/describe';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing layer feature: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param params describing layer request to validate\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving empty if successful or a message if failed\n     */\n    validate(id : string, params : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( params )\n        .then( params => {\n\n            if(!params) {\n                throw new Error(\"Must provide parameters to use in layer validation\");\n            }\n\n            let url = this.baseUrl + '/' + id + '/validate';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error validating layer request: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default LayerService;\n","\n\nimport ItemTypes         from '../shared/types';\nimport ItemService       from './item';\nimport Query             from '../shared/query';\nimport { SearchResults } from '../shared/models';\nimport GPHttpClient      from '../http/client';\n\n/**\n * GeoPlatform Service service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate service objects.\n *\n * @see ItemService\n */\n\nclass ServiceService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/services';\n    }\n\n\n    /**\n     * Fetch metadata from the specified GeoPlatform Service's\n     * web-accessible implementation using either GetCapabilities\n     * or ESRI documentInfo.\n     * @param service - GeoPlatform Service object\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving service metadata\n     */\n    about( service : any, options ?: any ) : Promise<any> {\n\n        return this.createAndResolvePromise( service )\n        .then( svc => {\n            if(!svc)\n                throw new Error(\"Must provide service to get metadata about\");\n            let opts = this.buildRequest({\n                method:'POST', url:this.baseUrl + '/about', data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.about() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param id - identifier of the parent service to fetch layers from\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results containing Layers\n     */\n    layers( id : string, options ?: any ) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise(id)\n        .then( svcId => {\n            if(!svcId)\n                throw new Error(\"Must provide service identifier\");\n            let opts = this.buildRequest({\n                method:'GET',\n                url:this.baseUrl + '/' + svcId + '/layers',\n                options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching service layers: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.layers() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service types\n     */\n    types (options ?: any) : Promise<any> {\n\n        let query = new Query()\n        .types(ItemTypes.STANDARD)\n        .resourceTypes('ServiceType')\n        .pageSize(50)\n        .getQuery();\n\n        return this.createAndResolvePromise( query )\n        .then( (params) => {\n            let url = this.apiBase + '/api/items';\n            let opts = this.buildRequest({\n                method:'GET', url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response.results)\n        .catch(e => {\n            let err = new Error(`Error fetching service types: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.types() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param service - GP Service definition\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving imported service\n     */\n    import (service : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( service )\n        .then( svc => {\n            let url = this.baseUrl + '/import';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error importing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.import() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of GP service to harvest layers for\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service layers\n     */\n    harvest (id : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/harvest';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error harvesting layers from service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.harvest() - ' + err.message);\n            throw err;\n        });\n\n    }\n\n    /**\n     * @param id - identifier of GP service to live test\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    liveTest (id : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/test';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error testing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.liveTest() - '  + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of GP service to fetch statistics about\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    statistics (id : string, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/statistics';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting service statistics: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.statistics() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default ServiceService;\n","\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass GalleryService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/galleries';\n    }\n\n    addItem (galleryId : string, itemObj : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + galleryId + '/items';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data: itemObj, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - ' + err.message);\n            throw err;\n        });\n    }\n\n    removeItem( galleryId : string, itemId : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise( this.baseUrl + '/' + galleryId + '/items/' + itemId )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:'DELETE', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .then( () =>true)\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - '+ err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default GalleryService;\n","\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\nimport BaseService from './base';\n\n\nclass UtilsService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n        this.setTimeout(30000);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * @param property - optional capa property to specifically request\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving capabilities object\n     */\n    capabilities (property : string|null, query : any, options ?: any) : Promise<any> {\n\n        let url = this.baseUrl + '/api/capabilities';\n        if(property)\n            url += '/' + property;\n\n        return this.createAndResolvePromise( url )\n        .then( (url) => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:query||{}, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting capabilities: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.capabilities() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param file\n     * @param format\n     * @param options\n     * @return Promise\n     */\n    parseFile (file : any, format : string, options ?: any) : Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/parse';\n\n        return this.createAndResolvePromise( url )\n        .then( url => {\n\n            let opts = this.buildRequest({\n                method:\"POST\",  url:url,\n                data: { format: format },\n                file: file,\n                formData: true,   //NodeJS (RequestJS)\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then( response => response )\n        .catch(e => {\n            let err = new Error(`Error parsing file: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.parseFile() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * Geolocate the specified argument to a set of candidate locations.\n     * @param value - text string to geolocate (name or lat,lng)\n     * @param options - optional config to send with http request\n     * @return Promise resolving an array of geocoded results\n     */\n    locate(value : any, options ?: any) : Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/gazetteer';\n        return this.createAndResolvePromise(url)\n        .then( url => {\n            let opts = this.buildRequest({\n                method: 'GET',\n                url: url,\n                params: { location: value },\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response)\n        .catch(e => {\n            let err = new Error(`Error resolving location: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.locate() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * Upload a file to store within the GeoPlatform for association with\n     * one or more portfolio Assets.\n     *\n     * @param file File to store\n     * @param format string media type of the file being stored\n     * @param options optional\n     * @return Promise resolving metadata for stored content\n     */\n    store (file : any, format : string, options ?: any) : Promise<any> {\n\n        var url = this.baseUrl + '/api/store';\n\n        return this.createAndResolvePromise( url )\n        .then( url => {\n\n            let opts = this.buildRequest({\n                method:\"POST\",\n                url:url,\n                data: { format: format },\n                file: file,\n                formData: true,   //NodeJS (RequestJS)\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then( response => response )\n        .catch(e => {\n            let err = new Error(`Error uploading file for storage: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.store() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default UtilsService;\n","\n\nimport BaseService from './base';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Association service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate association objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass AssociationService extends BaseService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n\n    /**\n     * @param itemId - identifier of item to fetch associations for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of associated items of the item in question\n     */\n    search (itemId : string, params ?: any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( itemId )\n        .then( id => {\n\n            if(!id) throw new Error(\"Must specify a GeoPlatform resource for which to search associations\");\n\n            let url = this.baseUrl + '/' + id + '/associations';\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:url,\n                params: params || {},\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching associations for item ${itemId}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError(`AssociationService.search(${itemId}) - ${err.message}`);\n            throw err;\n        });\n    }\n\n    /**\n     * @param itemId - identifier of item\n     * @param associationId - identifier of association to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving association\n     */\n    get (itemId : string, associationId : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( itemId )\n        .then( itemId => {\n\n            if(!itemId || !associationId)\n                throw new Error(\"Must specify both the GeoPlatform resource id and its association's id\");\n\n            let url = this.baseUrl + '/' + itemId + '/associations/' + associationId;\n            let opts = this.buildRequest({ method:\"GET\", url:url, options: options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching association for item ${itemId}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError(`AssociationService.get(${itemId},${associationId}) - ${err.message}`);\n            throw err;\n        });\n    }\n\n    /**\n     * @param itemId - identifier of item\n     * @param associationId - identifier of association to remove\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving empty\n     */\n    remove (itemId : string, associationId : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( itemId )\n        .then( itemId => {\n\n            if(!itemId || !associationId)\n                throw new Error(\"Must specify both the GeoPlatform resource id and its association's id\");\n\n            let url = this.baseUrl + '/' + itemId + '/associations/' + associationId;\n            let opts = this.buildRequest({ method:\"DELETE\", url:url, options: options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error removing association for item ${itemId}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError(`AssociationService.remove(${itemId},${associationId}) - ${err.message}`);\n            throw err;\n        });\n    }\n\n}\n\nexport default AssociationService;\n","\nimport { Item, SearchResults } from '../shared/models';\nimport ItemTypes from '../shared/types';\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\nimport BaseService from \"./base\";\n\nclass AgolQuery {\n\n    private _query : { [key:string]:any };\n\n    constructor(options ?: { [key:string]:any }) {\n        this._query = {\n            page: 0,\n            size: 10\n        };\n\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n    getQuery() : { [key:string]:any } {\n        let result : { [key:string]:any } = {};\n        for(let prop in this._query) {\n            let value = this._query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    /**\n     * @param obj - set of parameter/values to apply to this query\n     */\n    applyParameters (obj : { [key:string]:any } ) : void {Â \n        for(let p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this._query[ p as string ] = obj[p] as any;\n            }\n        }\n    }\n\n\n    // ---------------------------------------\n\n    q(value : string) : AgolQuery { this.setQ(value); return this; }\n    setQ(value : string) { this._query.q = value; }\n    getQ() : string { return this._query.q; }\n\n    // ---------------------------------------\n\n    types(value : string|string[]) : AgolQuery {\n        this.setTypes(value); return this;\n    }\n    setTypes(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.types = val;\n    }\n    getTypes() : string[] { return this._query.types; }\n\n    // ---------------------------------------\n\n    groups(value : string|string[]) : AgolQuery {\n        this.setGroups(value); return this;\n    }\n    setGroups(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.groups = val;\n    }\n    getGroups() : string[] { return this._query.groups; }\n\n    // ---------------------------------------\n\n    orgs(value : string|string[]) : AgolQuery {\n        this.setOrgs(value); return this;\n    }\n    setOrgs(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.orgs = val;\n    }\n    getOrgs() : string[] { return this._query.orgs; }\n\n    // ---------------------------------------\n\n    extent(value : any) : AgolQuery { this.setExtent(value); return this; }\n    setExtent(value : any) { this._query.bbox = value; }\n    getExtent() : any { return this._query.bbox; }\n\n    // ---------------------------------------\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order : string) : AgolQuery {\n        this.setSort(sort, order); return this;\n    }\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order : string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this._query.sort = sort;\n    }\n    getSort() : string { return this._query.sort; }\n    getSortField() : string { return this._query.sort.split(',')[0]; }\n    getSortOrder() : boolean { return this._query.sort.split(',')[1] === 'asc'; }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : AgolQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this._query.page = page*1;\n    }\n\n    getPage() : number {\n        return this._query.page;\n    }\n\n    nextPage() {\n        this.setPage(this._query.page+1);\n    }\n\n    previousPage() {\n        this.setPage(this._query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size : number) : AgolQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this._query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this._query.size;\n    }\n\n}\n\n\n\n\n/**\n * AGOL Service\n */\nclass AgolService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n        this.setTimeout(30000);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/agol';\n    }\n\n    // -----------------------------------------------------------------------\n    // AGOL ORGS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL organization to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getOrg (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/orgs/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getOrg() - Error fetching org ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchOrgs (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/orgs',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchOrgs() - Error searching orgs: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL GROUPS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL group to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getGroup (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/groups/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getGroup() - Error fetching group ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchGroups (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/groups',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchGroups() - Error searching groups: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL ITEMS METHODS\n\n    /**\n     * @param id - identifier of AGOL item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getItem (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( (id : string) => {\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:this.baseUrl + '/items/' + id,\n                options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getItem() - Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchItems (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/items',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchItems() - Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n    /* --------------------------- */\n\n    getAgolId (obj : any) : string|null {\n        if(!obj) return null;\n\n        if(!obj.type) return null;\n\n        if(ItemTypes.ORGANIZATION === obj.type || 'Group' === obj.type) {\n            return obj.id;\n        }\n\n        if(!obj.identifiers || !obj.identifiers.length) return null;\n        let ids = obj.identifiers.filter( (id:string) => ~id.indexOf('agol:'));\n        if(!ids.length) return null;\n        return ids[0].replace('agol:','');\n    }\n\n}\n\nexport {\n    AgolService as default,\n    AgolService,\n    AgolQuery\n};\n","\n\nimport ItemTypes from '../shared/types';\n\n\nconst Categories : {[key:string]:string} = {\n    UNKNOWN:         'Unknown Category',\n    DATASET:         'Dataset',\n    SERVICE:         'Service',\n    LAYER:           'Layer',\n    MAP:             'Map',\n    GALLERY:         'Gallery',\n    COMMUNITY:       'Community',\n    CONTACT:         'Contact',\n    ORGANIZATION:    'Organization',\n    CONCEPT:         'Concept',\n    CONCEPT_SCHEME:  'Concept Scheme',\n    APPLICATION:     'Application',\n    TOPIC:           'Topic',\n    WEBSITE:         'WebSite',\n    IMAGE_PRODUCT:   'Image Product',\n    RIGHTS_STATEMENT:'RightsStatement',\n    KNOWLEDGE_GRAPH: 'Knowledge Graph',\n    USER:            'User',\n    COMMUNITY_POST:  'Community Post',   //post within a community portal\n    COMMUNITY_PAGE:  'Community Page',   //page within a community portal\n    APP_PAGE:        'Application Page', //page/view within a client application\n};\n\nconst Events : {[key:string]:string} = {\n    ACCESSED:   'Accessed',  //related item was accessed using API\n    DISPLAYED:  'Displayed', //related item was displayed in a native form (map)\n    VIEWED:     'Viewed',    //related item was viewed in general form (metadata)\n    CREATED:    'Created',\n    EDITED:     'Edited',\n    DELETED:    'Deleted',\n    CLONED:     'Cloned',\n    ADDED:      'Added',    //item was added to another (ie, layer on map)\n    REMOVED:    'Removed',  //item was removed from another (ie, item from gallery)\n    EXPORTED:   'Exported',\n    IMPORTED:   'Imported'\n};\n\n\nfunction getCategory(type : string) : string {\n    let result = Categories.UNKNOWN;\n    if(type) {\n        let cats : string[] = Object.keys(Categories).map((k:string)=>Categories[k]);\n        //if existing category was specified\n        if(~cats.indexOf(type))\n            return type;\n        //if an ItemType with prefix was specified (strip off prefix)\n        else if(~type.indexOf(':')) {\n            let cat = type.split(':')[1];\n            if(~cats.indexOf(cat))\n                return cat;\n        }\n    }\n    return result;\n}\n\n\n\n/**\n *\n */\nclass Event {\n\n    private category : string;\n    private type : string;\n    private item : any = null;\n    private related : any = null;\n\n    constructor(category : string, type : string, item ?: any, related ?: any) {\n        if(!category || ! type) {\n            throw new Error(\"TrackingService Event - Must specific an event \" +\n            \"category and event type when constructing events\");\n        }\n        this.category = category;\n        this.type = type;\n        this.setItem(item);\n        this.setRelated(related);\n    }\n    getCategory() : string { return this.category; }\n    getType() : string { return this.type; }\n    getItem() : any { return this.item; }\n    setItem(item : any) { this.item = item ? (item.id || item) : null; }\n    getRelated() : any { return this.related; }\n    setRelated(related : any) {\n        this.related = related ? (related.id || related) : null;\n    }\n}\n\n\n\n/**\n * @param eventType - type of event being created\n * @param item - GeoPlatform Item instance\n * @return list of event objects\n */\nfunction TrackingEventFactory(eventType : string, item : any) : Event[] {\n    let result : Event[] = [] as Event[];\n    if(eventType && item && item.type) {\n        if(ItemTypes.MAP === item.type) {\n            result.push( new Event(Categories.MAP, eventType, item) );\n            if(Events.DISPLAYED === eventType) {\n\n                item.layers.forEach( (layerState : any) => {\n                    if(layerState.layer) {\n                        let layerEvents = TrackingEventFactory(eventType, layerState.layer)\n                            .filter(e=>e!==null);\n                        if(layerEvents && layerEvents.length) {\n                            result = result.concat(layerEvents);\n                        }\n                    }\n                });\n\n                if(item.baseLayer) {\n                    let baseEvents = TrackingEventFactory(eventType, item.baseLayer)\n                        .filter(e=>e!==null);\n                    if(baseEvents && baseEvents.length)\n                        result = result.concat( baseEvents );\n                }\n            }\n\n        } else if(ItemTypes.LAYER === item.type) {\n            result.push( new Event(Categories.LAYER, eventType, item) );\n            if(Events.DISPLAYED === eventType && item.services && item.services.length) {\n                result.push( new Event(Categories.SERVICE, eventType, item.services[0]) );\n            }\n        } else {\n            let category = getCategory(item.type);\n            result.push( new Event(category, eventType, item) );\n        }\n    }\n    // else {\n    //     if(!event) console.log(\"Missing event\");\n    //     if(!item) console.log(\"Missing item\");\n    //     if(!item.type) console.log(\"Missing item type\");\n    // }\n    return result;\n}\n\n\n\n\n\n/**\n *\n */\nclass DefaultTrackingServiceProvider {\n    constructor() {}\n    logEvent(\n        category : string,\n        event : string,\n        item ?: any,\n        // @ts-ignore\n        related ?: any\n    ) {\n        console.log( \"Event (\" + category + \") - \" + event + \" : \" + item);\n    }\n    logPageView( view, data ) {\n        console.log(\"Page View \" + view + (data ? \" : \" + JSON.stringify(data) : '') );\n    }\n    logSearch(params : string, resultCount : string|number) {\n        console.log( \"Query : \" + JSON.stringify(params) + \" found \" + resultCount+ \" matches\");\n    }\n}\n\n\n\n\n\n\n/**\n * TrackingService\n *\n * Service for logging events related to usage of the GeoPlatform and its data\n *\n * Example:\n *\n *   import { TrackingService, EventCategories, EventTypes } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *   tracker.event( Event.of(EventCategories.MAP, EventTypes.VIEWED, map) );\n *\n * Multi-event example:\n *\n *   import {\n *      TrackingService, TrackingEventCategories, TrackingEventTypes, TrackingEventFactory\n *   } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *\n *   let events = [\n *       TrackingEvent.of( TrackingCategories.MAP, TrackingEventTypes.VIEWED, this.map )\n *       TrackingEvent.of( TrackingCategories.LAYER, TrackingEventTypes.VIEWED, this.map.baseLayer )\n *   ];\n *   tracker.event(events);\n *\n *   //OR use the event factory:\n *   tracker.event( TrackingEventFactory(EventTypes.VIEWED, this.map) );\n */\nclass TrackingService {\n\n    private provider : any = null;\n\n    constructor(options ?: any) {\n        if(options && typeof(options) === 'object')\n            Object.assign(this, options);\n\n        if(!this.provider)\n            this.setProvider(new DefaultTrackingServiceProvider());\n    }\n\n    /**\n     * @param provider -\n     */\n    setProvider(provider : any) {\n        if(provider)\n            this.provider = provider;\n    }\n\n    /**\n     * @param event - event to log\n     * @return TrackingService\n     */\n    event( event : Event ) : TrackingService {\n        this.logEvent( event );\n        return this;\n    }\n\n    /**\n     * @param event - event to log\n     */\n    logEvent( event : Event|Event[]) {\n        if(!this.provider || !this.provider.logEvent || !event) return;\n\n        if(Array.isArray(event)) {\n            let events : Event[] = event as Event[];\n            events.forEach( (evt : Event) => this.logEvent(evt) );\n\n        } else {\n            let evt : Event = event as Event;\n            try {\n                this.provider.logEvent(\n                    evt.getCategory(),\n                    evt.getType(),\n                    evt.getItem(),\n                    evt.getRelated()\n                );\n            } catch(e) {\n                console.log(\n                    \"TrackingService.logEvent() - Error logging event (\" +\n                    evt.getCategory() + \", \" + evt.getType() + \", \" +\n                    evt.getItem() + \") - \" + e.message\n                );\n            }\n        }\n    }\n\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @return TrackingService\n     * @deprecated use svc.event( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    pageView( view : string, data : any) {\n        this.logPageView(view, data);\n        return this;\n    }\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @deprecated use svc.logEvent( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    logPageView(\n        view : string,\n        // @ts-ignore\n        data ?: any\n    ) {\n        if(this.provider && this.provider.logPageView) {\n            this.provider.logPageView(view, data);\n        } else {\n            this.logEvent( new Event(Categories.APP_PAGE, Events.VIEWED, view) );\n        }\n    }\n\n    /**\n     * @param params\n     * @param resultCount\n     */\n    logSearch (params : any, resultCount : string|number) {\n        if(this.provider.logSearch)\n            this.provider.logSearch(params, resultCount);\n    }\n\n}\n\n\nexport {\n    Event as TrackingEvent,\n    TrackingService,\n    Categories as TrackingCategories,\n    Events as TrackingTypes,\n    TrackingEventFactory\n};\n","\nimport Config from '../shared/config';\nimport KGQuery from '../shared/kg-query';\nimport GPHttpClient from '../http/client';\n\nimport BaseService from './base';\n\n\n\nclass KGService extends BaseService {\n\n    // @ts-ignore\n    // private apiBase : string;\n    // @ts-ignore\n    // private baseUrl : string;\n    // private client : GPHttpClient;\n    // private timeout : number = 30000;\n    // private httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/recommender';\n    }\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving recommended concepts as search results\n     */\n    suggest (query : KGQuery, options ?: any) : Promise<any> {\n\n        let url = this.baseUrl + '/suggest';\n        return this._search(url, query, options)\n        .catch(e => {\n            this.logError('KGService.suggest() - ' + e.message);\n            let err = new Error(`Error suggesting concepts: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept types as search results\n     */\n    types (query : KGQuery, options ?: any) : Promise<any> {\n        let url = this.baseUrl + '/types';\n        return this._search(url, query, options)\n        .catch(e => {\n            this.logError('KGService.types() - ' + e.message);\n            let err = new Error(`Error searching types: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept sources as search results\n     */\n    sources (query : KGQuery, options ?: any) : Promise<any> {\n        let url = this.baseUrl + '/sources';\n        return this._search(url, query, options)\n        .catch(e => {\n            this.logError('KGService.sources() - ' + e.message);\n            let err = new Error(`Error searching sources: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n\n    /**\n     * internal method used by exposed methods\n     */\n    _search (url : string, query : KGQuery, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise( url )\n        .then( (url) => {\n            let q : { [key:string]:any } = query.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:q, options:options\n            });\n            return this.execute(opts);\n        });\n    }\n\n\n\n    // /**\n    //  * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n    //  * @param url - destination of xhr request\n    //  * @param params - object to be sent with request as query parameters\n    //  * @param data - object to be sent with request as body\n    //  * @param options - optional object defining request options\n    //  * @return request options for xhr\n    //  */\n    // buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n    //\n    //     if(this.httpMethods.indexOf(options.method)<0)\n    //         throw new Error(`Unsupported HTTP method ${options.method}`);\n    //\n    //     if(!options.url)\n    //         throw new Error(`Must specify a URL for HTTP requests`);\n    //\n    //     options.timeout = this.timeout || Config.timeout || 30000;\n    //\n    //     return this.createRequestOpts(options);\n    // }\n    //\n    // createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n    //     return this.client.createRequestOpts(options);\n    // }\n    //\n    // execute(opts : {[key:string]:any}) : Promise<any> {\n    //     return this.client.execute(opts)\n    //     .catch(e => {\n    //         if(e === null || typeof(e) === 'undefined') {\n    //             e = new Error(\"KGService.execute() - Request failed but didn't return an \" +\n    //             \"error. This is most likely because the request timed out\");\n    //         }\n    //         throw e;\n    //     });\n    // }\n\n}\n\nexport default KGService;\n","\nimport GPHttpClient from '../http/client';\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport LayerService from './layer';\nimport ServiceService from './service';\nimport GalleryService from './gallery';\nimport DatasetService from './dataset';\nimport MapService from './map';\n\n/**\n * @param arg - string type or object with type property\n * @param baseUrl - base endpoint of GeoPlatform API\n * @return ItemService\n */\nconst ServiceFactory = function(arg : any, baseUrl : string, httpClient : GPHttpClient) : any {\n    let type = (typeof(arg) === 'string') ?\n        arg : (arg && arg.type ? arg.type : null);\n    if(!type) throw new Error(\"Must provide a type or object with a type specified\");\n    if(!baseUrl) throw new Error(\"Must provide a base url\");\n    if(!httpClient) throw new Error(\"Must provide an http client to use to make requests\");\n    switch(type) {\n        case ItemTypes.LAYER:   return new LayerService(  baseUrl, httpClient);\n        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);\n        case ItemTypes.MAP:     return new MapService(    baseUrl, httpClient);\n        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);\n        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);\n        default:                return new ItemService(   baseUrl, httpClient);\n    }\n};\n\nexport default ServiceFactory;\n","\nfunction apply() {\n    if (typeof Object.assign != 'function') {\n      // Must be writable: true, enumerable: false, configurable: true\n      Object.defineProperty(Object, \"assign\", {\n        value: function assign(target : any, varArgs : any[]) { // .length of function is 2\n\n          if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          if(varArgs) { }\n          var to = Object(target);\n\n          for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource != null) { // Skip over if undefined or null\n              for (var nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n          return to;\n        },\n        writable: true,\n        configurable: true\n      });\n    }\n}\n\n\nexport default function polyfills() {\n    apply();\n};\n","\n/*\n    Version of the library exposed to consumers.\n    Long-term this value should be auto-set to be whatever is set in package.json\n */\nexport const ClientVersion = \"0.3.0\";\n\nimport Polyfills from \"./shared/polyfills\";\nPolyfills();\n\nexport * from './shared/index';\nexport * from './http/index';\nexport * from './services/index';\n","\nimport Query from './query';\n\nexport default function queryFactory() {\n    return new Query();\n}\n"]}