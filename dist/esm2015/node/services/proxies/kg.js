import { KGService, KGQuery } from "@geoplatform/client";
import ServiceProxy from "./base";
const ɵ0 = function (svc, req) {
    let query = new KGQuery(req.query);
    return svc.suggest(query);
}, ɵ1 = function (svc, req) {
    let query = new KGQuery(req.query);
    return svc.types(query);
}, ɵ2 = function (svc, req) {
    let query = new KGQuery(req.query);
    return svc.sources(query);
};
const Routes = [
    {
        key: 'suggest',
        method: 'get',
        path: 'recommender/suggest',
        auth: false,
        onExecute: ɵ0
    },
    {
        key: 'types',
        method: 'get',
        path: 'recommender/types',
        auth: false,
        onExecute: ɵ1
    },
    {
        key: 'sources',
        method: 'get',
        path: 'recommender/sources',
        auth: false,
        onExecute: ɵ2
    }
];
/**
 *
 */
function KGServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    let router = options.router;
    if (!options.router) {
        let express = require('express');
        if (!express) {
            throw new Error("KGServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("KGServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = KGService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default KGServiceProxy;
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2cuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2VvcGxhdGZvcm0vY2xpZW50L25vZGUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9wcm94aWVzL2tnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxZQUFZLE1BQU0sUUFBUSxDQUFDO1dBU2YsVUFBUyxHQUFlLEVBQUUsR0FBUztJQUMxQyxJQUFJLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsT0FPVSxVQUFTLEdBQWUsRUFBRSxHQUFTO0lBQzFDLElBQUksS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxPQU9VLFVBQVMsR0FBZSxFQUFFLEdBQVM7SUFDMUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBN0JULE1BQU0sTUFBTSxHQUFHO0lBQ1g7UUFDSSxHQUFHLEVBQUssU0FBUztRQUNqQixNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBSSxxQkFBcUI7UUFDN0IsSUFBSSxFQUFJLEtBQUs7UUFDYixTQUFTLElBR1I7S0FDSjtJQUNEO1FBQ0ksR0FBRyxFQUFLLE9BQU87UUFDZixNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBSSxtQkFBbUI7UUFDM0IsSUFBSSxFQUFJLEtBQUs7UUFDYixTQUFTLElBR1I7S0FDSjtJQUNEO1FBQ0ksR0FBRyxFQUFLLFNBQVM7UUFDakIsTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUkscUJBQXFCO1FBQzdCLElBQUksRUFBSSxLQUFLO1FBQ2IsU0FBUyxJQUdSO0tBQ0o7Q0FDSixDQUFDO0FBSUY7O0dBRUc7QUFDSCxTQUFTLGNBQWMsQ0FBRSxPQUFjO0lBRW5DLElBQUcsT0FBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFdBQVcsRUFBRTtRQUNoQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0tBQ2hCO0lBQUEsQ0FBQztJQUVGLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDaEIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLElBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQztnQkFDN0MscURBQXFELENBQUMsQ0FBQztTQUM5RDtRQUNELE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDN0I7SUFFRCxJQUFHLENBQUMsTUFBTTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCO1lBQzdDLDhDQUE4QyxDQUFDLENBQUM7SUFFcEQsT0FBTyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDakMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWpELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxlQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS0dTZXJ2aWNlLCBLR1F1ZXJ5IH0gZnJvbSBcIkBnZW9wbGF0Zm9ybS9jbGllbnRcIjtcbmltcG9ydCBTZXJ2aWNlUHJveHkgZnJvbSBcIi4vYmFzZVwiO1xuXG5cbmNvbnN0IFJvdXRlcyA9IFtcbiAgICB7XG4gICAgICAgIGtleSAgIDogJ3N1Z2dlc3QnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoICA6ICdyZWNvbW1lbmRlci9zdWdnZXN0JyxcbiAgICAgICAgYXV0aCAgOiBmYWxzZSxcbiAgICAgICAgb25FeGVjdXRlOiBmdW5jdGlvbihzdmMgOiBLR1NlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gbmV3IEtHUXVlcnkocmVxLnF1ZXJ5KTtcbiAgICAgICAgICAgIHJldHVybiBzdmMuc3VnZ2VzdChxdWVyeSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5ICAgOiAndHlwZXMnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoICA6ICdyZWNvbW1lbmRlci90eXBlcycsXG4gICAgICAgIGF1dGggIDogZmFsc2UsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogS0dTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IG5ldyBLR1F1ZXJ5KHJlcS5xdWVyeSk7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnR5cGVzKHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXkgICA6ICdzb3VyY2VzJyxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgcGF0aCAgOiAncmVjb21tZW5kZXIvc291cmNlcycsXG4gICAgICAgIGF1dGggIDogZmFsc2UsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogS0dTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IG5ldyBLR1F1ZXJ5KHJlcS5xdWVyeSk7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnNvdXJjZXMocXVlcnkpO1xuICAgICAgICB9XG4gICAgfVxuXTtcblxuXG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gS0dTZXJ2aWNlUHJveHkoIG9wdGlvbnMgPzogYW55ICkge1xuXG4gICAgaWYodHlwZW9mKG9wdGlvbnMpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfTtcblxuICAgIGxldCByb3V0ZXIgPSBvcHRpb25zLnJvdXRlcjtcbiAgICBpZighb3B0aW9ucy5yb3V0ZXIpIHtcbiAgICAgICAgbGV0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG4gICAgICAgIGlmKCFleHByZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJLR1NlcnZpY2VQcm94eSgpIC0gTXVzdCBwcm92aWRlXCIgK1xuICAgICAgICAgICAgICAgIFwiJ29wdGlvbnMucm91dGVyJyBvciBpbmNsdWRlIGV4cHJlc3MgYXMgYSBkZXBlbmRlbmN5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgfVxuXG4gICAgaWYoIXJvdXRlcikgdGhyb3cgbmV3IEVycm9yKFwiS0dTZXJ2aWNlUHJveHkoKSAtIFwiICtcbiAgICAgICAgXCJVbmFibGUgdG8gY3JlYXRlIHByb3h5IHJvdXRlLCBtaXNzaW5nIHJvdXRlclwiKTtcblxuICAgIG9wdGlvbnMuc2VydmljZUNsYXNzID0gS0dTZXJ2aWNlO1xuICAgIFNlcnZpY2VQcm94eS5iaW5kUm91dGVzKHJvdXRlciwgUm91dGVzLCBvcHRpb25zKTtcblxuICAgIHJldHVybiByb3V0ZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtHU2VydmljZVByb3h5O1xuIl19