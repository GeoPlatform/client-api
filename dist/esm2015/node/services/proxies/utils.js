import { UtilsService } from "@geoplatform/client";
import ServiceProxy from "./base";
const ɵ0 = function (svc, req) {
    return svc.locate(req.query.location);
}, ɵ1 = function (svc, req) {
    return svc.parseFile(req.files.file, req.body.format);
}, ɵ2 = function (svc, req) {
    return svc.capabilities(null, req.query);
}, ɵ3 = function (svc, req) {
    return svc.capabilities(req.params.id, req.query);
}, ɵ4 = function (svc, req) {
    return svc.store(req.files.file, req.body.format);
};
const Routes = [
    {
        key: 'locate',
        method: 'get',
        path: 'utils/locate',
        auth: false,
        onExecute: ɵ0
    },
    {
        key: 'parseFile',
        method: 'post',
        path: 'utils/parse',
        auth: false,
        onExecute: ɵ1
    },
    {
        key: 'capabilities',
        method: 'get',
        path: 'utils/capabilities',
        auth: false,
        onExecute: ɵ2
    },
    {
        key: 'capabilitiesProperty',
        method: 'get',
        path: 'utils/capabilities/:id',
        auth: false,
        onExecute: ɵ3
    },
    {
        key: 'store',
        method: 'post',
        path: 'store',
        auth: true,
        onExecute: ɵ4
    }
];
/**
 *
 */
function UtilsServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    let router = options.router;
    if (!options.router) {
        let express = require('express');
        if (!express) {
            throw new Error("UtilsServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("UtilsServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = UtilsService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default UtilsServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2VvcGxhdGZvcm0vY2xpZW50L25vZGUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9wcm94aWVzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLFlBQVksTUFBTSxRQUFRLENBQUM7V0FTZixVQUFTLEdBQWtCLEVBQUUsR0FBUztJQUM3QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQyxDQUFDLE9BT1UsVUFBUyxHQUFrQixFQUFFLEdBQVM7SUFDN0MsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxPQU9VLFVBQVMsR0FBa0IsRUFBRSxHQUFTO0lBQzdDLE9BQU8sR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLENBQUMsT0FPVSxVQUFTLEdBQWtCLEVBQUUsR0FBUztJQUM3QyxPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RELENBQUMsT0FPVSxVQUFTLEdBQWtCLEVBQUUsR0FBUztJQUM3QyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBNUNULE1BQU0sTUFBTSxHQUFHO0lBQ1g7UUFDSSxHQUFHLEVBQUssUUFBUTtRQUNoQixNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBSSxjQUFjO1FBQ3RCLElBQUksRUFBSSxLQUFLO1FBQ2IsU0FBUyxJQUVSO0tBQ0o7SUFDRDtRQUNJLEdBQUcsRUFBSyxXQUFXO1FBQ25CLE1BQU0sRUFBRSxNQUFNO1FBQ2QsSUFBSSxFQUFJLGFBQWE7UUFDckIsSUFBSSxFQUFJLEtBQUs7UUFDYixTQUFTLElBRVI7S0FDSjtJQUNEO1FBQ0ksR0FBRyxFQUFLLGNBQWM7UUFDdEIsTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUksb0JBQW9CO1FBQzVCLElBQUksRUFBSSxLQUFLO1FBQ2IsU0FBUyxJQUVSO0tBQ0o7SUFDRDtRQUNJLEdBQUcsRUFBSyxzQkFBc0I7UUFDOUIsTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUksd0JBQXdCO1FBQ2hDLElBQUksRUFBSSxLQUFLO1FBQ2IsU0FBUyxJQUVSO0tBQ0o7SUFDRDtRQUNJLEdBQUcsRUFBSyxPQUFPO1FBQ2YsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUksT0FBTztRQUNmLElBQUksRUFBSSxJQUFJO1FBQ1osU0FBUyxJQUVSO0tBQ0o7Q0FDSixDQUFDO0FBSUY7O0dBRUc7QUFDSCxTQUFTLGlCQUFpQixDQUFFLE9BQWM7SUFFdEMsSUFBRyxPQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssV0FBVyxFQUFFO1FBQ2hDLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDaEI7SUFBQSxDQUFDO0lBRUYsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNoQixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsSUFBRyxDQUFDLE9BQU8sRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DO2dCQUNoRCxxREFBcUQsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUM3QjtJQUVELElBQUcsQ0FBQyxNQUFNO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0I7WUFDaEQsOENBQThDLENBQUMsQ0FBQztJQUVwRCxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNwQyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFakQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELGVBQWUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VXRpbHNTZXJ2aWNlfSBmcm9tIFwiQGdlb3BsYXRmb3JtL2NsaWVudFwiO1xuaW1wb3J0IFNlcnZpY2VQcm94eSBmcm9tIFwiLi9iYXNlXCI7XG5cblxuY29uc3QgUm91dGVzID0gW1xuICAgIHtcbiAgICAgICAga2V5ICAgOiAnbG9jYXRlJyxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgcGF0aCAgOiAndXRpbHMvbG9jYXRlJyxcbiAgICAgICAgYXV0aCAgOiBmYWxzZSxcbiAgICAgICAgb25FeGVjdXRlOiBmdW5jdGlvbihzdmMgOiBVdGlsc1NlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5sb2NhdGUocmVxLnF1ZXJ5LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXkgICA6ICdwYXJzZUZpbGUnLFxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgcGF0aCAgOiAndXRpbHMvcGFyc2UnLFxuICAgICAgICBhdXRoICA6IGZhbHNlLFxuICAgICAgICBvbkV4ZWN1dGU6IGZ1bmN0aW9uKHN2YyA6IFV0aWxzU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnBhcnNlRmlsZShyZXEuZmlsZXMuZmlsZSwgcmVxLmJvZHkuZm9ybWF0KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXkgICA6ICdjYXBhYmlsaXRpZXMnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoICA6ICd1dGlscy9jYXBhYmlsaXRpZXMnLFxuICAgICAgICBhdXRoICA6IGZhbHNlLFxuICAgICAgICBvbkV4ZWN1dGU6IGZ1bmN0aW9uKHN2YyA6IFV0aWxzU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLmNhcGFiaWxpdGllcyhudWxsLCByZXEucXVlcnkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleSAgIDogJ2NhcGFiaWxpdGllc1Byb3BlcnR5JyxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgcGF0aCAgOiAndXRpbHMvY2FwYWJpbGl0aWVzLzppZCcsXG4gICAgICAgIGF1dGggIDogZmFsc2UsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogVXRpbHNTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuY2FwYWJpbGl0aWVzKHJlcS5wYXJhbXMuaWQsIHJlcS5xdWVyeSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5ICAgOiAnc3RvcmUnLFxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgcGF0aCAgOiAnc3RvcmUnLFxuICAgICAgICBhdXRoICA6IHRydWUsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogVXRpbHNTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuc3RvcmUocmVxLmZpbGVzLmZpbGUsIHJlcS5ib2R5LmZvcm1hdCk7XG4gICAgICAgIH1cbiAgICB9XG5dO1xuXG5cblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBVdGlsc1NlcnZpY2VQcm94eSggb3B0aW9ucyA/OiBhbnkgKSB7XG5cbiAgICBpZih0eXBlb2Yob3B0aW9ucykgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9O1xuXG4gICAgbGV0IHJvdXRlciA9IG9wdGlvbnMucm91dGVyO1xuICAgIGlmKCFvcHRpb25zLnJvdXRlcikge1xuICAgICAgICBsZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbiAgICAgICAgaWYoIWV4cHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlV0aWxzU2VydmljZVByb3h5KCkgLSBNdXN0IHByb3ZpZGVcIiArXG4gICAgICAgICAgICAgICAgXCInb3B0aW9ucy5yb3V0ZXInIG9yIGluY2x1ZGUgZXhwcmVzcyBhcyBhIGRlcGVuZGVuY3lcIik7XG4gICAgICAgIH1cbiAgICAgICAgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbiAgICB9XG5cbiAgICBpZighcm91dGVyKSB0aHJvdyBuZXcgRXJyb3IoXCJVdGlsc1NlcnZpY2VQcm94eSgpIC0gXCIgK1xuICAgICAgICBcIlVuYWJsZSB0byBjcmVhdGUgcHJveHkgcm91dGUsIG1pc3Npbmcgcm91dGVyXCIpO1xuXG4gICAgb3B0aW9ucy5zZXJ2aWNlQ2xhc3MgPSBVdGlsc1NlcnZpY2U7XG4gICAgU2VydmljZVByb3h5LmJpbmRSb3V0ZXMocm91dGVyLCBSb3V0ZXMsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHJvdXRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVXRpbHNTZXJ2aWNlUHJveHk7XG4iXX0=