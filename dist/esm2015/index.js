/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const VERSION = "0.3.0";
import Polyfills from "./shared/polyfills";
Polyfills();
import GPError from './shared/error';
import { ItemTypes, ItemTypeLabels } from './shared/types';
import URIFactory from './shared/uri-factory';
import KGQuery from './shared/kg-query';
import KGClassifiers from './shared/classifiers';
import QueryParameters from './shared/parameters';
import { Query, Fields as QueryFields, Facets as QueryFacets } from './shared/query';
import QueryFactory from './shared/query-factory';
import Config from './shared/config';
import GPHttpClient from './http/client';
import XHRHttpClient from './http/xhr';
import ItemService from './services/item';
import DatasetService from './services/dataset';
import MapService from './services/map';
import LayerService from './services/layer';
import ServiceService from './services/service';
import GalleryService from './services/gallery';
import UtilsService from './services/utils';
import { AgolService, AgolQuery } from './services/agol';
import { TrackingEvent, TrackingService, TrackingCategories, TrackingTypes, TrackingEventFactory } from './services/tracking';
import KGService from './services/kg';
import ServiceFactory from './services/factory';
export { VERSION as ClientVersion, 
//shared classes
GPError, ItemTypes, ItemTypeLabels, QueryParameters, QueryFacets, Query, QueryFactory, QueryFields, KGQuery, KGClassifiers, AgolQuery, URIFactory, Config, GPHttpClient, XHRHttpClient, ItemService, DatasetService, MapService, LayerService, ServiceService, GalleryService, UtilsService, KGService, ServiceFactory, AgolService, TrackingEvent, TrackingService, TrackingCategories, TrackingTypes, TrackingEventFactory };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2VvcGxhdGZvcm0vY2xpZW50LyIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFHeEIsT0FBTyxTQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFDM0MsU0FBUyxFQUFFLENBQUM7QUFFWixPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNELE9BQU8sVUFBVSxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sT0FBTyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sYUFBYSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sZUFBZSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFDSCxLQUFLLEVBQ0wsTUFBTSxJQUFJLFdBQVcsRUFDckIsTUFBTSxJQUFJLFdBQVcsRUFDeEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLFlBQVksTUFBUyx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQVFyQyxPQUFPLFlBQVksTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxhQUFhLE1BQU0sWUFBWSxDQUFDO0FBR3ZDLE9BQU8sV0FBVyxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sY0FBYyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sVUFBVSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sWUFBWSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sY0FBYyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sY0FBYyxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sWUFBWSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekQsT0FBTyxFQUNILGFBQWEsRUFDYixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGFBQWEsRUFDYixvQkFBb0IsRUFDdkIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixPQUFPLFNBQVMsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxjQUFjLE1BQU8sb0JBQW9CLENBQUM7QUFJakQsT0FBTyxFQUVILE9BQU8sSUFBSSxhQUFhO0FBRXhCLGdCQUFnQjtBQUNoQixPQUFPLEVBQ1AsU0FBUyxFQUNULGNBQWMsRUFDZCxlQUFlLEVBQ2YsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBQ1osV0FBVyxFQUNYLE9BQU8sRUFDUCxhQUFhLEVBQ2IsU0FBUyxFQUNULFVBQVUsRUFPVixNQUFNLEVBRU4sWUFBWSxFQUNaLGFBQWEsRUFHYixXQUFXLEVBQ1gsY0FBYyxFQUNkLFVBQVUsRUFDVixZQUFZLEVBQ1osY0FBYyxFQUNkLGNBQWMsRUFDZCxZQUFZLEVBQ1osU0FBUyxFQUNULGNBQWMsRUFDZCxXQUFXLEVBR1gsYUFBYSxFQUNiLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLG9CQUFvQixFQUV2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxuICAgIFZlcnNpb24gb2YgdGhlIGxpYnJhcnkgZXhwb3NlZCB0byBjb25zdW1lcnMuXG4gICAgTG9uZy10ZXJtIHRoaXMgdmFsdWUgc2hvdWxkIGJlIGF1dG8tc2V0IHRvIGJlIHdoYXRldmVyIGlzIHNldCBpbiBwYWNrYWdlLmpzb25cbiAqL1xuY29uc3QgVkVSU0lPTiA9IFwiMC4zLjBcIjtcblxuXG5pbXBvcnQgUG9seWZpbGxzIGZyb20gXCIuL3NoYXJlZC9wb2x5ZmlsbHNcIjtcblBvbHlmaWxscygpO1xuXG5pbXBvcnQgR1BFcnJvciBmcm9tICcuL3NoYXJlZC9lcnJvcic7XG5pbXBvcnQgeyBJdGVtVHlwZXMsIEl0ZW1UeXBlTGFiZWxzIH0gZnJvbSAnLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IFVSSUZhY3RvcnkgZnJvbSAnLi9zaGFyZWQvdXJpLWZhY3RvcnknO1xuaW1wb3J0IEtHUXVlcnkgZnJvbSAnLi9zaGFyZWQva2ctcXVlcnknO1xuaW1wb3J0IEtHQ2xhc3NpZmllcnMgZnJvbSAnLi9zaGFyZWQvY2xhc3NpZmllcnMnO1xuaW1wb3J0IFF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuL3NoYXJlZC9wYXJhbWV0ZXJzJztcbmltcG9ydCB7XG4gICAgUXVlcnksXG4gICAgRmllbGRzIGFzIFF1ZXJ5RmllbGRzLFxuICAgIEZhY2V0cyBhcyBRdWVyeUZhY2V0c1xufSBmcm9tICcuL3NoYXJlZC9xdWVyeSc7XG5pbXBvcnQgUXVlcnlGYWN0b3J5ICAgIGZyb20gJy4vc2hhcmVkL3F1ZXJ5LWZhY3RvcnknO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuL3NoYXJlZC9jb25maWcnO1xuXG5pbXBvcnQge1xuICAgIEl0ZW0sIEFzc2V0LCBEYXRhc2V0LCBTZXJ2aWNlLCBMYXllciwgTWFwLCBHYWxsZXJ5LFxuICAgIEFwcGxpY2F0aW9uLCBUb3BpYywgV2ViU2l0ZSxcbiAgICBPcmdhbml6YXRpb24sIENvbnRhY3QsIENvbmNlcHRTY2hlbWUsIFNlYXJjaFJlc3VsdHMsIFNlcnZpY2VUeXBlU3RhbmRhcmRcbn0gZnJvbSBcIi4vc2hhcmVkL21vZGVsc1wiO1xuXG5pbXBvcnQgR1BIdHRwQ2xpZW50IGZyb20gJy4vaHR0cC9jbGllbnQnO1xuLy8gaW1wb3J0IEpRdWVyeUh0dHBDbGllbnQgZnJvbSAnLi9odHRwL2pxJztcbmltcG9ydCBYSFJIdHRwQ2xpZW50IGZyb20gJy4vaHR0cC94aHInO1xuXG5cbmltcG9ydCBJdGVtU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2l0ZW0nO1xuaW1wb3J0IERhdGFzZXRTZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvZGF0YXNldCc7XG5pbXBvcnQgTWFwU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL21hcCc7XG5pbXBvcnQgTGF5ZXJTZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvbGF5ZXInO1xuaW1wb3J0IFNlcnZpY2VTZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvc2VydmljZSc7XG5pbXBvcnQgR2FsbGVyeVNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9nYWxsZXJ5JztcbmltcG9ydCBVdGlsc1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy91dGlscyc7XG5pbXBvcnQgeyBBZ29sU2VydmljZSwgQWdvbFF1ZXJ5IH0gZnJvbSAnLi9zZXJ2aWNlcy9hZ29sJztcblxuaW1wb3J0IHtcbiAgICBUcmFja2luZ0V2ZW50LFxuICAgIFRyYWNraW5nU2VydmljZSxcbiAgICBUcmFja2luZ0NhdGVnb3JpZXMsXG4gICAgVHJhY2tpbmdUeXBlcyxcbiAgICBUcmFja2luZ0V2ZW50RmFjdG9yeVxufSBmcm9tICcuL3NlcnZpY2VzL3RyYWNraW5nJztcblxuaW1wb3J0IEtHU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2tnJztcbmltcG9ydCBTZXJ2aWNlRmFjdG9yeSAgZnJvbSAnLi9zZXJ2aWNlcy9mYWN0b3J5JztcblxuXG5cbmV4cG9ydCB7XG5cbiAgICBWRVJTSU9OIGFzIENsaWVudFZlcnNpb24sXG5cbiAgICAvL3NoYXJlZCBjbGFzc2VzXG4gICAgR1BFcnJvcixcbiAgICBJdGVtVHlwZXMsXG4gICAgSXRlbVR5cGVMYWJlbHMsXG4gICAgUXVlcnlQYXJhbWV0ZXJzLFxuICAgIFF1ZXJ5RmFjZXRzLFxuICAgIFF1ZXJ5LFxuICAgIFF1ZXJ5RmFjdG9yeSxcbiAgICBRdWVyeUZpZWxkcyxcbiAgICBLR1F1ZXJ5LFxuICAgIEtHQ2xhc3NpZmllcnMsXG4gICAgQWdvbFF1ZXJ5LFxuICAgIFVSSUZhY3RvcnksXG5cbiAgICAvL21vZGVsIGludGVyZmFjZXNcbiAgICBJdGVtLCBBc3NldCwgRGF0YXNldCwgU2VydmljZSwgTGF5ZXIsIE1hcCwgR2FsbGVyeSxcbiAgICBBcHBsaWNhdGlvbiwgVG9waWMsIFdlYlNpdGUsXG4gICAgT3JnYW5pemF0aW9uLCBDb250YWN0LCBDb25jZXB0U2NoZW1lLCBTZWFyY2hSZXN1bHRzLCBTZXJ2aWNlVHlwZVN0YW5kYXJkLFxuXG4gICAgQ29uZmlnLFxuXG4gICAgR1BIdHRwQ2xpZW50LFxuICAgIFhIUkh0dHBDbGllbnQsXG5cblxuICAgIEl0ZW1TZXJ2aWNlLFxuICAgIERhdGFzZXRTZXJ2aWNlLFxuICAgIE1hcFNlcnZpY2UsXG4gICAgTGF5ZXJTZXJ2aWNlLFxuICAgIFNlcnZpY2VTZXJ2aWNlLFxuICAgIEdhbGxlcnlTZXJ2aWNlLFxuICAgIFV0aWxzU2VydmljZSxcbiAgICBLR1NlcnZpY2UsXG4gICAgU2VydmljZUZhY3RvcnksXG4gICAgQWdvbFNlcnZpY2UsXG5cblxuICAgIFRyYWNraW5nRXZlbnQsXG4gICAgVHJhY2tpbmdTZXJ2aWNlLFxuICAgIFRyYWNraW5nQ2F0ZWdvcmllcyxcbiAgICBUcmFja2luZ1R5cGVzLFxuICAgIFRyYWNraW5nRXZlbnRGYWN0b3J5XG5cbn07XG4iXX0=