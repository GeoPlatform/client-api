{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@geoplatform/client/shared/error.ts","ng://@geoplatform/client/shared/types.ts","ng://@geoplatform/client/shared/uri-factory.ts","ng://@geoplatform/client/shared/parameters.ts","ng://@geoplatform/client/shared/kg-query.ts","ng://@geoplatform/client/shared/classifiers.ts","ng://@geoplatform/client/shared/query.ts","ng://@geoplatform/client/shared/config.ts","ng://@geoplatform/client/http/client.ts","ng://@geoplatform/client/http/xhr.ts","ng://@geoplatform/client/services/base.ts","ng://@geoplatform/client/services/item.ts","ng://@geoplatform/client/services/dataset.ts","ng://@geoplatform/client/services/map.ts","ng://@geoplatform/client/services/layer.ts","ng://@geoplatform/client/services/service.ts","ng://@geoplatform/client/services/gallery.ts","ng://@geoplatform/client/services/utils.ts","ng://@geoplatform/client/services/agol.ts","ng://@geoplatform/client/services/tracking.ts","ng://@geoplatform/client/services/kg.ts","ng://@geoplatform/client/shared/polyfills.ts","ng://@geoplatform/client/public_api.ts","ng://@geoplatform/client/shared/query-factory.ts","ng://@geoplatform/client/services/factory.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","GPError","_super","message","_this","call","error","tslib_1.__extends","setError","value","setStatus","status","statusCode","Error","ItemTypes","DATASET","SERVICE","LAYER","MAP","GALLERY","COMMUNITY","APPLICATION","TOPIC","WEBSITE","ORGANIZATION","CONTACT","PERSON","CONCEPT","CONCEPT_SCHEME","STANDARD","RIGHTS_STATEMENT","ItemTypeLabels","URI_BASE","ESRI_TYPES","formatReference","ref","toLowerCase","replace","result","prop","fixServiceHref","service","stripLayerFromServiceHref","type","serviceType","conformsTo","indexOf","uri","href","accessURL","matches","match","length","url","lastChar","trim","substring","URIFactory","factories","register","factory","object","md5Fn","dataset","md5","pubName","publisher","publishers","map","pub","label","join","title","layer","svcUrl","services","servicedBy","lyrUrl","args","layerName","author","createdBy","_createdBy","identifiers","identifier","gallery","community","org","name","person","vcard","email","hasEmail","tel","orgName","positionTitle","scheme","inScheme","schemeRef","prefLabel","item","landingPage","Parameters","ALTERNATE_TITLE","BEGINS","CLASSIFIERS","CREATED","CREATED_BEFORE","CREATED_AFTER","CREATED_BY","CREATOR","CONTRIBUTED_BY","ENDS","EXTENT","IDENTIFIERS","KEYWORDS","LAST_MODIFIED_BY","MODIFIED","MODIFIED_BEFORE","MODIFIED_AFTER","PUBLISHERS_ID","PUBLISHERS_LABEL","PUBLISHERS_URI","CONTACTS_ID","CONTACTS_LABEL","CONTACTS_URI","QUERY","SCHEMES_ID","SCHEMES_LABEL","SCHEMES_URI","SIMILAR_TO","STATUS","SERVICE_TYPES","THEMES_ID","THEMES_LABEL","THEMES_URI","TOPICS_ID","TOPICS_LABEL","TOPICS_URI","TYPES","URI","USED_BY_ID","USED_BY_LABEL","USED_BY_URI","VISIBILITY","RESOURCE_TYPE","LANDING_PAGE","PURPOSE","RELIABILITY","RELIABILITY_MIN","RELIABILITY_MAX","ONLINE","COMPLIANT","SPEED","SPEED_MIN","SPEED_MAX","LIKES","LIKES_MIN","LIKES_MAX","VIEWS","VIEWS_MIN","VIEWS_MAX","HREF","LAYER_TYPE","LAYER_NAME","PARENT_LAYER","SUB_LAYER","MAP_LAYER","GALLERY_ITEM","FACETS","FIELDS","SORT","PAGE","PAGE_SIZE","FOR_TYPES","SORT_OPTIONS_DEFAULT","KGQuery","defaultQuery","page","size","sort","query","getQuery","parameter","setParameter","undefined","getParameter","key","applyParameters","obj","q","text","setQ","QueryParameters","getQ","classifiers","types","setClassifiers","getClassifiers","objTypes","setTypes","getTypes","setPage","isNaN","getPage","nextPage","previousPage","pageSize","setPageSize","getPageSize","order","setSort","getSort","getSortField","split","getSortOrder","getSortOptions","slice","clear","Classifiers","FUNCTION","TOPIC_PRIMARY","TOPIC_SECONDARY","SUBJECT_PRIMARY","SUBJECT_SECONDARY","AUDIENCE","PLACE","CATEGORY","Fields","ACCESS_RIGHTS","ALTERNATE_TITLES","ANNOTATIONS","CONTACTS","DATASETS","DESCRIPTION","DISTRIBUTIONS","GALLERY_ITEMS","LABEL","LAYERS","LEGEND","PUBLISHERS","RESOURCE_TYPES","SERVICE_TYPE","SERVICES","SPATIAL","STATISTICS","SUB_LAYERS","TEMPORAL","THEMES","THUMBNAIL","TOPICS","USED_BY","FIELDS_DEFAULT","Facets","CONCEPT_SCHEMES","FACETS_DEFAULT","FacetToParam","BBOX_REGEX","toArray","Query","options","toString","assign","JSON","parse","stringify","clone","json","clearParameter","setFacetParameter","facet","param","console","log","keywords","setKeywords","getKeywords","setUri","getUri","user","setCreatedBy","getCreatedBy","lastModifiedBy","setLastModifiedBy","getLastModifiedBy","themes","setThemes","getThemes","topics","setTopics","getTopics","setPublishers","getPublishers","contacts","setContacts","getContacts","usedBy","ids","setUsedBy","getUsedBy","schemes","setSchemes","getSchemes","serviceTypes","setServiceTypes","getServiceTypes","visibility","vis","setVisibility","getVisibility","getStatus","extent","bbox","setExtent","toBboxString","test","getExtent","classifier","setClassifier","arr","getClassifier","classes","keys","k","isArray","forEach","modified","date","beforeOrAfter","setModified","Date","dir","oppProp","arg","getTime","getModified","created","setCreated","getCreated","begins","setBeginDate","getBeginDate","ends","setEndDate","getEndDate","between","begin","end","setBetween","resourceTypes","setResourceTypes","getResourceTypes","facets","names","setFacets","getFacets","addFacet","push","removeFacet","idx","splice","fields","setFields","getFields","addField","field","removeField","Config","ualUrl","configure","GPHttpClient","setTimeout","setAuthToken","timeout","token","getToken","createRequestOpts","execute","opts","Promise","reject","XHRHttpClient","method","Authorization","o","axios","then","response","data","catch","err","BaseService","httpClient","setUrl","client","baseUrl","apiBase","milliseconds","_timeout","getClient","createPromise","createAndResolvePromise","resolve","createAndRejectPromise","setLogger","logger","logError","e","logDebug","msg","debug","buildRequest","httpMethods","request","ItemService","get","id","version","save","itemObj","remove","patch","overrides","search","params","ps","import","format","isFile","ro","processData","formData","overwrite","export","responseType","getMultiple","exists","uris","like","view","associations","versions","DatasetService","MapService","LayerService","style","describe","req","missing","find","srs","height","width","info_format","x","y","i","j","validate","ServiceService","about","svc","results","harvest","liveTest","statistics","GalleryService","addItem","galleryId","removeItem","itemId","UtilsService","capabilities","property","parseFile","file","locate","location","AgolQuery","_query","val","groups","setGroups","getGroups","orgs","setOrgs","getOrgs","AgolService","getOrg","searchOrgs","getGroup","searchGroups","getItem","searchItems","getAgolId","filter","Categories","UNKNOWN","IMAGE_PRODUCT","KNOWLEDGE_GRAPH","USER","COMMUNITY_POST","COMMUNITY_PAGE","APP_PAGE","Events","ACCESSED","DISPLAYED","VIEWED","EDITED","DELETED","CLONED","ADDED","REMOVED","EXPORTED","IMPORTED","Event","category","related","setItem","setRelated","getCategory","getType","getRelated","DefaultTrackingServiceProvider","logEvent","event","logPageView","logSearch","resultCount","TrackingService","provider","setProvider","evt","pageView","KGService","suggest","_search","sources","polyfills","apply","defineProperty","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","writable","configurable","queryFactory","factoryFn","TrackingEventFactory","eventType","layers","layerState","layerEvents","concat","baseLayer","baseEvents","cats","cat"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nclass GPError extends Error {\n    public error : string|null;\n    public status: number = 500;\n    public statusCode : number = 500;\n    constructor(message : string) {\n        super(message);\n        this.error = null;\n    }\n    public setError(value:string) { this.error = value; }\n    public setStatus(value:number) { this.status = this.statusCode = value; }\n}\n\nexport default GPError;\n","\n\nconst ItemTypes = {\n    DATASET         : \"dcat:Dataset\",\n    SERVICE         : \"regp:Service\",\n    LAYER           : \"Layer\",\n    MAP             : \"Map\",\n    GALLERY         : \"Gallery\",\n    COMMUNITY       : 'Community',\n    APPLICATION     : 'Application',\n    TOPIC           : 'Topic',\n    WEBSITE         : 'WebSite',\n    ORGANIZATION    : \"org:Organization\",\n    CONTACT         : \"vcard:VCard\",\n    PERSON          : \"foaf:Person\",\n    CONCEPT         : \"skos:Concept\",\n    CONCEPT_SCHEME  : \"skos:ConceptScheme\",\n    STANDARD        : 'dct:Standard',\n    RIGHTS_STATEMENT: 'dct:RightsStatement'\n};\n\nconst ItemTypeLabels = {};\nItemTypeLabels[ItemTypes.DATASET]          = \"Dataset\";\nItemTypeLabels[ItemTypes.SERVICE]          = \"Service\";\nItemTypeLabels[ItemTypes.LAYER]            = \"Layer\";\nItemTypeLabels[ItemTypes.MAP]              = \"Map\";\nItemTypeLabels[ItemTypes.GALLERY]          = \"Gallery\";\nItemTypeLabels[ItemTypes.COMMUNITY]        = 'Community';\nItemTypeLabels[ItemTypes.APPLICATION]      = 'Application';\nItemTypeLabels[ItemTypes.TOPIC]            = 'Topic';\nItemTypeLabels[ItemTypes.WEBSITE]          = 'WebSite';\nItemTypeLabels[ItemTypes.ORGANIZATION]     = \"Organization\";\nItemTypeLabels[ItemTypes.CONTACT]          = \"Contact\";\nItemTypeLabels[ItemTypes.PERSON]           = \"Person\";\nItemTypeLabels[ItemTypes.CONCEPT]          = \"Concept\";\nItemTypeLabels[ItemTypes.CONCEPT_SCHEME]   = \"Concept Scheme\";\nItemTypeLabels[ItemTypes.STANDARD]         = 'Standard';\nItemTypeLabels[ItemTypes.RIGHTS_STATEMENT] = 'Rights Statement';\n\n\nexport {\n    ItemTypes as default,\n    ItemTypes,\n    ItemTypeLabels\n};\n","\nimport ItemTypes from './types';\n\n\n\nconst URI_BASE = 'http://www.geoplatform.gov';\n\nconst ESRI_TYPES = [\n    \"http://www.geoplatform.gov/spec/esri-feature-rest\",\n    \"http://www.geoplatform.gov/spec/esri-image-rest\",\n    \"http://www.geoplatform.gov/spec/esri-map-rest\",\n    \"http://www.geoplatform.gov/spec/esri-tile-rest\"\n];\n\n\n\n\nfunction formatReference( ref : any ) : any {\n    if(ref === null) return '';\n    if(typeof(ref) === 'string')\n        return ref.toLowerCase().replace(/\\s/g,'');\n    else if(typeof(ref) === 'object') {\n        var result = '';\n        for(var prop in ref) {\n            if(ref.hasOwnProperty(prop)) {\n                var value = ref[prop];\n                if(value !== null && typeof(value) !== 'undefined') {\n                    //TODO catch non-string-able values\n                    result += (value+'').toLowerCase().replace(/\\s/g,'');\n                }\n            }\n        }\n        return result;\n    }\n    return '';\n}\n\n/**\n * Adjusts service access url to ignore certain patterns that can affect\n * how URI uniqueness is.\n * @param service - GP Service instance\n * @return access url adjusted for URI generation needs\n */\nfunction fixServiceHref(service : any) : string {\n    stripLayerFromServiceHref(service);\n    let url = service.accessURL || service.href;\n    if(!url || !url.length) return null;\n\n    //ensure case sensitivity is not an issue\n    // and that any surrounding whitespace is ignored\n    url = (url + '').trim().toLowerCase();\n\n    url = url.replace(/http(s)?:\\/\\//,'');    //ignore protocol for URI purposes\n\n    url = url.replace(/&?request=[A-Za-z]+/i,'')\n             .replace(/&?service=(WMS|WFS|WCS|CSW)/i,'')\n             .replace(/&?version=[0-9\\.]*/i,'')\n             .replace(/&?layers=[A-Za-z0-9\\-\\:_,]*/i, '')\n             .replace(/&?srs=[A-Za-z0-9\\:]*/i, '')\n             .replace(/&?crs=[A-Za-z0-9\\:]*/i, '')\n             .replace(/&?format=[A-Za-z\\/]*/i, '')\n             .replace(/&?bbox=[0-9,\\.]*/i, '');\n\n    let lastChar = url[url.length-1];\n    if( '/' === lastChar || '?' === lastChar) { //ignore empty querystring or trailing slashes\n        url = url.substring(0, url.length-1);\n    }\n    return url;\n}\n\n\n/**\n * ESRI services sometimes have layer information baked into their URL\n * which needs to be removed before the service can be used.\n * @param service - GP Service object\n */\nfunction stripLayerFromServiceHref(service : any) : string {\n\n    if(!service) return;\n    let type = service.serviceType || service.conformsTo;\n    if(!type) return;\n\n    //if ESRI service, make sure it doesn't have a layer id on the href\n    if( ESRI_TYPES.indexOf(type.uri) >= 0 ) {\n\n        let href = service.href || service.accessURL;\n        let matches = href.match(/(Map|Feature|Image)(Server\\/\\d+)/i);\n        if(matches && matches.length > 2) {\n            // 0 < full string match (ie, 'MapServer/1')\n            // 1 < server type match (ie, 'Map' or 'Feature')\n            // 2 < bit we care about (ie, 'Server/1')\n            href = href.replace(matches[2], 'Server/');\n\n            if(service.href) service.href = href;\n            if(service.accessURL) service.accessURL = href;\n        }\n    }\n}\n\n\n\n\n/**\n * @see https://geoplatform.atlassian.net/wiki/display/DT/Common+Object+Identifier+Scheme\n */\nconst URIFactory = {\n\n    factories : {},\n\n    register : function (type : string, factory : Function) {\n        this.factories[type] = factory;\n    },\n\n    create : function(object : any, md5Fn : Function) {\n        if(!object || !object.type) return null;\n        if( typeof(md5Fn) !== 'function' ) {\n            throw new Error(\"Must specify a MD5 function when using URIFactory\");\n        }\n        let factory = this.factories[object.type];\n        if(!factory) return null;\n        return factory(object, md5Fn);\n    }\n};\n\n\n\n\nURIFactory.register(ItemTypes.DATASET, function(dataset : any, md5 : Function) {\n    let pubName = (dataset.publisher||dataset.publishers||[])\n        .map( pub => { return pub.label||\"\"; }).join('');\n    let ref : any = formatReference({\n        title: dataset.title,\n        pub: pubName\n    });\n    return URI_BASE + '/id/dataset/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.SERVICE, function(service : any, md5 : Function) {\n    let url = fixServiceHref(service);\n    let ref = formatReference(url);\n    return URI_BASE + '/id/service/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.LAYER, function(layer : any, md5 : Function) {\n\n    let svcUrl = '';\n    let services = layer.servicedBy || layer.services;\n    if(services && services.length)\n        svcUrl = services[0].accessURL || services[0].href || '';\n    let lyrUrl = layer.accessURL || layer.href || '';\n    let lyrName = layer.layerName || '';\n\n    //not recommended based upon following example:\n    //  http://services.nationalmap.gov/.../MapServer/WMSServer?request=GetCapabilities&service=WMS/layer/1\n    // return url + '/layer/' + layer.layerName;\n\n    let args = svcUrl + lyrName + lyrUrl;\n    if(!args.length) return null;   //nothing was provided\n\n    //ALTERNATE URI PATTERN\n    let ref = formatReference(args);\n    return URI_BASE + '/id/layer/' + md5(ref);\n\n});\n\n/**\n * Uses the map title, createdBy, and all third-party identifiers associated with the map\n * @param {object} map - GP Map object\n * @return {string} uri unique to this object\n */\nURIFactory.register(ItemTypes.MAP, function(map : any, md5 : Function) {\n    let author = map.createdBy || map._createdBy || \"\";\n    let identifiers = (map.identifiers || map.identifier || []).join('');\n    let ref = formatReference({title: map.title, author: author, identifiers: identifiers});\n    return URI_BASE + '/id/map/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.GALLERY, function(gallery : any, md5 : Function) {\n    let author = gallery.createdBy || gallery._createdBy || \"\";\n    let ref = formatReference({title: gallery.title, author: author});\n    return URI_BASE + '/id/gallery/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.COMMUNITY, function(community : any, md5 : Function) {\n    let ref = formatReference({title: community.title});\n    return URI_BASE + '/id/community/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.ORGANIZATION, function(org : any, md5 : Function) {\n    let ref = formatReference(org.label || org.name);\n    return URI_BASE + '/id/organization/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.PERSON, function(person : any, md5 : Function) {\n    let ref = formatReference(person.name);\n    return URI_BASE + '/id/person/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONTACT, function(vcard : any, md5 : Function) {\n    let ref : any = {};\n    if(vcard.email || vcard.hasEmail)\n        ref.email = vcard.email || vcard.hasEmail; //email\n    if(vcard.tel)\n        ref.tel = vcard.tel; //tel\n    if(vcard.orgName || vcard['organization-name'])\n        ref.orgName = vcard.orgName || vcard['organization-name']; //orgName\n    if(vcard.positionTitle)\n        ref.positionTitle = vcard.positionTitle; //positionTitle\n    ref = formatReference(ref);\n    return URI_BASE + '/id/contact/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONCEPT, function(object : any, md5 : Function) {\n    let scheme = object.inScheme || object.scheme;\n    let schemeLabel = scheme ? (scheme.label || scheme.prefLabel) : '';\n    let schemeRef = formatReference(schemeLabel);\n    let ref = formatReference( object.label || object.prefLabel );\n    return URI_BASE + '/id/metadata-codelists/' + md5(schemeRef) + '/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.CONCEPT_SCHEME, function(object : any, md5 : Function) {\n    let ref = formatReference(object.label || object.prefLabel);\n    return URI_BASE + '/id/metadata-codelists/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.APPLICATION, function(object : any, md5 : Function) {\n    if(!object || !object.title) return null;\n    let author = object.createdBy || object._createdBy || \"\";\n    let ref = formatReference({title: object.title, author: author});\n    return URI_BASE + '/id/application/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.TOPIC, function(object : any, md5 : Function) {\n    if(!object || !object.title) return null;\n    let author = object.createdBy || object._createdBy || \"\";\n    let ref = formatReference({title: object.title, author: author});\n    return URI_BASE + '/id/topic/' + md5(ref);\n});\n\nURIFactory.register(ItemTypes.WEBSITE, function(item : any, md5 : Function) {\n    if(!item || !item.landingPage) return null;\n    let ref = formatReference(item.landingPage);\n    return URI_BASE + '/id/website/' + md5(ref);\n});\n\n\n\nfunction factoryFn(md5Fn) {\n    if( typeof(md5Fn) !== 'function' ) {\n        throw new Error(\"Must specify a MD5 function when using URIFactory\");\n    }\n    return function(object) {\n        return URIFactory.create(object, md5Fn);\n    };\n}\n\n\n\nexport {\n    factoryFn as default,\n    factoryFn as URIFactory\n};\n","\n\nexport default {\n    ALTERNATE_TITLE  : 'alternateTitles',\n    BEGINS           : 'startDate.min',\n    CLASSIFIERS      : 'classifiers',\n    CREATED          : 'created',\n    CREATED_BEFORE   : 'created.max',\n    CREATED_AFTER    : 'created.min',\n    CREATED_BY       : 'createdBy',\n    CREATOR          : 'creator.id',\n    CONTRIBUTED_BY   : 'contributedBy',\n    ENDS             : 'endDate.max',\n    EXTENT           : 'extent',\n    IDENTIFIERS      : 'identifiers',\n    KEYWORDS         : 'keywords',\n    LAST_MODIFIED_BY : 'lastModifiedBy',\n    MODIFIED         : 'modified',\n    MODIFIED_BEFORE  : 'modified.max',\n    MODIFIED_AFTER   : 'modified.min',\n    PUBLISHERS_ID    : 'publisher.id',\n    PUBLISHERS_LABEL : 'publisher.label',\n    PUBLISHERS_URI   : 'publisher.uri',\n    CONTACTS_ID      : 'contacts.id',\n    CONTACTS_LABEL   : 'contacts.label',\n    CONTACTS_URI     : 'contacts.uri',\n    QUERY            : 'q',\n    SCHEMES_ID       : 'scheme.id',\n    SCHEMES_LABEL    : 'scheme.label',\n    SCHEMES_URI      : 'scheme.uri',\n    SIMILAR_TO       : 'similarTo',\n    STATUS           : 'status',\n    SERVICE_TYPES    : 'serviceType.id',\n    THEMES_ID        : 'theme.id',\n    THEMES_LABEL     : 'theme.label',\n    THEMES_URI       : 'theme.uri',\n    TOPICS_ID        : 'topic.id',\n    TOPICS_LABEL     : 'topic.label',\n    TOPICS_URI       : 'topic.uri',\n    TYPES            : 'type',      //TODO change to 'types'\n    URI              : 'uri',\n    USED_BY_ID       : 'usedBy.id',\n    USED_BY_LABEL    : 'usedBy.label',\n    USED_BY_URI      : 'usedBy.uri',\n    VISIBILITY       : 'visibility',\n    RESOURCE_TYPE    : 'resourceType',\n    DATASET          : 'dataset',\n    LANDING_PAGE     : 'landingPage',\n    PURPOSE          : 'purpose',\n\n    //statistics parameters\n    RELIABILITY      : 'reliability',\n    RELIABILITY_MIN  : 'reliability.min',\n    RELIABILITY_MAX  : 'reliability.max',\n    ONLINE           : 'online',\n    COMPLIANT        : 'compliant',\n    SPEED            : 'speed',\n    SPEED_MIN        : 'speed.min',\n    SPEED_MAX        : 'speed.max',\n    LIKES            : 'likes',\n    LIKES_MIN        : 'likes.min',\n    LIKES_MAX        : 'likes.max',\n    VIEWS            : 'views',\n    VIEWS_MIN        : 'views.min',\n    VIEWS_MAX        : 'views.max',\n\n    //type-specific parameters\n    HREF             : 'href',           //service-specific\n    LAYER_TYPE       : 'layerType',     //layer-specific\n    LAYER_NAME       : 'layerName',     //...\n    PARENT_LAYER     : 'parentLayer',   //...\n    SUB_LAYER        : 'subLayer',      //...\n    SERVICE          : 'service',       //...\n    MAP_LAYER        : 'mapLayer',      //map-specific\n    GALLERY_ITEM     : 'galleryItem',   //gallery-specific\n\n    //meta-parameters\n    FACETS           : 'includeFacets',  //TODO change to 'facets'\n    FIELDS           : 'fields',\n    SORT             : 'sort',\n    PAGE             : 'page',\n    PAGE_SIZE        : 'size',\n\n    //recommender service-specific\n    FOR_TYPES        : 'for'\n};\n","\nimport QueryParameters from './parameters';\n\ninterface KVP<U> { [ key : string ] : U }\n\n\nconst SORT_OPTIONS_DEFAULT : { value:string; label:string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nclass KGQuery {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    constructor() {\n\n        this.defaultQuery = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n        this.query = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n    }\n\n\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    parameter(name : string, value: any) : KGQuery {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    setParameter (name : string, value : any) {\n        if(value === null || value === undefined)\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    applyParameters (obj : KVP<any> ) {Â \n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p, obj[p]);\n            }\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    q(text : string) : KGQuery {\n        this.setQ(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setQ (text : string) {\n        this.setParameter(QueryParameters.QUERY, text);\n    }\n\n    getQ() : string|null {\n        return this.getParameter(QueryParameters.QUERY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    classifiers(types : string|string[]) : KGQuery {\n        this.setClassifiers(types);\n        return this;\n    }\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    setClassifiers (types : string|string[]) {\n        if(!types) return;\n        if(typeof(types) === 'string') types = types = [types];\n        this.setParameter(QueryParameters.TYPES, types);\n    }\n\n    /**\n     * @return KG classifiers for which concepts should be returned\n     */\n    getClassifiers () : string[] {\n        return this.getParameter(QueryParameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.types()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    types(objTypes : string|string[]) : KGQuery {\n        this.setTypes(objTypes);\n        return this;\n    }\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.setTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    setTypes (objTypes : string|string[]) {\n        if(!objTypes) return;\n        if(typeof(objTypes) === 'string') objTypes = [objTypes];\n        this.setParameter(QueryParameters.FOR_TYPES, objTypes);\n    }\n\n    /**\n     * Get the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.getTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @return Item object type names\n     */\n    getTypes () : string[] {\n        return this.getParameter(QueryParameters.FOR_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : KGQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this.query.page = page*1;\n    }\n\n    getPage() : number {\n        return this.query.page;\n    }\n\n    nextPage() : void {\n        this.setPage(this.query.page+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : KGQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this.query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this.query.size;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order ?: string) : KGQuery {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order ?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.query.sort = sort;\n    }\n\n    getSort() : string | null {\n        return this.query.sort;\n    }\n\n    getSortField() : string | null {\n        return this.query.sort.split(',')[0];\n    }\n\n    getSortOrder() : boolean {\n        return this.query.sort.split(',')[1] === 'asc';\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string, label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = this.defaultQuery;\n    }\n}\n\nexport default KGQuery;\n","\n\n\nexport default  {\n    PURPOSE             : 'purpose',\n    FUNCTION            : 'function',\n    TOPIC_PRIMARY       : 'primaryTopic',\n    TOPIC_SECONDARY     : 'secondaryTopic',\n    SUBJECT_PRIMARY     : 'primarySubject',\n    SUBJECT_SECONDARY   : 'secondarySubject',\n    COMMUNITY           : 'community',\n    AUDIENCE            : 'audience',\n    PLACE               : 'place',\n    CATEGORY            : 'category'\n};\n","\nimport Parameters from './parameters';\nimport Classifiers from './classifiers';\n\ninterface KVP<U> { [ key : string ] : U }\n\nconst Fields : KVP<string> = {\n    ACCESS_RIGHTS       : 'rights',\n    ALTERNATE_TITLES    : 'alternateTitles',\n    ANNOTATIONS         : 'annotations',\n    CLASSIFIERS         : 'classifiers',\n    CONCEPT_SCHEME      : 'scheme',\n    CONTACTS            : 'contacts',\n    CREATED             : 'created',\n    CREATED_BY          : 'createdBy',\n    DATASETS            : 'datasets',\n    DESCRIPTION         : 'description',\n    DISTRIBUTIONS       : 'distributions',\n    EXTENT              : 'extent',\n    GALLERY_ITEMS       : 'items',\n    HREF                : 'href',\n    IDENTIFIERS         : 'identifiers',\n    KEYWORDS            : 'keywords',\n    LABEL               : 'label',\n    LAST_MODIFIED_BY    : 'lastModifiedBy',\n    LAYERS              : 'layers',\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LEGEND              : 'legend',\n    MODIFIED            : 'modified',\n    PARENT_LAYER        : 'parentLayer',\n    PUBLISHERS          : 'publishers',\n    RESOURCE_TYPES      : 'resourceTypes',\n    SERVICE_TYPE        : 'serviceType',\n    SERVICES            : 'services',\n    SPATIAL             : 'spatial',\n    STATISTICS          : 'statistics',\n    STATUS              : 'status',\n    SUB_LAYERS          : 'subLayers',\n    TEMPORAL            : 'temporal',\n    THEMES              : 'themes',\n    THUMBNAIL           : 'thumbnail',\n    TOPICS              : 'topics',\n    USED_BY             : 'usedBy',\n    VISIBILITY          : 'visibility',\n    LANDING_PAGE        : 'landingPage'\n};\n\nconst FIELDS_DEFAULT : string[] = [\n    Fields.CREATED, Fields.MODIFIED, Fields.CREATED_BY,\n    Fields.PUBLISHERS, Fields.THEMES, Fields.DESCRIPTION\n];\n\n/* --------------------------------------------------------- */\n\nconst Facets : KVP<string> = {\n    ALTERNATE_TITLES    : 'alternateTitles',\n    CONCEPT_SCHEMES     : 'schemes',\n    CREATED_BY          : 'createdBy',\n    HREF                : 'href',\n    IDENTIFIERS         : \"identifiers\",\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LIKES               : 'likes',\n    ONLINE              : 'online',\n    PUBLISHERS          : 'publishers',\n    CONTACTS            : 'contacts',\n    RELIABILITY         : 'reliability',\n    SERVICE_TYPES       : 'serviceTypes',\n    SPEED               : 'speed',\n    STATUS              : 'status',\n    THEMES              : 'themes',\n    TOPICS              : 'topics',\n    TYPES               : 'type',   //TODO change to 'types'\n    USED_BY             : 'usedBy',\n    VIEWS               : 'views',\n    VISIBILITY          : 'visibility'\n};\n\nconst FACETS_DEFAULT : string[] = [\n    Facets.TYPES,\n    Facets.PUBLISHERS,\n    Facets.SERVICE_TYPES,\n    Facets.CONCEPT_SCHEMES,\n    Facets.VISIBILITY,\n    Facets.CREATED_BY\n];\n\n\n/*\n    Map facet keys to parameters so clients can set\n    query params using faceted results\n\n    //TODO remove these and their function below\n */\nconst FacetToParam : KVP<string> = {};\nFacetToParam[Facets.TYPES]           = Parameters.TYPES;\nFacetToParam[Facets.THEMES]          = Parameters.THEMES_ID;\nFacetToParam[Facets.TOPICS]          = Parameters.TOPICS_ID;\nFacetToParam[Facets.PUBLISHERS]      = Parameters.PUBLISHERS_ID;\nFacetToParam[Facets.CONTACTS]        = Parameters.CONTACTS_ID;\nFacetToParam[Facets.CONCEPT_SCHEMES] = Parameters.SCHEMES_ID;\nFacetToParam[Facets.USED_BY]         = Parameters.USED_BY_ID;\n\n\n\n/* --------------------------------------------------------- */\n\n\nconst SORT_OPTIONS_DEFAULT : { value: string; label: string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nconst BBOX_REGEX = /^\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?$/;\n\n\nfunction toArray(value : any) : any | null {\n    let result = value;\n    //if given a non-array value, wrap in array\n    if(result !== null && typeof(result.push) === 'undefined') result = [result];\n    //if array value is empty, nullify the result\n    if(result !== null && !result.length) result = null;\n    return result;\n}\n\n\n\n/**\n * Query\n *\n * Specify the \"default\" query constraints to use by passing in 'options.defaults = {...}';\n *\n */\nclass Query {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    /**\n     * @param options - set of initial constraints\n     */\n    constructor(options ?: KVP<any>) {\n        this.defaultQuery = { };\n        this.defaultQuery[Parameters.PAGE.toString()] = 0;\n        this.defaultQuery[Parameters.PAGE_SIZE.toString()] = 10;\n        this.defaultQuery[Parameters.SORT.toString()] = \"modified,desc\";\n        this.defaultQuery[Parameters.FIELDS.toString()] = FIELDS_DEFAULT.slice(0);\n        this.defaultQuery[Parameters.FACETS.toString()] = FACETS_DEFAULT.slice(0);\n        if(options && options.defaults) {\n            Object.assign(this.defaultQuery, options.defaults);\n            delete options.defaults;\n        }\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n\n    /**\n     * @return containing request-ready parameters/values\n     */\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    /**\n     * @return Query\n     */\n    clone() : Query {\n        let result = new Query();\n        let json = JSON.parse(JSON.stringify(this.query));\n        result.applyParameters(json);\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param name\n     * @param value\n     * @return Query this\n     */\n    parameter(name : string, value : any) : Query {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    /**\n     * @param name\n     * @param value\n     */\n    setParameter (name : string, value: any) : void {\n        if(value === null || value === undefined || //if no value was provide\n            (typeof(value.push) !== 'undefined' && !value.length)) //or empty array\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    /**\n     * @param key - name of parameter\n     * @return value of parameter\n     */\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    /**\n     * @param name - name of parameter to remove existing value for\n     */\n    clearParameter(name : string) {\n        delete this.query[name];\n    }\n\n    /**\n     * @param obj - set of parameter/values to apply to this query\n     */\n    applyParameters (obj : KVP<any>) : void {Â \n        for(let p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p as string, obj[p] as any);\n            }\n        }\n    }\n\n    /**\n     * @param facet - name of facet to set the value for as a parameter\n     * @param value - value of the facet to use as the parameter's value\n     */\n     //TODO remove this function\n    setFacetParameter (facet: string, value: string) : void {\n        let param : string = FacetToParam[facet];\n        if(!param) {\n            console.log(\"WARN : Query.applyFacetParameter() - \" +\n                \"unable to map facet to known parameter '\" + facet + \"', using \" +\n                \"as direct parameter which may not operate as intended\");\n        }\n        this.setParameter(param||facet, value);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param text\n     * @return Query this\n     */\n    q(text : string) : Query { this.setQ(text); return this; }\n\n    /** @param text - free text query */\n    setQ (text : string) : void { this.setParameter(Parameters.QUERY, text); }\n    /** @return */\n    getQ() : string { return this.getParameter(Parameters.QUERY) as string; }\n\n\n    // -----------------------------------------------------------\n\n\n    keywords(text : string|string[]) : Query {\n        this.setKeywords(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setKeywords (text : string|string[]) : void {\n        this.setParameter(Parameters.KEYWORDS, toArray(text));\n    }\n\n    getKeywords() : string[] {\n        return this.getParameter(Parameters.KEYWORDS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    uri (uri : string) : Query {\n        this.setUri(uri);\n        return this;\n    }\n\n    setUri(uri : string) {\n        this.setParameter(Parameters.URI, uri);\n    }\n\n    getUri() : any {\n        return this.getParameter(Parameters.URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    types(types : string|string[]) : Query {\n        this.setTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - name of class(es) to request\n     */\n    setTypes (types : string|string[]) {\n        this.setParameter(Parameters.TYPES, toArray(types));\n    }\n\n    getTypes () : string[] {\n        return this.getParameter(Parameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    createdBy(user : string) : Query {\n        this.setCreatedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setCreatedBy (user : string) {\n        this.setParameter(Parameters.CREATED_BY, user);\n    }\n\n    /** @return username */\n    getCreatedBy () : any {\n        return this.getParameter(Parameters.CREATED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    lastModifiedBy(user : string) : Query {\n        this.setLastModifiedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setLastModifiedBy (user: string) {\n        this.setParameter(Parameters.LAST_MODIFIED_BY, user);\n    }\n\n    /** @return username */\n    getLastModifiedBy () : any {\n        return this.getParameter(Parameters.LAST_MODIFIED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - string or array of strings containing theme constraint\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    themes(themes: string|string[], parameter?:string) : Query {\n        this.setThemes(themes, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - theme or themes to constrain by\n     */\n    setThemes (themes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.THEMES_ID, null);\n        this.setParameter(Parameters.THEMES_LABEL, null);\n        this.setParameter(Parameters.THEMES_URI, null);\n\n        let param = parameter || Parameters.THEMES_ID;\n        this.setParameter(param, toArray(themes));\n    }\n\n    getThemes () : string[] {\n        return this.getParameter(Parameters.THEMES_ID) ||\n            this.getParameter(Parameters.THEMES_LABEL) ||\n            this.getParameter(Parameters.THEMES_URI);\n    }\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param  topics - string or array of strings containing theme constraint\n     * @param  parameter - optional, to indicate the parameter to use\n     * @return Query instance\n     */\n    topics(topics:string|string[], parameter ?: string) : Query {\n        this.setTopics(topics, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param topics - theme or topics to constrain by\n     */\n    setTopics (topics:string|string[], parameter ?: string) {\n\n        //clear existing\n        this.setParameter(Parameters.TOPICS_ID, null);\n        this.setParameter(Parameters.TOPICS_LABEL, null);\n        this.setParameter(Parameters.TOPICS_URI, null);\n\n        let param = parameter || Parameters.TOPICS_ID;\n        this.setParameter(param, toArray(topics));\n    }\n\n    getTopics () : string[] {\n        return this.getParameter(Parameters.TOPICS_ID) ||\n            this.getParameter(Parameters.TOPICS_LABEL) ||\n            this.getParameter(Parameters.TOPICS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    publishers(publishers:string|string[], parameter?:string) : Query {\n        this.setPublishers(publishers, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param publishers - publishing orgs to constrain by\n     */\n    setPublishers (publishers:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.PUBLISHERS_ID, null);\n        this.setParameter(Parameters.PUBLISHERS_LABEL, null);\n        this.setParameter(Parameters.PUBLISHERS_URI, null);\n\n        let param = parameter || Parameters.PUBLISHERS_ID;\n        this.setParameter(param, toArray(publishers));\n    }\n\n    getPublishers () : string[] {\n        return this.getParameter(Parameters.PUBLISHERS_ID) ||\n            this.getParameter(Parameters.PUBLISHERS_LABEL) ||\n            this.getParameter(Parameters.PUBLISHERS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Point of Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    contacts(contacts:string|string[], parameter?:string) : Query {\n        this.setContacts(contacts, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param contacts - publishing orgs to constrain by\n     */\n    setContacts (contacts:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.CONTACTS_ID, null);\n        this.setParameter(Parameters.CONTACTS_LABEL, null);\n        this.setParameter(Parameters.CONTACTS_URI, null);\n\n        let param = parameter || Parameters.CONTACTS_ID;\n        this.setParameter(param, toArray(contacts));\n    }\n\n    getContacts () : string[] {\n        return this.getParameter(Parameters.CONTACTS_ID) ||\n            this.getParameter(Parameters.CONTACTS_LABEL) ||\n            this.getParameter(Parameters.CONTACTS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    usedBy(ids:string|string[], parameter?:string) : Query {\n        this.setUsedBy(ids, parameter);\n        return this;\n    }\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param ids - publishing orgs to constrain by\n     */\n    setUsedBy (ids:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.USED_BY_ID, null);\n        this.setParameter(Parameters.USED_BY_LABEL, null);\n        this.setParameter(Parameters.USED_BY_URI, null);\n\n        let param = parameter || Parameters.USED_BY_ID;\n        this.setParameter(param, toArray(ids));\n    }\n\n    getUsedBy () : string[] {\n        return this.getParameter(Parameters.USED_BY_ID) ||\n            this.getParameter(Parameters.USED_BY_LABEL) ||\n            this.getParameter(Parameters.USED_BY_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    schemes(schemes:string|string[], parameter?:string) : Query {\n        this.setSchemes(schemes, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     */\n    setSchemes (schemes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.SCHEMES_ID, null);\n        this.setParameter(Parameters.SCHEMES_LABEL, null);\n        this.setParameter(Parameters.SCHEMES_URI, null);\n\n        let param = parameter || Parameters.SCHEMES_ID;\n        this.setParameter(param, toArray(schemes));\n    }\n\n    getSchemes() : string[] {\n        return this.getParameter(Parameters.SCHEMES_ID) ||\n            this.getParameter(Parameters.SCHEMES_LABEL) ||\n            this.getParameter(Parameters.SCHEMES_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     *\n     */\n    serviceTypes(types:string|string[]) : Query {\n        this.setServiceTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - ids\n     */\n    setServiceTypes (types:string|string[]) {\n        this.setParameter(Parameters.SERVICE_TYPES, toArray(types));\n    }\n\n    getServiceTypes () : string[] {\n        return this.getParameter(Parameters.SERVICE_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    visibility(vis:\"public\"|\"private\") : Query {\n        this.setVisibility(vis);\n        return this;\n    }\n\n    /**\n     * @param visibility - one of 'public' or 'private'\n     */\n    setVisibility (visibility : \"public\"|\"private\") {\n        this.setParameter(Parameters.VISIBILITY, visibility);\n    }\n\n    getVisibility () : any {\n        return this.getParameter(Parameters.VISIBILITY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    status(value : string) : Query {\n        this.setStatus(value);\n        return this;\n    }\n\n    /**\n     * @param status - current status of Item\n     */\n    setStatus (value : string) {\n        this.setParameter(Parameters.STATUS, value);\n    }\n\n    getStatus () : any {\n        return this.getParameter(Parameters.STATUS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    extent(bbox : any) : Query {\n        this.setExtent(bbox);\n        return this;\n    }\n\n    /**\n     * @param bbox - string form of \"minx,miny,maxx,maxy\", or L.LatLngBounds, or Array\n     */\n    setExtent (bbox : any) {\n        if(bbox) {\n            if(typeof(bbox.toBboxString) !== 'undefined') {\n                //Leaflet Bounds instance\n                bbox = bbox.toBboxString();\n\n            } else if(typeof(bbox.push) !== 'undefined' && bbox.length &&\n                //Nested array (alternate Leaflet representation):\n                // [ [minLat,minLong], [maxLat,maxLong] ]\n                typeof(bbox[0].push) !== 'undefined') {\n                bbox = bbox[0][1]+','+bbox[0][0]+','+bbox[1][1]+','+bbox[1][0];\n\n            } else if(typeof(bbox) === 'string') {\n                if(!BBOX_REGEX.test(bbox)) {\n                    throw new Error(\"Invalid argument: bbox string must be \" +\n                        \"in form of 'minx,miny,maxx,maxy'\");\n                }\n            } else {\n                throw new Error(\"Invalid argument: bbox must be one of \" +\n                    \"Leaflet.Bounds, nested array, or bbox string\");\n            }\n        }\n        this.setParameter(Parameters.EXTENT, bbox);\n    }\n\n    /**\n     * @return bbox string or null if not set\n     */\n    getExtent () : any {\n        return this.getParameter(Parameters.EXTENT);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.classifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     * @return Query\n     */\n    classifier(classifier : string, value : string|string[]) : Query {\n        this.setClassifier(classifier, value);\n        return this;\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.setClassifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     */\n    setClassifier(classifier : string, value : string|string[]) {\n        let arr = toArray(value);\n        this.setParameter(Parameters.CLASSIFIERS + \".\" + classifier, arr);\n    }\n\n    /**\n     * @param classifier - name of classifier constraint in use\n     * @return array of concept ids\n     */\n    getClassifier(classifier : string) : string[] {\n        return this.getParameter(Parameters.CLASSIFIERS + \".\" + classifier) || [];\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...',\n     *      functionIds = ['...','...'];\n     *  let query = new Query();\n     *  query.classifiers({\n     *       KGClassifiers.PURPOSE: purposeId,\n     *       KGClassifiers.FUNCTION: functionIds\n     *  });\n     *\n     * @param value - object defining classifiers\n     * @return Query instance\n     */\n    classifiers(value : any) : Query {\n        this.setClassifiers(value);\n        return this;\n    }\n\n    /**\n     * @param value - object defining classifiers\n     */\n    setClassifiers (value : any) {\n        const classes = Object.keys(Classifiers).map(k=>Classifiers[k]);\n        if(!value || typeof(value) !== 'object' || Array.isArray(value)) {\n            classes.forEach( classifier => {\n                this.clearParameter( Parameters.CLASSIFIERS + \".\" + classifier );\n            });\n            return;\n        }\n        Object.keys(value).forEach( classifier => {\n            if(~classes.indexOf(classifier)) {\n                this.setClassifier( classifier, value[classifier] );\n            }\n        });\n    }\n\n    /**\n     * @return classifiers used in the query\n     */\n    getClassifiers () : any {\n        let result = {};\n        Object.keys(Classifiers).map(k=>Classifiers[k]).forEach( classifier => {\n            result[classifier] = this.getClassifier(classifier);\n        });\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    modified(date : number|Date, beforeOrAfter : boolean) : Query {\n        this.setModified(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setModified (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.MODIFIED_BEFORE, null);\n            this.setParameter(Parameters.MODIFIED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.MODIFIED_BEFORE : Parameters.MODIFIED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.MODIFIED_AFTER : Parameters.MODIFIED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getModified () : Date {\n        let value = this.getParameter(Parameters.MODIFIED_BEFORE) ||\n            this.getParameter(Parameters.MODIFIED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    created(date : number|Date, beforeOrAfter:boolean) : Query {\n        this.setCreated(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setCreated (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.CREATED_BEFORE, null);\n            this.setParameter(Parameters.CREATED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.CREATED_BEFORE : Parameters.CREATED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.CREATED_AFTER : Parameters.CREATED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getCreated () : Date {\n        let value = this.getParameter(Parameters.CREATED_BEFORE) ||\n            this.getParameter(Parameters.CREATED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    begins(date : number|Date) : Query {\n        this.setBeginDate(date);\n        return this;\n    }\n\n    setBeginDate (date : number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.BEGINS, date);\n    }\n\n    getBeginDate () : Date {\n        let date = this.getParameter(Parameters.BEGINS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    ends(date : number|Date) : Query {\n        this.setEndDate(date);\n        return this;\n    }\n\n    setEndDate (date: number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.ENDS, date);\n    }\n\n    getEndDate () : Date {\n        let date = this.getParameter(Parameters.ENDS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    between(begin : number|Date, end : number|Date) : Query {\n        this.setBetween(begin, end);\n        return this;\n    }\n\n    setBetween(begin : number|Date, end : number|Date) {\n        this.begins(begin);\n        this.ends(end);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    resourceTypes(types: string|string[]) : Query {\n        this.setResourceTypes(types);\n        return this;\n    }\n\n    setResourceTypes(types: string|string[]) {\n        this.setParameter(Parameters.RESOURCE_TYPE, toArray(types));\n    }\n\n    getResourceTypes() : string[] {\n        return this.getParameter(Parameters.RESOURCE_TYPE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    facets(names : string|string[]) : Query {\n        this.setFacets(names);\n        return this;\n    }\n\n    /*\n     * @param names - names of facets\n     */\n    setFacets (names: string|string[]) {\n        this.setParameter(Parameters.FACETS, toArray(names));\n    }\n\n    getFacets() : string[] {\n        return this.getParameter(Parameters.FACETS);\n    }\n\n    /**\n     * @param name - name of facet to add\n     */\n    addFacet(name: string) {\n        let facets = this.getFacets() || [];\n        facets.push(name);\n        this.setFacets(facets);\n    }\n\n    /**\n     * @param name - name of facet to remove\n     */\n    removeFacet(name: string) {\n        let facets = this.getFacets() || [];\n        let idx = facets.indexOf(name);\n        if(idx>=0) {\n            facets.splice(idx, 1);\n            this.setFacets(facets);\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    fields(fields: string|string[]) : Query {\n        this.setFields(fields);\n        return this;\n    }\n\n    /**\n     * @param fields - list of field names to request for each search result\n     */\n    setFields (fields: string|string[]) {\n        this.setParameter(Parameters.FIELDS, toArray(fields));\n    }\n\n    getFields() : string[] {\n        return this.getParameter(Parameters.FIELDS);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    addField(field: string) {\n        let fields = this.getFields() || [];\n        fields.push(field);\n        this.setFields(fields);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    removeField(field: string) {\n        let fields = this.getFields() || [];\n        let idx = fields.indexOf(field);\n        if(idx>=0) {\n            fields.splice(idx, 1);\n            this.setFields(fields);\n        }\n    }\n\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page: number) : Query {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page: number) {\n        if(isNaN(page) || page*1<0) return;\n        this.setParameter(Parameters.PAGE, page*1);\n    }\n\n    getPage() : number {\n        return this.getParameter(Parameters.PAGE);\n    }\n\n    nextPage() : void {\n        this.setPage(this.getPage()+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.getPage()-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : Query {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size: number) {\n        if(isNaN(size) || size*1<0) return;\n        this.setParameter(Parameters.PAGE_SIZE, size*1);\n    }\n\n    getPageSize() : number {\n        return this.getParameter(Parameters.PAGE_SIZE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort: string, order?:string) : Query {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort: string, order?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.setParameter(Parameters.SORT, sort);\n    }\n\n    getSort() : string {\n        return this.getParameter(Parameters.SORT);\n    }\n\n    getSortField() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[0] : null;\n    }\n\n    getSortOrder() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[1] : null;\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string; label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n    }\n}\n\nexport {\n    Query as default,\n    Query,\n    Fields,\n    Facets\n};\n","\nvar Config : { [key:string] : any } = {\n\n    ualUrl: 'https://ual.geoplatform.gov',\n    //appId: '...',\n\n    configure: function(options : any) {\n        Object.assign(this, options);\n    }\n};\n\nexport default Config;\n","\n\nclass GPHttpClient {\n\n    protected token : any;\n    protected timeout : number = 5000;\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        options = options || {};\n        this.setTimeout(options.timeout||30000);\n        this.setAuthToken(options.token);\n    }\n\n    setTimeout(timeout : number) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg : string|Function) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    getToken() : string {\n        if(this.token && typeof(this.token) === 'function') return this.token();\n        else return this.token || null;\n    }\n\n    createRequestOpts(\n        // @ts-ignore\n        options : { [key:string] : any }\n    ) : any {\n        throw new Error(\"Must implement 'createRequestOpts' in a sub-class\");\n    }\n\n    execute(\n        // @ts-ignore\n        opts : any\n    ) : Promise<any> {\n        return Promise.reject(new Error(\"Must overrdie 'execute' in a sub-class\"));\n    }\n\n}\n\nexport default GPHttpClient;\n","\nimport axios from 'axios';\nimport GPError from '../shared/error';\nimport GPHttpClient from './client';\n\n\nclass XHRHttpClient extends GPHttpClient {\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        super(options);\n    }\n\n\n    createRequestOpts(options : { [key:string] : any }) : any {\n\n        let opts : { [key:string] : any } = {\n            method: options.method,\n            url: options.url,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.json === true)\n            opts.responseType = 'json';\n\n        if(options.params) {\n            opts.params = options.params;\n        }\n\n        if(options.data) {\n            opts.data = options.data;\n            opts.contentType = 'application/json';\n        }\n\n        //set authorization header if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.headers = opts.headers || {};\n                opts.headers.Authorization = 'Bearer ' + token;\n                opts.withCredentials = true;\n            }\n        }\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        return opts;\n    }\n\n\n    execute(opts : any) : Promise<any> {\n\n        if(typeof(axios) === 'undefined') {\n            throw new Error(\"Axios not found, check that you have included \" +\n                \"it as a dependency of the application or use a different \" +\n                \"HttpClient implementation\")\n        }\n\n        let promise = axios(opts)\n        .then( response => { return response.data; })\n        .catch( error => {\n            let err : GPError = new GPError(error.message);\n            if (error.response) {\n                err = new GPError(error.response.data);\n            }\n            throw err;\n        });\n        return promise;\n    }\n\n}\n\nexport default XHRHttpClient;\n","\nimport Config from '../shared/config';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\n/**\n * BaseService\n * abstract service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n */\nclass BaseService {\n\n    protected apiBase ?: string;\n    protected baseUrl ?: string;\n    protected client : GPHttpClient;\n    protected _timeout : number = 30000;\n    protected logger : any;\n    protected httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n    }\n\n    setUrl(baseUrl : string) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/items';\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    setTimeout(milliseconds : number) {\n        this._timeout = milliseconds;\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    timeout(milliseconds : number) : BaseService {\n        this.setTimeout(milliseconds);\n        return this;\n    }\n\n    /**\n     * @return GPHttpClient instance or null if one was not provided\n     */\n    getClient() {\n        return this.client;\n    }\n\n    createPromise ( arg: (resolve: (value?: any) => void, reject: (reason?: any) => void) => void ) : Promise<any> {\n        return new Promise<any>( arg );\n    }\n    createAndResolvePromise( value : any ) : Promise<any> {\n        return Promise.resolve(value);\n    }\n    createAndRejectPromise ( error : Error ) : Promise<any>{\n        return Promise.reject(error);\n    }\n\n    /**\n     * @param logger - log service\n     */\n    setLogger(logger : any) {\n        this.logger = logger;\n    }\n\n    /**\n     * @param e - error to log (if logger specified)\n     */\n    logError(e : string|Error) {\n        if(this.logger && this.logger.error) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * @param msg - message to log as debug\n     */\n    logDebug(msg : string) {\n        if(this.logger && this.logger.debug) {\n            this.logger.debug(msg);\n        }\n    }\n\n\n\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this._timeout || 30000;\n        let opts = this.createRequestOpts(options);\n        return opts;\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        let request = this.client.createRequestOpts(options);\n        this.logDebug(\"BaseService.createRequestOpts() - \" + JSON.stringify(request));\n        return request;\n    }\n\n    execute(opts : {[key:string]:any} ) : Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return this.createAndRejectPromise(e);\n        });\n    }\n\n}\n\n\nexport default BaseService;\n","\nimport { Item, SearchResults } from '../shared/models';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\nimport BaseService from './base';\n\n/**\n * ItemService\n * service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n * Ex Searching Items\n *      let params = { q: 'test' };\n *      itemService.search(params).then(response=>{\n *          console.log(response.results.length + \" of \" + response.totalResults);\n *      }).catch(e=>{...});\n *\n * Ex Fetch Item:\n *      itemService.get(itemId).then(item=>{...}).catch(e=>{...});\n *\n * Ex Saving Item:\n *      itemService.save(item).then(item=>{...}).catch(e=>{...});\n *\n * Ex Deleting Item:\n *      itemService.remove(itemId).then(()=>{...}).catch(e=>{...});\n *\n * Ex Patching Item:\n *      itemService.patch(itemId,patch).then(item=>{...}).catch(e=>{...});\n *\n */\nclass ItemService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n\n    /**\n     * @param id - identifier of item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    get (id : string, options ?: any) : Promise<Item> {\n\n        let url = this.baseUrl + '/' + id;\n        if(options && options.version) {\n            url += '/versions/' + options.version;\n            // this.logDebug(\"Client.get requesting version: \" + options.version);\n        }\n        return this.createAndResolvePromise( url )\n        .then( url => {\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.get() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param itemObj - item to create or update\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    save (itemObj : Item, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( itemObj )\n        .then( item => {\n\n            let method = 'POST',\n                url = this.baseUrl;\n            if(item.id) {\n                method = \"PUT\";\n                url += '/' + item.id;\n            } else {\n                //if item is being created and has no URI already defined\n                // attempt to create one using the API's method for doing so\n                // and then attempt the actual item creation\n                if(!item.uri) {\n                    return this.getUri(item, options)\n                    .then( uri => {\n                        item.uri = uri;\n                        let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n                        return this.execute(opts);\n                    });\n                }\n            }\n\n            let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error saving item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.save() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to delete\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving true if successful or an error\n     */\n    remove (id : string, options ?: any) : Promise<boolean> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:\"DELETE\", url: url, options: options\n            });\n            return this.execute(opts);\n        })\n        .then( () => true)\n        .catch(e => {\n            let err = new Error(`Error deleting item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.remove() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to patch\n     * @param patch - HTTP-PATCH compliant set of properties to patch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    patch (id : string, patch : any, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"PATCH\", url: url, data: patch, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error patching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.patch() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to clone\n     * @param overrides - KVP of property-value overrides to apply to cloned instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving clone of Item or an error\n     */\n    clone (id : string, overrides : any, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( this.baseUrl + '/' + id + '/clone' )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: overrides, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error cloning item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.clone() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    search (arg ?: any, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n            let ps = {};\n            if(params && typeof(params.getQuery) === 'function') ps = params.getQuery();\n            else if(typeof(params) === 'object') ps = params;\n            else ps = {};\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl,\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.search() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     *\n     * @param arg - URL to metadata document or File to upload\n     * @param format - metadata format of specified document\n     * @return Promise resolving GeoPlatform Item\n     */\n    import (arg : any, format : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            if(arg===null || arg === undefined) {\n                throw new Error(\"Must provide a valid URL or File\");\n            }\n            let isFile = typeof(arg) !== 'string';\n            let ro : { [key:string]:any } = {\n                method:\"POST\",\n                url: this.apiBase + '/api/import',\n                processData: true,  //for jQuery\n                formData: true,     //for Node (RequestJS)\n                options: options\n            };\n            if(isFile) {\n                ro.file = arg;\n                ro.data = { format: format };\n            } else {\n                ro.formData = false;    //must be false for data to not be multi-part formdata\n                ro.data = { url: arg, format: format };\n            }\n            if(options && options.overwrite) {\n                ro.data.overwrite = (!!options.overwrite)+'';\n                delete options.overwrite;\n            }\n            let opts = this.buildRequest(ro);\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error importing item: ${e.message}`);\n            Object.assign(err, e);\n            if(e.status === 409 || ~e.message.indexOf('Item already exists'))\n                Object.assign(err, {status: 409});\n            if(e.item)\n                Object.assign(err, { item : e.item });\n            this.logError('ItemService.import() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param id - identifier of the item to export\n     * @param format - string mime type to export\n     * @return Promise resolving HTTP response object for enabling attachment downloading\n     */\n    export (id : string, format : string, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/export';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                params: {format:format},\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            //https://github.com/GeoPlatform/client-api/issues/1\n            if(e.statusCode && e.statusCode===406 || e.statusCode==='406') {\n                msg = `Unsupported export format specified '${format}'`;\n            }\n            let err = new Error(`Error exporting item: ${msg}`);\n            Object.assign(err, e);\n            this.logError('ItemService.export() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param object - GP object definition to generate a URI for\n     * @param options - optional request options\n     * @return Promise resolving string URI\n     */\n    getUri (object : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( object )\n        .then( obj => {\n            if(!obj || !obj.type)\n                throw new Error(\"Must provide an object with a type property\");\n            let url = this.apiBase + '/api/utils/uri';\n            options = options || {};\n            options.responseType = 'text';  //to ensure plaintext is expected\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: obj, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error getting URI for item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getUri() - ' + err.message);\n            throw err;\n        });\n\n    }\n\n\n    /**\n     * @param ids - list of identifiers to fetch objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list of matching items or an error\n     */\n    getMultiple (ids : string[], options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( ids )\n        .then( identifiers => {\n\n            let method = 'POST',\n                url = this.apiBase + '/api/fetch';\n\n            let opts = this.buildRequest({method:method, url:url, data:identifiers, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getMultiple() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param uris - list of URIs to retrieve objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list containing uri-item association where exists\n     */\n    exists(uris : string[], options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(uris)\n        .then( uris => {\n            let method = 'POST', url = this.apiBase + '/api/utils/exists';\n            let opts = this.buildRequest({method:method, url:url, data:uris, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error resolving items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.exists() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    like(item : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/likes';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error liking item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            throw err;\n        });\n    }\n\n    view(item : any, options ?: any) : Promise<any> {\n        return this.createAndResolvePromise(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/views';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error incrementing views for item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to fetch associations for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of associated items of the item in question\n     */\n    associations (id : string, params : any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/associations';\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:url,\n                params: params || {},\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching associations for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.associations() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of item to fetch version info for\n     * @param params - optional set of query parameters to constrain list of versions\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of available versions of the item\n     */\n    versions (id : string, params ?: any, options ?: any) : Promise<any> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/versions';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params: params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching versions for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.versions() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /*\n    getThumbnail ( id : string, options ?: any ) : Promise<any> {\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/thumbnail';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            let err = new Error(`Error getting thumbnail for item: ${msg}`);\n            Object.assign(err, e);\n            this.logError(`ItemService.getThumbnail() - ${msg}`);\n            throw err;\n        });\n    }\n\n    createThumbnail ( id : string, options ?: any ) : Promise<any> {\n        return this.createAndResolvePromise( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/thumbnail';\n            let opts = this.buildRequest({\n                method: \"POST\", url: url,\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            let err = new Error(`Error creating thumbnail for item: ${msg}`);\n            Object.assign(err, e);\n            this.logError(`ItemService.createThumbnail() - ${msg}`);\n            throw err;\n        });\n    }\n    */\n\n\n}\n\nexport default ItemService;\n","\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass DatasetService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/datasets';\n    }\n\n}\n\nexport default DatasetService;\n","\n\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass MapService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/maps';\n    }\n\n\n}\n\nexport default MapService;\n","\n\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass LayerService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/layers';\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving style JSON object\n     */\n    style (id : string, options ?: any) : Promise<any> {\n        return Promise.resolve( id )\n        .then( (id) => {\n\n            let url = this.baseUrl + '/' + id + '/style';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching style: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.style() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param req identifying extent, x, y\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving feature JSON object\n     */\n    describe( id : string, req : any, options ?: any ) : Promise<any> {\n\n        return Promise.resolve( req )\n        .then( (req) => {\n\n            if(!req) {\n                throw new Error(\"Must provide describe parameters to use\");\n            }\n\n            let keys = ['bbox', 'height', 'width', 'x', 'y'];\n            let missing = keys.find(key => !req[key]);\n            if(missing) {\n                throw new Error(`Must specify ${missing} in describe req`);\n            }\n\n            let params = {\n                srs         : 'EPSG:4326',\n                bbox        : req.bbox,\n                height      : req.height,\n                width       : req.width,\n                info_format : 'text/xml',\n                x           : req.x,\n                y           : req.y,\n                i           : req.x, //WMS 1.3.0\n                j           : req.y  //WMS 1.3.0\n            };\n\n            let url = this.baseUrl + '/' + id + '/describe';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing layer feature: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param params describing layer request to validate\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving empty if successful or a message if failed\n     */\n    validate(id : string, params : any, options ?: any) : Promise<any> {\n\n        return Promise.resolve( params )\n        .then( params => {\n\n            if(!params) {\n                throw new Error(\"Must provide parameters to use in layer validation\");\n            }\n\n            let url = this.baseUrl + '/' + id + '/validate';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error validating layer request: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default LayerService;\n","\n\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Service service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate service objects.\n *\n * @see ItemService\n */\n\nclass ServiceService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/services';\n    }\n\n\n    /**\n     * Fetch metadata from the specified GeoPlatform Service's\n     * web-accessible implementation using either GetCapabilities\n     * or ESRI documentInfo.\n     * @param service - GeoPlatform Service object\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving service metadata\n     */\n    about( service : any, options ?: any ) : Promise<any> {\n\n        return Promise.resolve( service )\n        .then( svc => {\n            if(!svc)\n                throw new Error(\"Must provide service to get metadata about\");\n            let opts = this.buildRequest({\n                method:'POST', url:this.baseUrl + '/about', data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.about() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service types\n     */\n    types (options ?: any) : Promise<any> {\n\n        let query = new Query()\n        .types(ItemTypes.STANDARD)\n        .resourceTypes('ServiceType')\n        .pageSize(50)\n        .getQuery();\n\n        return Promise.resolve( query )\n        .then( (params) => {\n            let url = this.apiBase + '/api/items';\n            let opts = this.buildRequest({\n                method:'GET', url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response.results)\n        .catch(e => {\n            let err = new Error(`Error fetching service types: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.types() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param service - GP Service definition\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving imported service\n     */\n    import (service : any, options ?: any) : Promise<any> {\n\n        return Promise.resolve( service )\n        .then( svc => {\n            let url = this.baseUrl + '/import';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error importing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.import() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param id - identifier of GP service to harvest layers for\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service layers\n     */\n    harvest (id : string, options ?: any) : Promise<any> {\n\n        return Promise.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/harvest';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error harvesting layers from service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.harvest() - ' + err.message);\n            throw err;\n        });\n\n    }\n\n    /**\n     * @param id - identifier of GP service to live test\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    liveTest (id : string, options ?: any) : Promise<any> {\n\n        return Promise.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/test';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error testing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.liveTest() - '  + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param id - identifier of GP service to fetch statistics about\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    statistics (id : string, options ?: any) : Promise<any> {\n        return Promise.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/statistics';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting service statistics: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.statistics() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default ServiceService;\n","\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass GalleryService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/galleries';\n    }\n\n    addItem (galleryId : string, itemObj : any, options ?: any) : Promise<any> {\n        return Promise.resolve( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + galleryId + '/items';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data: itemObj, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - ' + err.message);\n            throw err;\n        });\n    }\n\n    removeItem( galleryId : string, itemId : any, options ?: any) : Promise<any> {\n        return Promise.resolve( this.baseUrl + '/' + galleryId + '/items/' + itemId )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:'DELETE', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .then( () =>true)\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - '+ err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default GalleryService;\n","\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\nimport BaseService from './base';\n\n\nclass UtilsService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n        this.setTimeout(30000);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * @param property - optional capa property to specifically request\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving capabilities object\n     */\n    capabilities (property : string|null, query : any, options ?: any) : Promise<any> {\n\n        let url = this.baseUrl + '/api/capabilities';\n        if(property)\n            url += '/' + property;\n\n        return this.createAndResolvePromise( url )\n        .then( (url) => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:query||{}, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting capabilities: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.capabilities() - ' + err.message);\n            throw err;\n        });\n    }\n\n    /**\n     * @param file\n     * @param format\n     * @param options\n     * @return Promise\n     */\n    parseFile (file : any, format : string, options ?: any) : Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/parse';\n\n        return this.createAndResolvePromise( url )\n        .then( url => {\n\n            let opts = this.buildRequest({\n                method:\"POST\",  url:url,\n                data: { format: format },\n                file: file,\n                formData: true,   //NodeJS (RequestJS)\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then( response => response )\n        .catch(e => {\n            let err = new Error(`Error parsing file: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.parseFile() - ' + err.message);\n            throw err;\n        });\n    }\n\n\n    /**\n     * Geolocate the specified argument to a set of candidate locations.\n     * @param value - text string to geolocate (name or lat,lng)\n     * @param options - optional config to send with http request\n     * @return Promise resolving an array of geocoded results\n     */\n    locate(value : any, options ?: any) : Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/gazetteer';\n        return this.createAndResolvePromise(url)\n        .then( url => {\n            let opts = this.buildRequest({\n                method: 'GET',\n                url: url,\n                params: { location: value },\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response)\n        .catch(e => {\n            let err = new Error(`Error resolving location: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.locate() - ' + err.message);\n            throw err;\n        });\n    }\n\n}\n\nexport default UtilsService;\n","\nimport { Item, SearchResults } from '../shared/models';\nimport ItemTypes from '../shared/types';\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\nimport BaseService from \"./base\";\n\nclass AgolQuery {\n\n    private _query : { [key:string]:any };\n\n    constructor() {\n        this._query = {\n            page: 0,\n            size: 10\n        };\n    }\n\n    getQuery() : { [key:string]:any } {\n        let result : { [key:string]:any } = {};\n        for(let prop in this._query) {\n            let value = this._query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    // ---------------------------------------\n\n    q(value : string) : AgolQuery { this.setQ(value); return this; }\n    setQ(value : string) { this._query.q = value; }\n    getQ() : string { return this._query.q; }\n\n    // ---------------------------------------\n\n    types(value : string|string[]) : AgolQuery {\n        this.setTypes(value); return this;\n    }\n    setTypes(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.types = val;\n    }\n    getTypes() : string[] { return this._query.types; }\n\n    // ---------------------------------------\n\n    groups(value : string|string[]) : AgolQuery {\n        this.setGroups(value); return this;\n    }\n    setGroups(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.groups = val;\n    }\n    getGroups() : string[] { return this._query.groups; }\n\n    // ---------------------------------------\n\n    orgs(value : string|string[]) : AgolQuery {\n        this.setOrgs(value); return this;\n    }\n    setOrgs(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.orgs = val;\n    }\n    getOrgs() : string[] { return this._query.orgs; }\n\n    // ---------------------------------------\n\n    extent(value : any) : AgolQuery { this.setExtent(value); return this; }\n    setExtent(value : any) { this._query.bbox = value; }\n    getExtent() : any { return this._query.bbox; }\n\n    // ---------------------------------------\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order : string) : AgolQuery {\n        this.setSort(sort, order); return this;\n    }\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order : string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this._query.sort = sort;\n    }\n    getSort() : string { return this._query.sort; }\n    getSortField() : string { return this._query.sort.split(',')[0]; }\n    getSortOrder() : boolean { return this._query.sort.split(',')[1] === 'asc'; }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : AgolQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this._query.page = page*1;\n    }\n\n    getPage() : number {\n        return this._query.page;\n    }\n\n    nextPage() {\n        this.setPage(this._query.page+1);\n    }\n\n    previousPage() {\n        this.setPage(this._query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size : number) : AgolQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this._query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this._query.size;\n    }\n\n}\n\n\nclass AgolService extends BaseService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n        this.setTimeout(30000);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/agol';\n    }\n\n    // -----------------------------------------------------------------------\n    // AGOL ORGS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL organization to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getOrg (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/orgs/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getOrg() - Error fetching org ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchOrgs (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/orgs',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchOrgs() - Error searching orgs: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL GROUPS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL group to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getGroup (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/groups/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getGroup() - Error fetching group ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchGroups (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/groups',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchGroups() - Error searching groups: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL ITEMS METHODS\n\n    /**\n     * @param id - identifier of AGOL item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getItem (id : string, options ?: any) : Promise<Item> {\n\n        return this.createAndResolvePromise( id )\n        .then( (id : string) => {\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:this.baseUrl + '/items/' + id,\n                options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getItem() - Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchItems (arg : AgolQuery, options ?: any) : Promise<SearchResults> {\n\n        return this.createAndResolvePromise( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/items',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchItems() - Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n    /* --------------------------- */\n\n    getAgolId (obj : any) : string|null {\n        if(!obj) return null;\n\n        if(!obj.type) return null;\n\n        if(ItemTypes.ORGANIZATION === obj.type || 'Group' === obj.type) {\n            return obj.id;\n        }\n\n        if(!obj.identifiers || !obj.identifiers.length) return null;\n        let ids = obj.identifiers.filter( (id:string) => ~id.indexOf('agol:'));\n        if(!ids.length) return null;\n        return ids[0].replace('agol:','');\n    }\n\n}\n\nexport {\n    AgolService as default,\n    AgolService,\n    AgolQuery\n};\n","\n\nimport ItemTypes from '../shared/types';\n\n\nconst Categories : {[key:string]:string} = {\n    UNKNOWN:         'Unknown Category',\n    DATASET:         'Dataset',\n    SERVICE:         'Service',\n    LAYER:           'Layer',\n    MAP:             'Map',\n    GALLERY:         'Gallery',\n    COMMUNITY:       'Community',\n    CONTACT:         'Contact',\n    ORGANIZATION:    'Organization',\n    CONCEPT:         'Concept',\n    CONCEPT_SCHEME:  'Concept Scheme',\n    APPLICATION:     'Application',\n    TOPIC:           'Topic',\n    WEBSITE:         'WebSite',\n    IMAGE_PRODUCT:   'Image Product',\n    RIGHTS_STATEMENT:'RightsStatement',\n    KNOWLEDGE_GRAPH: 'Knowledge Graph',\n    USER:            'User',\n    COMMUNITY_POST:  'Community Post',   //post within a community portal\n    COMMUNITY_PAGE:  'Community Page',   //page within a community portal\n    APP_PAGE:        'Application Page', //page/view within a client application\n};\n\nconst Events : {[key:string]:string} = {\n    ACCESSED:   'Accessed',  //related item was accessed using API\n    DISPLAYED:  'Displayed', //related item was displayed in a native form (map)\n    VIEWED:     'Viewed',    //related item was viewed in general form (metadata)\n    CREATED:    'Created',\n    EDITED:     'Edited',\n    DELETED:    'Deleted',\n    CLONED:     'Cloned',\n    ADDED:      'Added',    //item was added to another (ie, layer on map)\n    REMOVED:    'Removed',  //item was removed from another (ie, item from gallery)\n    EXPORTED:   'Exported',\n    IMPORTED:   'Imported'\n};\n\n\nfunction getCategory(type : string) : string {\n    let result = Categories.UNKNOWN;\n    if(type) {\n        let cats : string[] = Object.keys(Categories).map((k:string)=>Categories[k]);\n        //if existing category was specified\n        if(~cats.indexOf(type))\n            return type;\n        //if an ItemType with prefix was specified (strip off prefix)\n        else if(~type.indexOf(':')) {\n            let cat = type.split(':')[1];\n            if(~cats.indexOf(cat))\n                return cat;\n        }\n    }\n    return result;\n}\n\n\n\n/**\n *\n */\nclass Event {\n\n    private category : string;\n    private type : string;\n    private item : any = null;\n    private related : any = null;\n\n    constructor(category : string, type : string, item ?: any, related ?: any) {\n        if(!category || ! type) {\n            throw new Error(\"TrackingService Event - Must specific an event \" +\n            \"category and event type when constructing events\");\n        }\n        this.category = category;\n        this.type = type;\n        this.setItem(item);\n        this.setRelated(related);\n    }\n    getCategory() : string { return this.category; }\n    getType() : string { return this.type; }\n    getItem() : any { return this.item; }\n    setItem(item : any) { this.item = item ? (item.id || item) : null; }\n    getRelated() : any { return this.related; }\n    setRelated(related : any) {\n        this.related = related ? (related.id || related) : null;\n    }\n}\n\n\n\n/**\n * @param eventType - type of event being created\n * @param item - GeoPlatform Item instance\n * @return list of event objects\n */\nfunction TrackingEventFactory(eventType : string, item : any) : Event[] {\n    let result : Event[] = [] as Event[];\n    if(eventType && item && item.type) {\n        if(ItemTypes.MAP === item.type) {\n            result.push( new Event(Categories.MAP, eventType, item) );\n            if(Events.DISPLAYED === eventType) {\n\n                item.layers.forEach( (layerState : any) => {\n                    if(layerState.layer) {\n                        let layerEvents = TrackingEventFactory(eventType, layerState.layer)\n                            .filter(e=>e!==null);\n                        if(layerEvents && layerEvents.length) {\n                            result = result.concat(layerEvents);\n                        }\n                    }\n                });\n\n                if(item.baseLayer) {\n                    let baseEvents = TrackingEventFactory(eventType, item.baseLayer)\n                        .filter(e=>e!==null);\n                    if(baseEvents && baseEvents.length)\n                        result = result.concat( baseEvents );\n                }\n            }\n\n        } else if(ItemTypes.LAYER === item.type) {\n            result.push( new Event(Categories.LAYER, eventType, item) );\n            if(Events.DISPLAYED === eventType && item.services && item.services.length) {\n                result.push( new Event(Categories.SERVICE, eventType, item.services[0]) );\n            }\n        } else {\n            let category = getCategory(item.type);\n            result.push( new Event(category, eventType, item) );\n        }\n    }\n    // else {\n    //     if(!event) console.log(\"Missing event\");\n    //     if(!item) console.log(\"Missing item\");\n    //     if(!item.type) console.log(\"Missing item type\");\n    // }\n    return result;\n}\n\n\n\n\n\n/**\n *\n */\nclass DefaultTrackingServiceProvider {\n    constructor() {}\n    logEvent(\n        category : string,\n        event : string,\n        item ?: any,\n        // @ts-ignore\n        related ?: any\n    ) {\n        console.log( \"Event (\" + category + \") - \" + event + \" : \" + item);\n    }\n    logPageView( view, data ) {\n        console.log(\"Page View \" + view + (data ? \" : \" + JSON.stringify(data) : '') );\n    }\n    logSearch(params : string, resultCount : string|number) {\n        console.log( \"Query : \" + JSON.stringify(params) + \" found \" + resultCount+ \" matches\");\n    }\n}\n\n\n\n\n\n\n/**\n * TrackingService\n *\n * Service for logging events related to usage of the GeoPlatform and its data\n *\n * Example:\n *\n *   import { TrackingService, EventCategories, EventTypes } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *   tracker.event( Event.of(EventCategories.MAP, EventTypes.VIEWED, map) );\n *\n * Multi-event example:\n *\n *   import {\n *      TrackingService, TrackingEventCategories, TrackingEventTypes, TrackingEventFactory\n *   } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *\n *   let events = [\n *       TrackingEvent.of( TrackingCategories.MAP, TrackingEventTypes.VIEWED, this.map )\n *       TrackingEvent.of( TrackingCategories.LAYER, TrackingEventTypes.VIEWED, this.map.baseLayer )\n *   ];\n *   tracker.event(events);\n *\n *   //OR use the event factory:\n *   tracker.event( TrackingEventFactory(EventTypes.VIEWED, this.map) );\n */\nclass TrackingService {\n\n    private provider : any = null;\n\n    constructor(options ?: any) {\n        if(options && typeof(options) === 'object')\n            Object.assign(this, options);\n\n        if(!this.provider)\n            this.setProvider(new DefaultTrackingServiceProvider());\n    }\n\n    /**\n     * @param provider -\n     */\n    setProvider(provider : any) {\n        if(provider)\n            this.provider = provider;\n    }\n\n    /**\n     * @param event - event to log\n     * @return TrackingService\n     */\n    event( event : Event ) : TrackingService {\n        this.logEvent( event );\n        return this;\n    }\n\n    /**\n     * @param event - event to log\n     */\n    logEvent( event : Event|Event[]) {\n        if(!this.provider || !this.provider.logEvent || !event) return;\n\n        if(Array.isArray(event)) {\n            let events : Event[] = event as Event[];\n            events.forEach( (evt : Event) => this.logEvent(evt) );\n\n        } else {\n            let evt : Event = event as Event;\n            try {\n                this.provider.logEvent(\n                    evt.getCategory(),\n                    evt.getType(),\n                    evt.getItem(),\n                    evt.getRelated()\n                );\n            } catch(e) {\n                console.log(\n                    \"TrackingService.logEvent() - Error logging event (\" +\n                    evt.getCategory() + \", \" + evt.getType() + \", \" +\n                    evt.getItem() + \") - \" + e.message\n                );\n            }\n        }\n    }\n\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @return TrackingService\n     * @deprecated use svc.event( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    pageView( view : string, data : any) {\n        this.logPageView(view, data);\n        return this;\n    }\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @deprecated use svc.logEvent( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    logPageView(\n        view : string,\n        // @ts-ignore\n        data ?: any\n    ) {\n        if(this.provider && this.provider.logPageView) {\n            this.provider.logPageView(view, data);\n        } else {\n            this.logEvent( new Event(Categories.APP_PAGE, Events.VIEWED, view) );\n        }\n    }\n\n    /**\n     * @param params\n     * @param resultCount\n     */\n    logSearch (params : any, resultCount : string|number) {\n        if(this.provider.logSearch)\n            this.provider.logSearch(params, resultCount);\n    }\n\n}\n\n\nexport {\n    Event as TrackingEvent,\n    TrackingService,\n    Categories as TrackingCategories,\n    Events as TrackingTypes,\n    TrackingEventFactory\n};\n","\nimport Config from '../shared/config';\nimport KGQuery from '../shared/kg-query';\nimport GPHttpClient from '../http/client';\n\nclass KGService {\n\n    // @ts-ignore\n    private apiBase : string;\n    // @ts-ignore\n    private baseUrl : string;\n    private client : GPHttpClient;\n    private timeout : number = 30000;\n    private httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n    }\n\n    setUrl(baseUrl : string) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/recommender';\n    }\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving recommended concepts as search results\n     */\n    suggest (query : KGQuery, options ?: any) : Promise<any> {\n        let url = this.baseUrl + '/suggest';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.suggest() - Error suggesting concepts: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept types as search results\n     */\n    types (query : KGQuery, options ?: any) : Promise<any> {\n        let url = this.baseUrl + '/types';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.types() - Error searching types: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept sources as search results\n     */\n    sources (query : KGQuery, options ?: any) : Promise<any> {\n        let url = this.baseUrl + '/sources';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.sources() - Error searching sources: ${e.message}`);\n            Object.assign(err, e);\n            throw err;\n        });\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n\n    /**\n     * internal method used by exposed methods\n     */\n    _search (url : string, query : KGQuery, options ?: any) : Promise<any> {\n        return Promise.resolve( true )\n        .then( () => {\n            let q : { [key:string]:any } = query.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:q, options:options\n            });\n            return this.execute(opts);\n        });\n    }\n\n\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout || Config.timeout || 30000;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts : {[key:string]:any}) : Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"KGService.execute() - Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            throw e;\n        });\n    }\n\n}\n\nexport default KGService;\n","\nfunction apply() {\n    if (typeof Object.assign != 'function') {\n      // Must be writable: true, enumerable: false, configurable: true\n      Object.defineProperty(Object, \"assign\", {\n        value: function assign(target : any, varArgs : any[]) { // .length of function is 2\n\n          if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          if(varArgs) { }\n          var to = Object(target);\n\n          for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource != null) { // Skip over if undefined or null\n              for (var nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n          return to;\n        },\n        writable: true,\n        configurable: true\n      });\n    }\n}\n\n\nexport default function polyfills() {\n    apply();\n};\n","\n/*\n    Version of the library exposed to consumers.\n    Long-term this value should be auto-set to be whatever is set in package.json\n */\nexport const ClientVersion = \"0.3.0\";\n\nimport Polyfills from \"./shared/polyfills\";\nPolyfills();\n\nexport * from './shared/index';\nexport * from './http/index';\nexport * from './services/index';\n","\nimport Query from './query';\n\nexport default function queryFactory() {\n    return new Query();\n}\n","\nimport GPHttpClient from '../http/client';\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport LayerService from './layer';\nimport ServiceService from './service';\nimport GalleryService from './gallery';\nimport DatasetService from './dataset';\nimport MapService from './map';\n\n/**\n * @param arg - string type or object with type property\n * @param baseUrl - base endpoint of GeoPlatform API\n * @return ItemService\n */\nconst ServiceFactory = function(arg : any, baseUrl : string, httpClient : GPHttpClient) : any {\n    let type = (typeof(arg) === 'string') ?\n        arg : (arg && arg.type ? arg.type : null);\n    if(!type) throw new Error(\"Must provide a type or object with a type specified\");\n    if(!baseUrl) throw new Error(\"Must provide a base url\");\n    if(!httpClient) throw new Error(\"Must provide an http client to use to make requests\");\n    switch(type) {\n        case ItemTypes.LAYER:   return new LayerService(  baseUrl, httpClient);\n        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);\n        case ItemTypes.MAP:     return new MapService(    baseUrl, httpClient);\n        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);\n        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);\n        default:                return new ItemService(   baseUrl, httpClient);\n    }\n};\n\nexport default ServiceFactory;\n"]}