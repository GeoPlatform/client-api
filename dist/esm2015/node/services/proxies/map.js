/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { MapService } from "@geoplatform/client";
import ServiceProxy from "./base";
const ɵ0 = function (svc, req) {
    return svc.search(req.query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
// @ts-ignore
result, res) {
    res.status(204).end();
}, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ8 = function (result, res) {
    /** @type {?} */
    let mimeType = result.headers['content-type'];
    /** @type {?} */
    let disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
};
/** @type {?} */
const Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'maps',
        auth: false,
        execFn: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'maps/:id',
        auth: false,
        execFn: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'maps',
        auth: true,
        execFn: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'maps/:id',
        auth: true,
        execFn: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'maps/:id',
        auth: true,
        execFn: ɵ4,
        respFn: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'maps/:id',
        auth: true,
        execFn: ɵ6
    },
    {
        key: 'export',
        method: 'get',
        path: 'maps/:id/export',
        auth: false,
        execFn: ɵ7,
        respFn: ɵ8
    }
];
/**
 * MapServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 * @param {?=} options
 * @return {?}
 */
function MapServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    /** @type {?} */
    let router = options.router;
    if (!options.router) {
        /** @type {?} */
        let express = require('express');
        if (!express) {
            throw new Error("MapServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("MapServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = MapService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default MapServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdlb3BsYXRmb3JtL2NsaWVudC9ub2RlLyIsInNvdXJjZXMiOlsic2VydmljZXMvcHJveGllcy9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLFlBQVksTUFBTSxRQUFRLENBQUM7V0FRbEIsVUFBUyxHQUFnQixFQUFFLEdBQVM7SUFDeEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNoQyxPQU9PLFVBQVMsR0FBZ0IsRUFBRSxHQUFTO0lBQ3hDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ2pDLE9BT08sVUFBUyxHQUFnQixFQUFFLEdBQVM7SUFDeEMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM3QixPQU9PLFVBQVMsR0FBZ0IsRUFBRSxHQUFTO0lBQ3hDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDN0IsT0FPTyxVQUFTLEdBQWdCLEVBQUUsR0FBUztJQUN4QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUFFLE9BRS9COztBQUVKLEFBREEsYUFBYTtBQUNiLE1BQVksRUFDWixHQUFTO0lBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUN6QixPQU9PLFVBQVMsR0FBZ0IsRUFBRSxHQUFTO0lBQ3hDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDN0MsT0FPTyxV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QjtBQUVELGVBQWUsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7TWFwU2VydmljZX0gZnJvbSBcIkBnZW9wbGF0Zm9ybS9jbGllbnRcIjtcbmltcG9ydCBTZXJ2aWNlUHJveHkgZnJvbSBcIi4vYmFzZVwiO1xuXG5jb25zdCBSb3V0ZXMgPSBbXG4gICAge1xuICAgICAgICBrZXk6ICdzZWFyY2gnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnbWFwcycsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBleGVjRm46IGZ1bmN0aW9uKHN2YyA6IE1hcFNlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5zZWFyY2gocmVxLnF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdnZXQnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnbWFwcy86aWQnLFxuICAgICAgICBhdXRoOiBmYWxzZSxcbiAgICAgICAgZXhlY0ZuOiBmdW5jdGlvbihzdmMgOiBNYXBTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0KHJlcS5wYXJhbXMuaWQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2NyZWF0ZScsXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBwYXRoOiAnbWFwcycsXG4gICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogTWFwU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnNhdmUocmVxLmJvZHkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ3VwZGF0ZScsXG4gICAgICAgIG1ldGhvZDogJ3B1dCcsXG4gICAgICAgIHBhdGg6ICdtYXBzLzppZCcsXG4gICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogTWFwU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnNhdmUocmVxLmJvZHkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2RlbGV0ZScsXG4gICAgICAgIG1ldGhvZDogJ2RlbGV0ZScsXG4gICAgICAgIHBhdGg6ICdtYXBzLzppZCcsXG4gICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogTWFwU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnJlbW92ZShyZXEucGFyYW1zLmlkKTsgfVxuICAgICAgICAgICAgLFxuICAgICAgICByZXNwRm46IGZ1bmN0aW9uKFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmVzdWx0IDogYW55LFxuICAgICAgICAgICAgcmVzIDogYW55KSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwNCkuZW5kKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAncGF0Y2gnLFxuICAgICAgICBtZXRob2Q6ICdwYXRjaCcsXG4gICAgICAgIHBhdGg6ICdtYXBzLzppZCcsXG4gICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogTWFwU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnBhdGNoKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdleHBvcnQnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnbWFwcy86aWQvZXhwb3J0JyxcbiAgICAgICAgYXV0aDogZmFsc2UsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogTWFwU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLmV4cG9ydChyZXEucGFyYW1zLmlkLCByZXEucXVlcnkuZm9ybWF0KTsgfVxuICAgICAgICAgICAgLFxuICAgICAgICByZXNwRm46IGZ1bmN0aW9uKHJlc3VsdCA6IGFueSwgcmVzIDogYW55KSB7XG4gICAgICAgICAgICBsZXQgbWltZVR5cGUgPSByZXN1bHQuaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gICAgICAgICAgICBsZXQgZGlzcG9zaXRpb24gPSByZXN1bHQuaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddO1xuICAgICAgICAgICAgcmVzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBtaW1lVHlwZSk7XG4gICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LWRpc3Bvc2l0aW9uJywgZGlzcG9zaXRpb24pO1xuICAgICAgICAgICAgcmVzLnNlbmQocmVzdWx0LmJvZHkpO1xuICAgICAgICB9XG4gICAgfVxuXTtcblxuLyoqXG4gKiBNYXBTZXJ2aWNlUHJveHlcbiAqXG4gKiBzZWUgZXhhbXBsZXMvbm9kZS9pdGVtLXByb3h5IGZvciBhbiBpbi1kZXB0aCBleGFtcGxlXG4gKi9cbmZ1bmN0aW9uIE1hcFNlcnZpY2VQcm94eSggb3B0aW9ucyA/OiBhbnkgKSB7XG5cbiAgICBpZih0eXBlb2Yob3B0aW9ucykgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9O1xuXG4gICAgbGV0IHJvdXRlciA9IG9wdGlvbnMucm91dGVyO1xuICAgIGlmKCFvcHRpb25zLnJvdXRlcikge1xuICAgICAgICBsZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbiAgICAgICAgaWYoIWV4cHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hcFNlcnZpY2VQcm94eSgpIC0gTXVzdCBwcm92aWRlXCIgK1xuICAgICAgICAgICAgICAgIFwiJ29wdGlvbnMucm91dGVyJyBvciBpbmNsdWRlIGV4cHJlc3MgYXMgYSBkZXBlbmRlbmN5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgfVxuXG4gICAgaWYoIXJvdXRlcikgdGhyb3cgbmV3IEVycm9yKFwiTWFwU2VydmljZVByb3h5KCkgLSBcIiArXG4gICAgICAgIFwiVW5hYmxlIHRvIGNyZWF0ZSBwcm94eSByb3V0ZSwgbWlzc2luZyByb3V0ZXJcIik7XG5cbiAgICBvcHRpb25zLnNlcnZpY2VDbGFzcyA9IE1hcFNlcnZpY2U7XG4gICAgU2VydmljZVByb3h5LmJpbmRSb3V0ZXMocm91dGVyLCBSb3V0ZXMsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHJvdXRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwU2VydmljZVByb3h5O1xuIl19