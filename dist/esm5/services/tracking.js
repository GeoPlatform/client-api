import ItemTypes from '../shared/types';
var Categories = {
    UNKNOWN: 'Unknown Category',
    DATASET: 'Dataset',
    SERVICE: 'Service',
    LAYER: 'Layer',
    MAP: 'Map',
    GALLERY: 'Gallery',
    COMMUNITY: 'Community',
    CONTACT: 'Contact',
    ORGANIZATION: 'Organization',
    CONCEPT: 'Concept',
    CONCEPT_SCHEME: 'Concept Scheme',
    APPLICATION: 'Application',
    TOPIC: 'Topic',
    WEBSITE: 'WebSite',
    IMAGE_PRODUCT: 'Image Product',
    RIGHTS_STATEMENT: 'RightsStatement',
    KNOWLEDGE_GRAPH: 'Knowledge Graph',
    USER: 'User',
    COMMUNITY_POST: 'Community Post',
    COMMUNITY_PAGE: 'Community Page',
    APP_PAGE: 'Application Page',
};
var Events = {
    ACCESSED: 'Accessed',
    DISPLAYED: 'Displayed',
    VIEWED: 'Viewed',
    CREATED: 'Created',
    EDITED: 'Edited',
    DELETED: 'Deleted',
    CLONED: 'Cloned',
    ADDED: 'Added',
    REMOVED: 'Removed',
    EXPORTED: 'Exported',
    IMPORTED: 'Imported'
};
function getCategory(type) {
    var result = Categories.UNKNOWN;
    if (type) {
        var cats = Object.keys(Categories).map(function (k) { return Categories[k]; });
        //if existing category was specified
        if (~cats.indexOf(type))
            return type;
        //if an ItemType with prefix was specified (strip off prefix)
        else if (~type.indexOf(':')) {
            var cat = type.split(':')[1];
            if (~cats.indexOf(cat))
                return cat;
        }
    }
    return result;
}
/**
 *
 */
var Event = /** @class */ (function () {
    function Event(category, type, item, related) {
        this.item = null;
        this.related = null;
        if (!category || !type) {
            throw new Error("TrackingService Event - Must specific an event " +
                "category and event type when constructing events");
        }
        this.category = category;
        this.type = type;
        this.setItem(item);
        this.setRelated(related);
    }
    Event.prototype.getCategory = function () { return this.category; };
    Event.prototype.getType = function () { return this.type; };
    Event.prototype.getItem = function () { return this.item; };
    Event.prototype.setItem = function (item) { this.item = item ? (item.id || item) : null; };
    Event.prototype.getRelated = function () { return this.related; };
    Event.prototype.setRelated = function (related) {
        this.related = related ? (related.id || related) : null;
    };
    return Event;
}());
/**
 * @param eventType - type of event being created
 * @param item - GeoPlatform Item instance
 * @return list of event objects
 */
function TrackingEventFactory(eventType, item) {
    var result = [];
    if (eventType && item && item.type) {
        if (ItemTypes.MAP === item.type) {
            result.push(new Event(Categories.MAP, eventType, item));
            if (Events.DISPLAYED === eventType) {
                item.layers.forEach(function (layerState) {
                    if (layerState.layer) {
                        var layerEvents = TrackingEventFactory(eventType, layerState.layer)
                            .filter(function (e) { return e !== null; });
                        if (layerEvents && layerEvents.length) {
                            result = result.concat(layerEvents);
                        }
                    }
                });
                if (item.baseLayer) {
                    var baseEvents = TrackingEventFactory(eventType, item.baseLayer)
                        .filter(function (e) { return e !== null; });
                    if (baseEvents && baseEvents.length)
                        result = result.concat(baseEvents);
                }
            }
        }
        else if (ItemTypes.LAYER === item.type) {
            result.push(new Event(Categories.LAYER, eventType, item));
            if (Events.DISPLAYED === eventType && item.services && item.services.length) {
                result.push(new Event(Categories.SERVICE, eventType, item.services[0]));
            }
        }
        else {
            var category = getCategory(item.type);
            result.push(new Event(category, eventType, item));
        }
    }
    // else {
    //     if(!event) console.log("Missing event");
    //     if(!item) console.log("Missing item");
    //     if(!item.type) console.log("Missing item type");
    // }
    return result;
}
/**
 *
 */
var DefaultTrackingServiceProvider = /** @class */ (function () {
    function DefaultTrackingServiceProvider() {
    }
    DefaultTrackingServiceProvider.prototype.logEvent = function (category, event, item, 
    // @ts-ignore
    related) {
        console.log("Event (" + category + ") - " + event + " : " + item);
    };
    DefaultTrackingServiceProvider.prototype.logPageView = function (view, data) {
        console.log("Page View " + view + (data ? " : " + JSON.stringify(data) : ''));
    };
    DefaultTrackingServiceProvider.prototype.logSearch = function (params, resultCount) {
        console.log("Query : " + JSON.stringify(params) + " found " + resultCount + " matches");
    };
    return DefaultTrackingServiceProvider;
}());
/**
 * TrackingService
 *
 * Service for logging events related to usage of the GeoPlatform and its data
 *
 * Example:
 *
 *   import { TrackingService, EventCategories, EventTypes } from 'geoplatform.client';
 *
 *   let tracker = new TrackingService();
 *   tracker.setProvider( ... );
 *   tracker.event( Event.of(EventCategories.MAP, EventTypes.VIEWED, map) );
 *
 * Multi-event example:
 *
 *   import {
 *      TrackingService, TrackingEventCategories, TrackingEventTypes, TrackingEventFactory
 *   } from 'geoplatform.client';
 *
 *   let tracker = new TrackingService();
 *   tracker.setProvider( ... );
 *
 *   let events = [
 *       TrackingEvent.of( TrackingCategories.MAP, TrackingEventTypes.VIEWED, this.map )
 *       TrackingEvent.of( TrackingCategories.LAYER, TrackingEventTypes.VIEWED, this.map.baseLayer )
 *   ];
 *   tracker.event(events);
 *
 *   //OR use the event factory:
 *   tracker.event( TrackingEventFactory(EventTypes.VIEWED, this.map) );
 */
var TrackingService = /** @class */ (function () {
    function TrackingService(options) {
        this.provider = null;
        if (options && typeof (options) === 'object')
            Object.assign(this, options);
        if (!this.provider)
            this.setProvider(new DefaultTrackingServiceProvider());
    }
    /**
     * @param provider -
     */
    TrackingService.prototype.setProvider = function (provider) {
        if (provider)
            this.provider = provider;
    };
    /**
     * @param event - event to log
     * @return TrackingService
     */
    TrackingService.prototype.event = function (event) {
        this.logEvent(event);
        return this;
    };
    /**
     * @param event - event to log
     */
    TrackingService.prototype.logEvent = function (event) {
        var _this = this;
        if (!this.provider || !this.provider.logEvent || !event)
            return;
        if (Array.isArray(event)) {
            var events = event;
            events.forEach(function (evt) { return _this.logEvent(evt); });
        }
        else {
            var evt = event;
            try {
                this.provider.logEvent(evt.getCategory(), evt.getType(), evt.getItem(), evt.getRelated());
            }
            catch (e) {
                console.log("TrackingService.logEvent() - Error logging event (" +
                    evt.getCategory() + ", " + evt.getType() + ", " +
                    evt.getItem() + ") - " + e.message);
            }
        }
    };
    /**
     * @param view - name of the view being activated
     * @param data - additional context to supply for the event
     * @return TrackingService
     * @deprecated use svc.event( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )
     */
    TrackingService.prototype.pageView = function (view, data) {
        this.logPageView(view, data);
        return this;
    };
    /**
     * @param view - name of the view being activated
     * @param data - additional context to supply for the event
     * @deprecated use svc.logEvent( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )
     */
    TrackingService.prototype.logPageView = function (view, 
    // @ts-ignore
    data) {
        if (this.provider && this.provider.logPageView) {
            this.provider.logPageView(view, data);
        }
        else {
            this.logEvent(new Event(Categories.APP_PAGE, Events.VIEWED, view));
        }
    };
    /**
     * @param params
     * @param resultCount
     */
    TrackingService.prototype.logSearch = function (params, resultCount) {
        if (this.provider.logSearch)
            this.provider.logSearch(params, resultCount);
    };
    return TrackingService;
}());
export { Event as TrackingEvent, TrackingService, Categories as TrackingCategories, Events as TrackingTypes, TrackingEventFactory };
//# sourceMappingURL=data:application/json;base64,