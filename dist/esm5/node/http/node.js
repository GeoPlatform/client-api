import * as tslib_1 from "tslib";
import { GPHttpClient } from '@geoplatform/client';
var NodeHttpClient = /** @class */ (function (_super) {
    tslib_1.__extends(NodeHttpClient, _super);
    /**
     * @param options.timeout
     * @param options.token - the bearer token or a function to retrieve it
     */
    function NodeHttpClient(options) {
        return _super.call(this, options) || this;
    }
    /**
     * @param options - request configuration
     * @return request object
     */
    NodeHttpClient.prototype.createRequestOpts = function (options) {
        var opts = {
            method: options.method,
            url: options.url,
            json: false !== options.json,
            timeout: options.timeout || this.timeout
        };
        if (options.params) {
            opts.qs = options.params;
        }
        if (options.file) {
            var fs = require('fs');
            if (!fs)
                throw new Error("Module 'fs' not available");
            opts.formData = {
                file: {
                    value: fs.createReadStream(options.file.path),
                    options: {
                        filename: options.file.originalFilename
                    }
                }
            };
            Object.assign(opts.formData, options.data || {});
        }
        else if (options.data) {
            if (options.formData) {
                opts.formData = options.data;
            }
            else {
                opts.body = options.data;
            }
        }
        if (options.headers) {
            opts.headers = options.headers;
        }
        //set authorization header if one was provided
        if (this.token) {
            var token = this.token();
            if (token) {
                opts.auth = { 'bearer': token };
            }
        }
        //copy over user-supplied options
        if (options.options) {
            for (var o in options.options) {
                if (options.options.hasOwnProperty(o)) {
                    opts[o] = options.options[o];
                }
            }
        }
        // console.log(JSON.stringify(opts));
        return opts;
    };
    /**
     *
     */
    NodeHttpClient.prototype.execute = function (options) {
        var _this = this;
        var request = require('request');
        // require('request-debug')(request);
        if (!request) {
            throw new Error("Module 'request' not available");
        }
        return new Promise(function (resolve, reject) {
            request(options, function (error, response, body) {
                _this.checkAndHandleError(error, response)
                    .then(function () {
                    if (options.json === false)
                        resolve(response);
                    else
                        resolve(body);
                })
                    .catch(function (e) { return reject(e); });
            });
        });
    };
    /**
     *
     */
    NodeHttpClient.prototype.checkAndHandleError = function (error, response) {
        var props = {
            message: null,
            error: null,
            status: 200
        };
        if (error) {
            // Logger.debug("Error generated by request library: " + error.code);
            if (error.code === 'ETIMEDOUT' || error.code === 'ESOCKETTIMEDOUT') {
                props.status = 500;
                props.error = "Connection Timeout";
                props.message = "The response from the service took too long to read";
                if (error.connect === true) {
                    props.message = "Unable to establish a connection to the service";
                }
            }
            else {
                return Promise.reject(error);
            }
        }
        else if (response.statusCode < 200 || response.statusCode > 204) {
            // Logger.debug('Error returned by remote endpoint (' + response.statusCode + ')');
            // Logger.debug(JSON.stringify(response));
            props.status = response.statusCode;
            if (response.body && typeof (response.body) === 'object') {
                props = response.body;
                props.status = props.status || response.statusCode;
                props.message = props.message || "An error occurred communicating with service";
                if (response.statusCode === 409) {
                    var sidx = response.body.message.indexOf(" ");
                    var eidx = response.body.message.indexOf(' already exists');
                    if (sidx >= 0 && eidx > sidx) {
                        props.item = response.body.message.substring(sidx + 1, eidx);
                    }
                }
            }
            else {
                switch (response.statusCode) {
                    case 404:
                        props.error = "Not Found";
                        props.message = response.request.uri.pathname + " cannot be found";
                        break;
                    case 401:
                        props.error = "Unauthenticated";
                        props.message = "You are not authenticated";
                        break;
                    case 403:
                        props.error = "Unauthorized";
                        props.message = "You are not authorized to access " + response.request.uri.pathname;
                        break;
                    case 409:
                        props.error = "Conflict";
                        props.message = "Item already exists";
                        // pattern received is: { ..., message: 'Resource <identifier> already exists', ... }
                        try {
                            var json = JSON.parse(response.body);
                            var sidx = json.message.indexOf(" ");
                            var eidx = json.message.indexOf(' already exists');
                            if (sidx >= 0 && eidx > sidx) {
                                props.item = json.message.substring(sidx + 1, eidx);
                            }
                        }
                        catch (e) {
                            props.message += '.  Unable to extract existing identifier from service response';
                        }
                        break;
                    default:
                        try {
                            var json = JSON.parse(response.body);
                            props = json;
                            props.status = response.statusCode;
                            // Logger.debug("PARSED ERROR: " + JSON.stringify(props));
                        }
                        catch (e) {
                            props.error = "Server Error";
                            props.message = response.body;
                            // Logger.debug("DEFAULTED ERROR: " + JSON.stringify(props));
                        }
                }
            }
        }
        if (props.status < 200 || props.status > 204) {
            props.error = props.error || "Server Error";
            props.status = props.status || response.statusCode;
            props.message = props.message || "An error occurred communicating with service";
            var err = new Error(props.message);
            Object.assign(err, props);
            // Logger.debug("UTILS.checkAndHandleError : " + err);
            // Logger.debug("UTILS.checkAndHandleError : " + JSON.stringify(err));
            // Logger.debug("UTILS.checkAndHandleError : " + err.message);
            return Promise.reject(err);
        }
        return Promise.resolve(null);
    };
    return NodeHttpClient;
}(GPHttpClient));
export default NodeHttpClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW9wbGF0Zm9ybS9jbGllbnQvbm9kZS8iLCJzb3VyY2VzIjpbImh0dHAvbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR25EO0lBQTZCLDBDQUFZO0lBRXJDOzs7T0FHRztJQUNILHdCQUFZLE9BQWlDO2VBQ3pDLGtCQUFNLE9BQU8sQ0FBQztJQUNsQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMENBQWlCLEdBQWpCLFVBQWtCLE9BQWdDO1FBRTlDLElBQUksSUFBSSxHQUF5QjtZQUM3QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07WUFDdEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1lBQ2hCLElBQUksRUFBRSxLQUFLLEtBQUssT0FBTyxDQUFDLElBQUk7WUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU87U0FDM0MsQ0FBQztRQUVGLElBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztTQUM1QjtRQUVELElBQUcsT0FBTyxDQUFDLElBQUksRUFBRTtZQUNiLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFHLENBQUMsRUFBRTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRztnQkFDWixJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDOUMsT0FBTyxFQUFFO3dCQUNMLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtxQkFDMUM7aUJBQ0o7YUFDSixDQUFDO1lBQ0YsTUFB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ME54QztBQUdELGVBQWUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBHUEh0dHBDbGllbnQgfSBmcm9tICdAZ2VvcGxhdGZvcm0vY2xpZW50JztcblxuXG5jbGFzcyBOb2RlSHR0cENsaWVudCBleHRlbmRzIEdQSHR0cENsaWVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50aW1lb3V0XG4gICAgICogQHBhcmFtIG9wdGlvbnMudG9rZW4gLSB0aGUgYmVhcmVyIHRva2VuIG9yIGEgZnVuY3Rpb24gdG8gcmV0cmlldmUgaXRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID86IHsgW2tleTpzdHJpbmddIDogYW55IH0pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSByZXF1ZXN0IGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcmV0dXJuIHJlcXVlc3Qgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlUmVxdWVzdE9wdHMob3B0aW9ucyA6IHsgW2tleTpzdHJpbmddIDogYW55IH0pIDogYW55IHtcblxuICAgICAgICBsZXQgb3B0cyA6IHtba2V5OnN0cmluZ106IGFueX0gPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybCxcbiAgICAgICAgICAgIGpzb246IGZhbHNlICE9PSBvcHRpb25zLmpzb24sXG4gICAgICAgICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgfHwgdGhpcy50aW1lb3V0XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYob3B0aW9ucy5wYXJhbXMpIHtcbiAgICAgICAgICAgIG9wdHMucXMgPSBvcHRpb25zLnBhcmFtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKG9wdGlvbnMuZmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgICAgICAgICAgaWYoIWZzKSB0aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUgJ2ZzJyBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgb3B0cy5mb3JtRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgZnMuY3JlYXRlUmVhZFN0cmVhbShvcHRpb25zLmZpbGUucGF0aCksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBvcHRpb25zLmZpbGUub3JpZ2luYWxGaWxlbmFtZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0cy5mb3JtRGF0YSwgb3B0aW9ucy5kYXRhfHx7fSk7XG5cbiAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMuZGF0YSkge1xuICAgICAgICAgICAgaWYob3B0aW9ucy5mb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgIG9wdHMuZm9ybURhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdHMuYm9keSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgb3B0cy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zZXQgYXV0aG9yaXphdGlvbiBoZWFkZXIgaWYgb25lIHdhcyBwcm92aWRlZFxuICAgICAgICBpZih0aGlzLnRva2VuKSB7XG4gICAgICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLnRva2VuKCk7XG4gICAgICAgICAgICBpZih0b2tlbikge1xuICAgICAgICAgICAgICAgIG9wdHMuYXV0aCA9IHsgJ2JlYXJlcic6IHRva2VuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NvcHkgb3ZlciB1c2VyLXN1cHBsaWVkIG9wdGlvbnNcbiAgICAgICAgaWYob3B0aW9ucy5vcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IobGV0IG8gaW4gb3B0aW9ucy5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy5vcHRpb25zLmhhc093blByb3BlcnR5KG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHNbb10gPSBvcHRpb25zLm9wdGlvbnNbb107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkob3B0cykpO1xuXG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGV4ZWN1dGUob3B0aW9ucyA6IGFueSkgOiBQcm9taXNlPGFueT4ge1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG4gICAgICAgIC8vIHJlcXVpcmUoJ3JlcXVlc3QtZGVidWcnKShyZXF1ZXN0KTtcbiAgICAgICAgaWYoIXJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZHVsZSAncmVxdWVzdCcgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0KG9wdGlvbnMsIChlcnJvciA6IGFueSwgcmVzcG9uc2UgOiBhbnksIGJvZHkgOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQW5kSGFuZGxlRXJyb3IoZXJyb3IsIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIC50aGVuKCAoKSA9PiAge1xuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmpzb24gPT09IGZhbHNlKSByZXNvbHZlKCByZXNwb25zZSApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJlc29sdmUoIGJvZHkgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCggZSA9PiByZWplY3QoZSkgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjaGVja0FuZEhhbmRsZUVycm9yIChlcnJvciA6IGFueSwgcmVzcG9uc2UgOiBhbnkpIDogUHJvbWlzZTxhbnk+IHtcblxuICAgICAgICBsZXQgcHJvcHMgOiB7IFtrZXk6c3RyaW5nXTogYW55IH0gPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBudWxsLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsICAgIC8vZXJyb3IgdHlwZVxuICAgICAgICAgICAgc3RhdHVzOiAyMDBcbiAgICAgICAgfTtcblxuICAgICAgICBpZihlcnJvcikge1xuICAgICAgICAgICAgLy8gTG9nZ2VyLmRlYnVnKFwiRXJyb3IgZ2VuZXJhdGVkIGJ5IHJlcXVlc3QgbGlicmFyeTogXCIgKyBlcnJvci5jb2RlKTtcblxuICAgICAgICAgICAgaWYoZXJyb3IuY29kZSA9PT0gJ0VUSU1FRE9VVCcgfHwgZXJyb3IuY29kZSA9PT0gJ0VTT0NLRVRUSU1FRE9VVCcpIHtcblxuICAgICAgICAgICAgICAgIHByb3BzLnN0YXR1cyA9IDUwMDtcbiAgICAgICAgICAgICAgICBwcm9wcy5lcnJvciA9IFwiQ29ubmVjdGlvbiBUaW1lb3V0XCI7XG4gICAgICAgICAgICAgICAgcHJvcHMubWVzc2FnZSA9IFwiVGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZpY2UgdG9vayB0b28gbG9uZyB0byByZWFkXCI7XG5cbiAgICAgICAgICAgICAgICBpZihlcnJvci5jb25uZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLm1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2aWNlXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmKHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA+IDIwNCkge1xuXG4gICAgICAgICAgICAvLyBMb2dnZXIuZGVidWcoJ0Vycm9yIHJldHVybmVkIGJ5IHJlbW90ZSBlbmRwb2ludCAoJyArIHJlc3BvbnNlLnN0YXR1c0NvZGUgKyAnKScpO1xuICAgICAgICAgICAgLy8gTG9nZ2VyLmRlYnVnKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG5cbiAgICAgICAgICAgIHByb3BzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG5cbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLmJvZHkgJiYgdHlwZW9mKHJlc3BvbnNlLmJvZHkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHByb3BzID0gcmVzcG9uc2UuYm9keTtcbiAgICAgICAgICAgICAgICBwcm9wcy5zdGF0dXMgPSBwcm9wcy5zdGF0dXMgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgICAgICBwcm9wcy5tZXNzYWdlID0gcHJvcHMubWVzc2FnZSB8fCBcIkFuIGVycm9yIG9jY3VycmVkIGNvbW11bmljYXRpbmcgd2l0aCBzZXJ2aWNlXCI7XG5cbiAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpZHggPSByZXNwb25zZS5ib2R5Lm1lc3NhZ2UuaW5kZXhPZihcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlaWR4ID0gcmVzcG9uc2UuYm9keS5tZXNzYWdlLmluZGV4T2YoJyBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgICAgICAgICAgICBpZihzaWR4ID49IDAgJiYgZWlkeCA+IHNpZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLml0ZW0gPSByZXNwb25zZS5ib2R5Lm1lc3NhZ2Uuc3Vic3RyaW5nKHNpZHgrMSwgZWlkeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2gocmVzcG9uc2Uuc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwNCA6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5lcnJvciA9IFwiTm90IEZvdW5kXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5tZXNzYWdlID0gcmVzcG9uc2UucmVxdWVzdC51cmkucGF0aG5hbWUgKyBcIiBjYW5ub3QgYmUgZm91bmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwMSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5lcnJvciA9IFwiVW5hdXRoZW50aWNhdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5tZXNzYWdlID0gXCJZb3UgYXJlIG5vdCBhdXRoZW50aWNhdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDMgOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZXJyb3IgPSBcIlVuYXV0aG9yaXplZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMubWVzc2FnZSA9IFwiWW91IGFyZSBub3QgYXV0aG9yaXplZCB0byBhY2Nlc3MgXCIgKyByZXNwb25zZS5yZXF1ZXN0LnVyaS5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5lcnJvciA9IFwiQ29uZmxpY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLm1lc3NhZ2UgPSBcIkl0ZW0gYWxyZWFkeSBleGlzdHNcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGF0dGVybiByZWNlaXZlZCBpczogeyAuLi4sIG1lc3NhZ2U6ICdSZXNvdXJjZSA8aWRlbnRpZmllcj4gYWxyZWFkeSBleGlzdHMnLCAuLi4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpZHggPSBqc29uLm1lc3NhZ2UuaW5kZXhPZihcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVpZHggPSBqc29uLm1lc3NhZ2UuaW5kZXhPZignIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2lkeCA+PSAwICYmIGVpZHggPiBzaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLml0ZW0gPSBqc29uLm1lc3NhZ2Uuc3Vic3RyaW5nKHNpZHgrMSwgZWlkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5tZXNzYWdlICs9ICcuICBVbmFibGUgdG8gZXh0cmFjdCBleGlzdGluZyBpZGVudGlmaWVyIGZyb20gc2VydmljZSByZXNwb25zZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IGpzb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb2dnZXIuZGVidWcoXCJQQVJTRUQgRVJST1I6IFwiICsgSlNPTi5zdHJpbmdpZnkocHJvcHMpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmVycm9yID0gXCJTZXJ2ZXIgRXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5tZXNzYWdlID0gcmVzcG9uc2UuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb2dnZXIuZGVidWcoXCJERUZBVUxURUQgRVJST1I6IFwiICsgSlNPTi5zdHJpbmdpZnkocHJvcHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHByb3BzLnN0YXR1cyA8IDIwMCB8fCBwcm9wcy5zdGF0dXMgPiAyMDQgKSB7XG5cbiAgICAgICAgICAgIHByb3BzLmVycm9yID0gcHJvcHMuZXJyb3IgfHwgXCJTZXJ2ZXIgRXJyb3JcIjtcbiAgICAgICAgICAgIHByb3BzLnN0YXR1cyA9IHByb3BzLnN0YXR1cyB8fCByZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgICAgICAgcHJvcHMubWVzc2FnZSA9IHByb3BzLm1lc3NhZ2UgfHwgXCJBbiBlcnJvciBvY2N1cnJlZCBjb21tdW5pY2F0aW5nIHdpdGggc2VydmljZVwiO1xuXG4gICAgICAgICAgICBsZXQgZXJyID0gbmV3IEVycm9yKHByb3BzLm1lc3NhZ2UpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlcnIsIHByb3BzKTtcblxuICAgICAgICAgICAgLy8gTG9nZ2VyLmRlYnVnKFwiVVRJTFMuY2hlY2tBbmRIYW5kbGVFcnJvciA6IFwiICsgZXJyKTtcbiAgICAgICAgICAgIC8vIExvZ2dlci5kZWJ1ZyhcIlVUSUxTLmNoZWNrQW5kSGFuZGxlRXJyb3IgOiBcIiArIEpTT04uc3RyaW5naWZ5KGVycikpO1xuICAgICAgICAgICAgLy8gTG9nZ2VyLmRlYnVnKFwiVVRJTFMuY2hlY2tBbmRIYW5kbGVFcnJvciA6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVIdHRwQ2xpZW50O1xuIl19