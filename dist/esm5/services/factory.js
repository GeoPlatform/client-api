/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import ItemTypes from '../shared/types';
import ItemService from './item';
import LayerService from './layer';
import ServiceService from './service';
import GalleryService from './gallery';
import DatasetService from './dataset';
import MapService from './map';
/** *
 * \@param arg - string type or object with type property
 * \@param baseUrl - base endpoint of GeoPlatform API
 * \@return ItemService
  @type {?} */
var ServiceFactory = function (arg, baseUrl, httpClient) {
    /** @type {?} */
    var type = (typeof (arg) === 'string') ?
        arg : (arg && arg.type ? arg.type : null);
    if (!type)
        throw new Error("Must provide a type or object with a type specified");
    if (!baseUrl)
        throw new Error("Must provide a base url");
    if (!httpClient)
        throw new Error("Must provide an http client to use to make requests");
    switch (type) {
        case ItemTypes.LAYER: return new LayerService(baseUrl, httpClient);
        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);
        case ItemTypes.MAP: return new MapService(baseUrl, httpClient);
        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);
        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);
        default: return new ItemService(baseUrl, httpClient);
    }
};
var ɵ0 = ServiceFactory;
export default ServiceFactory;
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW9wbGF0Zm9ybS9jbGllbnQvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLFNBQVMsTUFBTSxpQkFBaUIsQ0FBQztBQUN4QyxPQUFPLFdBQVcsTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxZQUFZLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sY0FBYyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLGNBQWMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxjQUFjLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sVUFBVSxNQUFNLE9BQU8sQ0FBQzs7Ozs7O0FBTy9CLElBQU0sY0FBYyxHQUFHLFVBQVMsR0FBUyxFQUFFLE9BQWdCLEVBQUUsVUFBeUI7O0lBQ2xGLElBQUksSUFBSSxHQUFHLENBQUMsT0FBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxJQUFHLENBQUMsSUFBSTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUNqRixJQUFHLENBQUMsT0FBTztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN4RCxJQUFHLENBQUMsVUFBVTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUN2RixRQUFPLElBQUksRUFBRTtRQUNULEtBQUssU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFHLE9BQU8sSUFBSSxZQUFZLENBQUcsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFLLE9BQU8sSUFBSSxVQUFVLENBQUssT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sQ0FBQyxDQUFnQixPQUFPLElBQUksV0FBVyxDQUFJLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUMxRTtDQUNKLENBQUM7O0FBRUYsZUFBZSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBHUEh0dHBDbGllbnQgZnJvbSAnLi4vaHR0cC9jbGllbnQnO1xuaW1wb3J0IEl0ZW1UeXBlcyBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IEl0ZW1TZXJ2aWNlIGZyb20gJy4vaXRlbSc7XG5pbXBvcnQgTGF5ZXJTZXJ2aWNlIGZyb20gJy4vbGF5ZXInO1xuaW1wb3J0IFNlcnZpY2VTZXJ2aWNlIGZyb20gJy4vc2VydmljZSc7XG5pbXBvcnQgR2FsbGVyeVNlcnZpY2UgZnJvbSAnLi9nYWxsZXJ5JztcbmltcG9ydCBEYXRhc2V0U2VydmljZSBmcm9tICcuL2RhdGFzZXQnO1xuaW1wb3J0IE1hcFNlcnZpY2UgZnJvbSAnLi9tYXAnO1xuXG4vKipcbiAqIEBwYXJhbSBhcmcgLSBzdHJpbmcgdHlwZSBvciBvYmplY3Qgd2l0aCB0eXBlIHByb3BlcnR5XG4gKiBAcGFyYW0gYmFzZVVybCAtIGJhc2UgZW5kcG9pbnQgb2YgR2VvUGxhdGZvcm0gQVBJXG4gKiBAcmV0dXJuIEl0ZW1TZXJ2aWNlXG4gKi9cbmNvbnN0IFNlcnZpY2VGYWN0b3J5ID0gZnVuY3Rpb24oYXJnIDogYW55LCBiYXNlVXJsIDogc3RyaW5nLCBodHRwQ2xpZW50IDogR1BIdHRwQ2xpZW50KSA6IGFueSB7XG4gICAgbGV0IHR5cGUgPSAodHlwZW9mKGFyZykgPT09ICdzdHJpbmcnKSA/XG4gICAgICAgIGFyZyA6IChhcmcgJiYgYXJnLnR5cGUgPyBhcmcudHlwZSA6IG51bGwpO1xuICAgIGlmKCF0eXBlKSB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHByb3ZpZGUgYSB0eXBlIG9yIG9iamVjdCB3aXRoIGEgdHlwZSBzcGVjaWZpZWRcIik7XG4gICAgaWYoIWJhc2VVcmwpIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhIGJhc2UgdXJsXCIpO1xuICAgIGlmKCFodHRwQ2xpZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHByb3ZpZGUgYW4gaHR0cCBjbGllbnQgdG8gdXNlIHRvIG1ha2UgcmVxdWVzdHNcIik7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSBJdGVtVHlwZXMuTEFZRVI6ICAgcmV0dXJuIG5ldyBMYXllclNlcnZpY2UoICBiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICAgICAgY2FzZSBJdGVtVHlwZXMuU0VSVklDRTogcmV0dXJuIG5ldyBTZXJ2aWNlU2VydmljZShiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICAgICAgY2FzZSBJdGVtVHlwZXMuTUFQOiAgICAgcmV0dXJuIG5ldyBNYXBTZXJ2aWNlKCAgICBiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICAgICAgY2FzZSBJdGVtVHlwZXMuR0FMTEVSWTogcmV0dXJuIG5ldyBHYWxsZXJ5U2VydmljZShiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICAgICAgY2FzZSBJdGVtVHlwZXMuREFUQVNFVDogcmV0dXJuIG5ldyBEYXRhc2V0U2VydmljZShiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICAgICAgZGVmYXVsdDogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtU2VydmljZSggICBiYXNlVXJsLCBodHRwQ2xpZW50KTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZXJ2aWNlRmFjdG9yeTtcbiJdfQ==