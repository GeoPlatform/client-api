import { __extends } from 'tslib';
import { GPHttpClient, Config, ItemService, Query, ServiceService, LayerService, DatasetService, MapService, GalleryService, UtilsService, KGQuery, KGService, AgolService } from '@geoplatform/client';

var NodeHttpClient = /** @class */ (function (_super) {
    __extends(NodeHttpClient, _super);
    /**
     * @param options.timeout
     * @param options.token - the bearer token or a function to retrieve it
     */
    function NodeHttpClient(options) {
        return _super.call(this, options) || this;
    }
    /**
     * @param options - request configuration
     * @return request object
     */
    NodeHttpClient.prototype.createRequestOpts = function (options) {
        var opts = {
            method: options.method,
            url: options.url,
            json: false !== options.json,
            timeout: options.timeout || this.timeout
        };
        if (options.params) {
            opts.qs = options.params;
        }
        if (options.file) {
            var fs = require('fs');
            if (!fs)
                throw new Error("Module 'fs' not available");
            opts.formData = {
                file: {
                    value: fs.createReadStream(options.file.path),
                    options: {
                        filename: options.file.originalFilename
                    }
                }
            };
            Object.assign(opts.formData, options.data || {});
        }
        else if (options.data) {
            if (options.formData) {
                opts.formData = options.data;
            }
            else {
                opts.body = options.data;
            }
        }
        if (options.headers) {
            opts.headers = options.headers;
        }
        //set authorization header if one was provided
        if (this.token) {
            var token = this.token();
            if (token) {
                opts.auth = { 'bearer': token };
            }
        }
        //copy over user-supplied options
        if (options.options) {
            for (var o in options.options) {
                if (options.options.hasOwnProperty(o)) {
                    opts[o] = options.options[o];
                }
            }
        }
        // console.log(JSON.stringify(opts));
        return opts;
    };
    /**
     *
     */
    NodeHttpClient.prototype.execute = function (options) {
        var _this = this;
        var request = require('request');
        // require('request-debug')(request);
        if (!request) {
            throw new Error("Module 'request' not available");
        }
        return new Promise(function (resolve, reject) {
            request(options, function (error, response, body) {
                _this.checkAndHandleError(error, response)
                    .then(function () {
                    if (options.json === false)
                        resolve(response);
                    else
                        resolve(body);
                })
                    .catch(function (e) { return reject(e); });
            });
        });
    };
    /**
     *
     */
    NodeHttpClient.prototype.checkAndHandleError = function (error, response) {
        var props = {
            message: null,
            error: null,
            status: 200
        };
        if (error) {
            // Logger.debug("Error generated by request library: " + error.code);
            if (error.code === 'ETIMEDOUT' || error.code === 'ESOCKETTIMEDOUT') {
                props.status = 500;
                props.error = "Connection Timeout";
                props.message = "The response from the service took too long to read";
                if (error.connect === true) {
                    props.message = "Unable to establish a connection to the service";
                }
            }
            else {
                return Promise.reject(error);
            }
        }
        else if (response.statusCode < 200 || response.statusCode > 204) {
            // Logger.debug('Error returned by remote endpoint (' + response.statusCode + ')');
            // Logger.debug(JSON.stringify(response));
            props.status = response.statusCode;
            if (response.body && typeof (response.body) === 'object') {
                props = response.body;
                props.status = props.status || response.statusCode;
                props.message = props.message || "An error occurred communicating with service";
                if (response.statusCode === 409) {
                    var sidx = response.body.message.indexOf(" ");
                    var eidx = response.body.message.indexOf(' already exists');
                    if (sidx >= 0 && eidx > sidx) {
                        props.item = response.body.message.substring(sidx + 1, eidx);
                    }
                }
            }
            else {
                switch (response.statusCode) {
                    case 404:
                        props.error = "Not Found";
                        props.message = response.request.uri.pathname + " cannot be found";
                        break;
                    case 401:
                        props.error = "Unauthenticated";
                        props.message = "You are not authenticated";
                        break;
                    case 403:
                        props.error = "Unauthorized";
                        props.message = "You are not authorized to access " + response.request.uri.pathname;
                        break;
                    case 409:
                        props.error = "Conflict";
                        props.message = "Item already exists";
                        // pattern received is: { ..., message: 'Resource <identifier> already exists', ... }
                        try {
                            var json = JSON.parse(response.body);
                            var sidx = json.message.indexOf(" ");
                            var eidx = json.message.indexOf(' already exists');
                            if (sidx >= 0 && eidx > sidx) {
                                props.item = json.message.substring(sidx + 1, eidx);
                            }
                        }
                        catch (e) {
                            props.message += '.  Unable to extract existing identifier from service response';
                        }
                        break;
                    default:
                        try {
                            var json = JSON.parse(response.body);
                            props = json;
                            props.status = response.statusCode;
                            // Logger.debug("PARSED ERROR: " + JSON.stringify(props));
                        }
                        catch (e) {
                            props.error = "Server Error";
                            props.message = response.body;
                            // Logger.debug("DEFAULTED ERROR: " + JSON.stringify(props));
                        }
                }
            }
        }
        if (props.status < 200 || props.status > 204) {
            props.error = props.error || "Server Error";
            props.status = props.status || response.statusCode;
            props.message = props.message || "An error occurred communicating with service";
            var err = new Error(props.message);
            Object.assign(err, props);
            // Logger.debug("UTILS.checkAndHandleError : " + err);
            // Logger.debug("UTILS.checkAndHandleError : " + JSON.stringify(err));
            // Logger.debug("UTILS.checkAndHandleError : " + err.message);
            return Promise.reject(err);
        }
        return Promise.resolve(null);
    };
    return NodeHttpClient;
}(GPHttpClient));

var Éµ0 = function (router, routes, options) {
    var _this = this;
    options = options || {};
    var paths = options.paths || {};
    var auths = options.auth || {};
    routes.forEach(function (route) {
        if (paths[route.key] === false)
            return; //disabled endpoint
        if (!paths[route.key] && !route.path)
            return; //something is wrong with route
        //newer route override...
        // {
        //   'create': {
        //     'path': 'custom/path',
        //     'auth': true,
        //     'onResponse': function(result, res, next) { }
        //   }
        // }
        var overrides = options[route.key] || {};
        //look for overriden paths in either new override structure or older key:path format
        var path = '/' + (overrides.path || paths[route.key] || route.path);
        //look for authentication override in either new structure or older format
        var needsAuth = overrides.auth || auths[route.key] || route.auth;
        if (options.logger) {
            options.logger.debug("Binding Service Route [" + route.method + "] " + path);
        }
        router[route.method](path, function (req, res, next) {
            var promise = null;
            if (typeof (route.onExecute) !== 'function') {
                promise = Promise.resolve(null);
            }
            else {
                if (options.logger) {
                    options.logger.debug("Executing Service Route [" + route.method + "] " + path);
                    options.logger.debug(JSON.stringify(req.params));
                    options.logger.debug("-------------------------");
                }
                var svc = _this.getService(req, needsAuth, options);
                try {
                    promise = route.onExecute(svc, req);
                }
                catch (e) {
                    promise = Promise.reject(e);
                }
            }
            promise.then(function (result) {
                var onResponse = overrides.onResponse || route.onResponse;
                if (onResponse)
                    onResponse(result, res, next);
                else
                    res.json(result);
            })
                .catch(function (err) {
                if (overrides.onError)
                    overrides.onError(err);
                if (options.onError)
                    options.onError(route.key, err);
                next(err);
            })
                .finally(function () {
                //if route has a finish function defined, invoke it
                if (overrides.onFinish) {
                    overrides.onFinish(req, res);
                }
                //if proxy has an overall finish function defined, invoke it
                var finishFn = options.onFinish;
                if (finishFn)
                    finishFn(route.key, req, res);
            });
        });
    });
}, Éµ1 = function (req, needsAuth, options) {
    var token = req.accessToken || null;
    if (needsAuth && options.logger) {
        if (!token) {
            options.logger.warn("ServiceProxy.getClient() - No Access Token was provided on incoming request header!");
        }
        else if (!!options.debug) {
            options.logger.debug("ServiceProxy.getClient() - Token: " + token);
            options.logger.debug("ServiceProxy.getClient() - JWT: " + req.jwt);
        }
    }
    return new NodeHttpClient({
        timeout: Config.timeout,
        token: needsAuth ? token : null
    });
}, Éµ2 = function (req, needsAuth, options) {
    var client = this.getClient(req, needsAuth, options);
    var svcClass = options.serviceClass || ItemService;
    // console.log("Proxying to " + Config.ualUrl);
    if (options.logger) {
        options.logger.debug("Proxying to " + Config.ualUrl);
        // options.logger.debug("Using service class: " + svcClass);
    }
    var service = new svcClass(Config.ualUrl, client);
    if (options.logger) {
        service.setLogger(options.logger);
    }
    return service;
};
var ServiceProxy = {
    /**
     * @param {Router} router - ExpressJS router instance
     * @param {array[object]} routes - list of routes to map to the router
     * @param {object} options - additional configuration needed
     */
    bindRoutes: Éµ0,
    /**
    * @param {HttpRequest} req - incoming http request being proxied
    * @param {boolean} needsAuth - flag indicating if the request must provide an authentication token
    * @param {object} options - additional configuration options
    * @return {HttpClient} client to use to make requests to GeoPlatform API endpoint
    */
    getClient: Éµ1,
    /**
     * @param {HttpRequest} req - incoming http request being proxied
     * @param {boolean} needsAuth - flag indicating if request requires authorization token
     * @param {object} options - additional configuration options
     */
    getService: Éµ2
};

var Éµ0$1 = function (svc, req) {
    var query = new Query(req.query);
    return svc.search(query);
}, Éµ1$1 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$1 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, Éµ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7 = function (svc, req) { return svc.clone(req.params.id, req.body); }, Éµ8 = function (svc, req) { return svc.clone(req.params.id, req.body); }, Éµ9 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ10 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, Éµ11 = function (svc, req) {
    return svc.getUri(req.body);
}, Éµ12 = function (result, res) {
    res.json({ uri: result });
}, Éµ13 = function (svc, req) {
    return svc.getUri(req.body)
        .then(function (uri) {
        var fields = ['serviceType', 'services', 'scheme', 'themes', 'publishers', 'keywords'];
        var query = new Query().uri(uri).fields(fields);
        return svc.search(query);
    });
}, Éµ14 = function (svc, req) {
    var input = req.body.url || req.files.file;
    return svc.import(input, req.query.format);
}, Éµ15 = function (svc, req) {
    return svc.associations(req.params.id, req.query);
}, Éµ16 = function (svc, req) {
    return svc.versions(req.params.id, req.query);
}, Éµ17 = function (svc, req) {
    return svc.get(req.params.id, { version: req.params.version });
};
var Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'items',
        auth: false,
        onExecute: Éµ0$1
    },
    {
        key: 'get',
        method: 'get',
        path: 'items/:id',
        auth: false,
        onExecute: Éµ1$1
    },
    {
        key: 'create',
        method: 'post',
        path: 'items',
        auth: true,
        onExecute: Éµ2$1
    },
    {
        key: 'update',
        method: 'put',
        path: 'items/:id',
        auth: true,
        onExecute: Éµ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'items/:id',
        auth: true,
        onExecute: Éµ4,
        onResponse: Éµ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'items/:id',
        auth: true,
        onExecute: Éµ6
    },
    {
        key: 'clone',
        method: 'post',
        path: 'items/:id/clone',
        auth: true,
        onExecute: Éµ7
    },
    {
        key: 'clone',
        method: 'post',
        path: 'items/:id/clone',
        auth: true,
        execFn: Éµ8
    },
    {
        key: 'export',
        method: 'get',
        path: 'items/:id/export',
        auth: false,
        onExecute: Éµ9,
        onResponse: Éµ10
    },
    {
        key: 'uri',
        method: 'post',
        path: 'items/uri',
        auth: false,
        onExecute: Éµ11,
        onResponse: Éµ12
    },
    {
        key: 'exists',
        method: 'post',
        path: 'items/exists',
        auth: false,
        onExecute: Éµ13
    },
    {
        key: 'import',
        method: 'post',
        path: 'items/import',
        auth: true,
        onExecute: Éµ14
    },
    {
        key: 'associations',
        method: 'get',
        path: 'items/:id/associations',
        auth: false,
        onExecute: Éµ15
    },
    {
        key: 'versions',
        method: 'get',
        path: 'items/:id/versions',
        auth: false,
        onExecute: Éµ16
    },
    {
        key: 'getVersion',
        method: 'get',
        path: 'items/:id/versions/:version',
        auth: false,
        onExecute: Éµ17
    }
    // TODO findMultiple
];
/**
 *
 */
function bindRoutes(router, options) {
    //bind common endpoints
    options.pathBaseDefault = "items";
    options.serviceClass = ItemService;
    ServiceProxy.bindRoutes(router, Routes, options);
}
/**
 * ItemServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 */
function ItemServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("ItemServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("ItemServiceProxy() - " +
            "Unable to create proxy route, missing router");
    bindRoutes(router, options);
    return router;
}

var Éµ0$2 = function (svc, req) {
    return svc.search(req.query);
}, Éµ1$2 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$2 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3$1 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4$1 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5$1 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, Éµ6$1 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7$1 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ8$1 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, Éµ9$1 = function (svc) {
    return svc.types();
}, Éµ10$1 = function (svc, req) {
    return svc.import(req.body);
}, Éµ11$1 = function (svc, req) {
    return svc.about(req.params.id);
}, Éµ12$1 = function (svc, req) {
    return svc.harvest(req.params.id);
}, Éµ13$1 = function (svc, req) {
    return svc.liveTest(req.params.id);
}, Éµ14$1 = function (svc, req) {
    return svc.statistics(req.params.id);
};
var Routes$1 = [
    {
        key: 'search',
        method: 'get',
        path: 'services',
        auth: false,
        onExecute: Éµ0$2
    },
    {
        key: 'get',
        method: 'get',
        path: 'services/:id',
        auth: false,
        onExecute: Éµ1$2
    },
    {
        key: 'create',
        method: 'post',
        path: 'services',
        auth: true,
        onExecute: Éµ2$2
    },
    {
        key: 'update',
        method: 'put',
        path: 'services/:id',
        auth: true,
        onExecute: Éµ3$1
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'services/:id',
        auth: true,
        onExecute: Éµ4$1,
        onResponse: Éµ5$1
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'services/:id',
        auth: true,
        onExecute: Éµ6$1
    },
    {
        key: 'export',
        method: 'get',
        path: 'services/:id/export',
        auth: false,
        onExecute: Éµ7$1,
        onResponse: Éµ8$1
    },
    {
        key: 'types',
        method: 'get',
        path: 'serviceTypes',
        auth: false,
        onExecute: Éµ9$1
    },
    {
        key: 'import',
        method: 'post',
        path: 'services/import',
        auth: true,
        onExecute: Éµ10$1
    },
    {
        key: 'about',
        method: 'get',
        path: 'services/:id/about',
        auth: false,
        onExecute: Éµ11$1
    },
    {
        key: 'harvest',
        method: 'get',
        path: 'services/:id/harvest',
        auth: false,
        onExecute: Éµ12$1
    },
    {
        key: 'test',
        method: 'get',
        path: 'services/:id/test',
        auth: false,
        onExecute: Éµ13$1
    },
    {
        key: 'statistics',
        method: 'get',
        path: 'services/:id/statistics',
        auth: false,
        onExecute: Éµ14$1
    }
];
/**
 *
 */
function ServiceServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("ServiceServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("ServiceServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = ServiceService;
    ServiceProxy.bindRoutes(router, Routes$1, options);
    return router;
}

var Éµ0$3 = function (svc, req) {
    return svc.search(req.query);
}, Éµ1$3 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$3 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3$2 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4$2 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5$2 = function (
// @ts-ignore
result, res) { res.status(204).end(); }, Éµ6$2 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7$2 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ8$2 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, Éµ9$2 = function (svc, req) {
    return svc.style(req.params.id);
}, Éµ10$2 = function (svc, req) {
    return svc.style(req.params.id, req.params.styleId);
}, Éµ11$2 = function (svc, req) {
    return svc.styles(req.params.id);
}, Éµ12$2 = function (svc, req) {
    return svc.describe(req.params.id, req.body);
}, Éµ13$2 = function (svc, req) {
    return svc.validate(req.params.id, req.body);
};
var Routes$2 = [
    {
        key: 'search',
        method: 'get',
        path: 'layers',
        auth: false,
        onExecute: Éµ0$3
    },
    {
        key: 'get',
        method: 'get',
        path: 'layers/:id',
        auth: false,
        onExecute: Éµ1$3
    },
    {
        key: 'create',
        method: 'post',
        path: 'layers',
        auth: true,
        onExecute: Éµ2$3
    },
    {
        key: 'update',
        method: 'put',
        path: 'layers/:id',
        auth: true,
        onExecute: Éµ3$2
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'layers/:id',
        auth: true,
        onExecute: Éµ4$2,
        onResponse: Éµ5$2
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'layers/:id',
        auth: true,
        onExecute: Éµ6$2
    },
    {
        key: 'export',
        method: 'get',
        path: 'layers/:id/export',
        auth: false,
        onExecute: Éµ7$2,
        onResponse: Éµ8$2
    },
    {
        key: 'style',
        method: 'get',
        path: 'layers/:id/style',
        auth: false,
        onExecute: Éµ9$2
    },
    {
        key: 'styleById',
        method: 'get',
        path: 'layers/:id/styles/:styleId',
        auth: false,
        onExecute: Éµ10$2
    },
    {
        key: 'styles',
        method: 'get',
        path: 'layers/:id/styles',
        auth: false,
        onExecute: Éµ11$2
    },
    {
        key: 'describe',
        method: 'post',
        path: 'layers/:id/describe',
        auth: false,
        onExecute: Éµ12$2
    },
    {
        key: 'validate',
        method: 'post',
        path: 'layers/:id/validate',
        auth: false,
        onExecute: Éµ13$2
    }
];
/**
 *
 */
function LayerServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("LayerServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("LayerServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = LayerService;
    ServiceProxy.bindRoutes(router, Routes$2, options);
    return router;
}

var Éµ0$4 = function (svc, req) {
    return svc.search(req.query);
}, Éµ1$4 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$4 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3$3 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4$3 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5$3 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, Éµ6$3 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7$3 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ8$3 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
};
var Routes$3 = [
    {
        key: 'search',
        method: 'get',
        path: 'datasets',
        auth: false,
        onExecute: Éµ0$4
    },
    {
        key: 'get',
        method: 'get',
        path: 'datasets/:id',
        auth: false,
        onExecute: Éµ1$4
    },
    {
        key: 'create',
        method: 'post',
        path: 'datasets',
        auth: true,
        onExecute: Éµ2$4
    },
    {
        key: 'update',
        method: 'put',
        path: 'datasets/:id',
        auth: true,
        onExecute: Éµ3$3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'datasets/:id',
        auth: true,
        onExecute: Éµ4$3,
        onResponse: Éµ5$3
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'datasets/:id',
        auth: true,
        onExecute: Éµ6$3
    },
    {
        key: 'export',
        method: 'get',
        path: 'datasets/:id/export',
        auth: false,
        onExecute: Éµ7$3,
        onResponse: Éµ8$3
    }
];
/**
 * DatasetServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 */
function DatasetServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("DatasetServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("DatasetServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = DatasetService;
    ServiceProxy.bindRoutes(router, Routes$3, options);
    return router;
}

var Éµ0$5 = function (svc, req) {
    return svc.search(req.query);
}, Éµ1$5 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$5 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3$4 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4$4 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5$4 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, Éµ6$4 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7$4 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ8$4 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
};
var Routes$4 = [
    {
        key: 'search',
        method: 'get',
        path: 'maps',
        auth: false,
        onExecute: Éµ0$5
    },
    {
        key: 'get',
        method: 'get',
        path: 'maps/:id',
        auth: false,
        onExecute: Éµ1$5
    },
    {
        key: 'create',
        method: 'post',
        path: 'maps',
        auth: true,
        onExecute: Éµ2$5
    },
    {
        key: 'update',
        method: 'put',
        path: 'maps/:id',
        auth: true,
        onExecute: Éµ3$4
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'maps/:id',
        auth: true,
        onExecute: Éµ4$4,
        onResponse: Éµ5$4
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'maps/:id',
        auth: true,
        onExecute: Éµ6$4
    },
    {
        key: 'export',
        method: 'get',
        path: 'maps/:id/export',
        auth: false,
        onExecute: Éµ7$4,
        onResponse: Éµ8$4
    }
];
/**
 * MapServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 */
function MapServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("MapServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("MapServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = MapService;
    ServiceProxy.bindRoutes(router, Routes$4, options);
    return router;
}

var Éµ0$6 = function (svc, req) {
    return svc.search(req.query);
}, Éµ1$6 = function (svc, req) {
    return svc.get(req.params.id);
}, Éµ2$6 = function (svc, req) {
    return svc.save(req.body);
}, Éµ3$5 = function (svc, req) {
    return svc.save(req.body);
}, Éµ4$5 = function (svc, req) {
    return svc.remove(req.params.id);
}, Éµ5$5 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, Éµ6$5 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, Éµ7$5 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, Éµ8$5 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
};
var Routes$5 = [
    {
        key: 'search',
        method: 'get',
        path: 'galleries',
        auth: false,
        onExecute: Éµ0$6
    },
    {
        key: 'get',
        method: 'get',
        path: 'galleries/:id',
        auth: false,
        onExecute: Éµ1$6
    },
    {
        key: 'create',
        method: 'post',
        path: 'galleries',
        auth: true,
        onExecute: Éµ2$6
    },
    {
        key: 'update',
        method: 'put',
        path: 'galleries/:id',
        auth: true,
        onExecute: Éµ3$5
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'galleries/:id',
        auth: true,
        onExecute: Éµ4$5,
        onResponse: Éµ5$5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'galleries/:id',
        auth: true,
        onExecute: Éµ6$5
    },
    {
        key: 'export',
        method: 'get',
        path: 'galleries/:id/export',
        auth: false,
        onExecute: Éµ7$5,
        onResponse: Éµ8$5
    }
];
/**
 * GalleryServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 */
function GalleryServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("GalleryServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("GalleryServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = GalleryService;
    ServiceProxy.bindRoutes(router, Routes$5, options);
    return router;
}

var Éµ0$7 = function (svc, req) {
    return svc.locate(req.query.location);
}, Éµ1$7 = function (svc, req) {
    return svc.parseFile(req.files.file, req.body.format);
}, Éµ2$7 = function (svc, req) {
    return svc.capabilities(null, req.query);
}, Éµ3$6 = function (svc, req) {
    return svc.capabilities(req.params.id, req.query);
}, Éµ4$6 = function (svc, req) {
    return svc.store(req.files.file, req.body.format);
};
var Routes$6 = [
    {
        key: 'locate',
        method: 'get',
        path: 'utils/locate',
        auth: false,
        onExecute: Éµ0$7
    },
    {
        key: 'parseFile',
        method: 'post',
        path: 'utils/parse',
        auth: false,
        onExecute: Éµ1$7
    },
    {
        key: 'capabilities',
        method: 'get',
        path: 'utils/capabilities',
        auth: false,
        onExecute: Éµ2$7
    },
    {
        key: 'capabilitiesProperty',
        method: 'get',
        path: 'utils/capabilities/:id',
        auth: false,
        onExecute: Éµ3$6
    },
    {
        key: 'store',
        method: 'post',
        path: 'store',
        auth: true,
        onExecute: Éµ4$6
    }
];
/**
 *
 */
function UtilsServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("UtilsServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("UtilsServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = UtilsService;
    ServiceProxy.bindRoutes(router, Routes$6, options);
    return router;
}

var Éµ0$8 = function (svc, req) {
    var query = new KGQuery(req.query);
    return svc.suggest(query);
}, Éµ1$8 = function (svc, req) {
    var query = new KGQuery(req.query);
    return svc.types(query);
}, Éµ2$8 = function (svc, req) {
    var query = new KGQuery(req.query);
    return svc.sources(query);
};
var Routes$7 = [
    {
        key: 'suggest',
        method: 'get',
        path: 'recommender/suggest',
        auth: false,
        onExecute: Éµ0$8
    },
    {
        key: 'types',
        method: 'get',
        path: 'recommender/types',
        auth: false,
        onExecute: Éµ1$8
    },
    {
        key: 'sources',
        method: 'get',
        path: 'recommender/sources',
        auth: false,
        onExecute: Éµ2$8
    }
];
/**
 *
 */
function KGServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("KGServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("KGServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = KGService;
    ServiceProxy.bindRoutes(router, Routes$7, options);
    return router;
}

var Éµ0$9 = function (svc, req) {
    return svc.searchItems(req.query);
}, Éµ1$9 = function (svc, req) {
    return svc.searchGroups(req.query);
}, Éµ2$9 = function (svc, req) {
    return svc.searchOrgs(req.query);
}, Éµ3$7 = function (svc, req) {
    return svc.getItem(req.params.id);
}, Éµ4$7 = function (svc, req) {
    return svc.getGroup(req.params.id);
}, Éµ5$6 = function (svc, req) {
    return svc.getOrg(req.params.id);
};
var Routes$8 = [
    {
        key: 'searchItems',
        method: 'get',
        path: 'agol/items',
        auth: false,
        onExecute: Éµ0$9
    },
    {
        key: 'searchGroups',
        method: 'get',
        path: 'agol/groups',
        auth: false,
        onExecute: Éµ1$9
    },
    {
        key: 'searchOrgs',
        method: 'get',
        path: 'agol/orgs',
        auth: false,
        onExecute: Éµ2$9
    },
    {
        key: 'getItem',
        method: 'get',
        path: 'agol/items/:id',
        auth: false,
        onExecute: Éµ3$7
    },
    {
        key: 'getGroup',
        method: 'get',
        path: 'agol/groups/:id',
        auth: false,
        onExecute: Éµ4$7
    },
    {
        key: 'getOrg',
        method: 'get',
        path: 'agol/orgs/:id',
        auth: false,
        onExecute: Éµ5$6
    }
];
/**
 *
 */
function AgolServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("AgolServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("AgolServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = AgolService;
    ServiceProxy.bindRoutes(router, Routes$8, options);
    return router;
}

/**
 * Generated bundle index. Do not edit.
 */

export { AgolServiceProxy, DatasetServiceProxy, GalleryServiceProxy, ItemServiceProxy, KGServiceProxy, LayerServiceProxy, MapServiceProxy, NodeHttpClient, ServiceServiceProxy, UtilsServiceProxy };
//# sourceMappingURL=geoplatform-client-node.js.map
