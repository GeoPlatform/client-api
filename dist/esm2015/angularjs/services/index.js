import { ItemService, UtilsService, DatasetService, ServiceService, LayerService, MapService, GalleryService } from "@geoplatform/client";
/*
 * NOTICE:
 *
 * These services are angular aware (using angular's $q wrapper)
 * to ensure that any Promises returned are ultimately gated
 * through a $q instance and therefore will trigger a digest
 * upon completion.
 *
 * If you manually create an instance that is not angular aware,
 * you will need to wrap any response handler's manipulation of data
 * with $scope.$apply, $timeout, or an equivalent to trigger a digest
 */
/** Angular-aware instance of ItemService */
class NGItemService extends ItemService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of DatasetService */
class NGDatasetService extends DatasetService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of GalleryService */
class NGGalleryService extends GalleryService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of LayerService */
class NGLayerService extends LayerService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of MapService */
class NGMapService extends MapService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of ServiceService */
class NGServiceService extends ServiceService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
/** Angular-aware instance of UtilsService */
class NGUtilsService extends UtilsService {
    constructor(url, httpClient, $q) {
        super(url, httpClient);
        this.$q = $q;
    }
    createPromise(arg) {
        return this.$q(arg);
    }
    createAndResolvePromise(value) {
        return this.$q.resolve(value);
    }
    createAndRejectPromise(error) {
        return this.$q.reject(error);
    }
}
export { NGItemService, NGDatasetService, NGServiceService, NGLayerService, NGMapService, NGGalleryService, NGUtilsService };
//# sourceMappingURL=data:application/json;base64,