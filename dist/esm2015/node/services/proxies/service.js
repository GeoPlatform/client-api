/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ServiceService } from "@geoplatform/client";
import ServiceProxy from "./base";
const ɵ0 = function (svc, req) {
    return svc.search(req.query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
// @ts-ignore
result, res) {
    res.status(204).end();
}, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ8 = function (result, res) {
    /** @type {?} */
    let mimeType = result.headers['content-type'];
    /** @type {?} */
    let disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, ɵ9 = function (svc) {
    return svc.types();
}, ɵ10 = function (svc, req) {
    return svc.import(req.body);
}, ɵ11 = function (svc, req) {
    return svc.about(req.params.id);
}, ɵ12 = function (svc, req) {
    return svc.harvest(req.params.id);
}, ɵ13 = function (svc, req) {
    return svc.liveTest(req.params.id);
}, ɵ14 = function (svc, req) {
    return svc.statistics(req.params.id);
};
/** @type {?} */
const Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'services',
        auth: false,
        execFn: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'services/:id',
        auth: false,
        execFn: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'services',
        auth: true,
        execFn: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'services/:id',
        auth: true,
        execFn: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'services/:id',
        auth: true,
        execFn: ɵ4,
        respFn: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'services/:id',
        auth: true,
        execFn: ɵ6
    },
    {
        key: 'export',
        method: 'get',
        path: 'services/:id/export',
        auth: false,
        execFn: ɵ7,
        respFn: ɵ8
    },
    {
        key: 'types',
        method: 'get',
        path: 'serviceTypes',
        auth: false,
        execFn: ɵ9
    },
    {
        key: 'import',
        method: 'post',
        path: 'services/import',
        auth: true,
        execFn: ɵ10
    },
    {
        key: 'about',
        method: 'get',
        path: 'services/:id/about',
        auth: false,
        execFn: ɵ11
    },
    {
        key: 'harvest',
        method: 'get',
        path: 'services/:id/harvest',
        auth: false,
        execFn: ɵ12
    },
    {
        key: 'test',
        method: 'get',
        path: 'services/:id/test',
        auth: false,
        execFn: ɵ13
    },
    {
        key: 'statistics',
        method: 'get',
        path: 'services/:id/statistics',
        auth: false,
        execFn: ɵ14
    }
];
/**
 *
 * @param {?=} options
 * @return {?}
 */
function ServiceServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    /** @type {?} */
    let router = options.router;
    if (!options.router) {
        /** @type {?} */
        let express = require('express');
        if (!express) {
            throw new Error("ServiceServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("ServiceServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = ServiceService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default ServiceServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14 };

//# sourceMappingURL=data:application/json;base64,