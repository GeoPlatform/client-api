import { Query, ItemService } from "@geoplatform/client";
import ServiceProxy from './base';
var ɵ0 = function (svc, req) {
    var query = new Query(req.query);
    return svc.search(query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
result, res) {
    res.status(204).end();
}, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) { return svc.clone(req.params.id, req.body); }, ɵ8 = function (svc, req) { return svc.clone(req.params.id, req.body); }, ɵ9 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ10 = function (result, res) {
    var mimeType = result.headers['content-type'];
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, ɵ11 = function (svc, req) {
    return svc.getUri(req.body);
}, ɵ12 = function (result, res) {
    res.json({ uri: result });
}, ɵ13 = function (svc, req) {
    return svc.getUri(req.body)
        .then(function (uri) {
        var fields = ['serviceType', 'services', 'scheme', 'themes', 'publishers', 'keywords'];
        var query = new Query().uri(uri).fields(fields);
        return svc.search(query);
    });
}, ɵ14 = function (svc, req) {
    var input = req.body.url || req.files.file;
    return svc.import(input, req.query.format);
}, ɵ15 = function (svc, req) {
    return svc.associations(req.params.id, req.query);
}, ɵ16 = function (svc, req) {
    return svc.versions(req.params.id, req.query);
}, ɵ17 = function (svc, req) {
    return svc.get(req.params.id, { version: req.params.version });
};
var Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'items',
        auth: false,
        onExecute: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'items/:id',
        auth: false,
        onExecute: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'items',
        auth: true,
        onExecute: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'items/:id',
        auth: true,
        onExecute: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'items/:id',
        auth: true,
        onExecute: ɵ4,
        onResponse: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'items/:id',
        auth: true,
        onExecute: ɵ6
    },
    {
        key: 'clone',
        method: 'post',
        path: 'items/:id/clone',
        auth: true,
        onExecute: ɵ7
    },
    {
        key: 'clone',
        method: 'post',
        path: 'items/:id/clone',
        auth: true,
        execFn: ɵ8
    },
    {
        key: 'export',
        method: 'get',
        path: 'items/:id/export',
        auth: false,
        onExecute: ɵ9,
        onResponse: ɵ10
    },
    {
        key: 'uri',
        method: 'post',
        path: 'items/uri',
        auth: false,
        onExecute: ɵ11,
        onResponse: ɵ12
    },
    {
        key: 'exists',
        method: 'post',
        path: 'items/exists',
        auth: false,
        onExecute: ɵ13
    },
    {
        key: 'import',
        method: 'post',
        path: 'items/import',
        auth: true,
        onExecute: ɵ14
    },
    {
        key: 'associations',
        method: 'get',
        path: 'items/:id/associations',
        auth: false,
        onExecute: ɵ15
    },
    {
        key: 'versions',
        method: 'get',
        path: 'items/:id/versions',
        auth: false,
        onExecute: ɵ16
    },
    {
        key: 'getVersion',
        method: 'get',
        path: 'items/:id/versions/:version',
        auth: false,
        onExecute: ɵ17
    }
    // TODO findMultiple
];
/**
 *
 */
function bindRoutes(router, options) {
    //bind common endpoints
    options.pathBaseDefault = "items";
    options.serviceClass = ItemService;
    ServiceProxy.bindRoutes(router, Routes, options);
}
/**
 * ItemServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 */
function ItemServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("ItemServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("ItemServiceProxy() - " +
            "Unable to create proxy route, missing router");
    bindRoutes(router, options);
    return router;
}
export default ItemServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17 };
//# sourceMappingURL=data:application/json;base64,