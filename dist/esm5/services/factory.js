import ItemTypes from '../shared/types';
import ItemService from './item';
import LayerService from './layer';
import ServiceService from './service';
import GalleryService from './gallery';
import DatasetService from './dataset';
import MapService from './map';
/**
 * @param arg - string type or object with type property
 * @param baseUrl - base endpoint of GeoPlatform API
 * @return ItemService
 */
var ServiceFactory = function (arg, baseUrl, httpClient) {
    var type = (typeof (arg) === 'string') ?
        arg : (arg && arg.type ? arg.type : null);
    if (!type)
        throw new Error("Must provide a type or object with a type specified");
    if (!baseUrl)
        throw new Error("Must provide a base url");
    if (!httpClient)
        throw new Error("Must provide an http client to use to make requests");
    switch (type) {
        case ItemTypes.LAYER: return new LayerService(baseUrl, httpClient);
        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);
        case ItemTypes.MAP: return new MapService(baseUrl, httpClient);
        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);
        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);
        default: return new ItemService(baseUrl, httpClient);
    }
};
var ɵ0 = ServiceFactory;
export default ServiceFactory;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW9wbGF0Zm9ybS9jbGllbnQvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sU0FBUyxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sV0FBVyxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLFlBQVksTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxjQUFjLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sY0FBYyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLGNBQWMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxVQUFVLE1BQU0sT0FBTyxDQUFDO0FBRS9COzs7O0dBSUc7QUFDSCxJQUFNLGNBQWMsR0FBRyxVQUFTLEdBQVMsRUFBRSxPQUFnQixFQUFFLFVBQXlCO0lBQ2xGLElBQUksSUFBSSxHQUFHLENBQUMsT0FBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxJQUFHLENBQUMsSUFBSTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUNqRixJQUFHLENBQUMsT0FBTztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN4RCxJQUFHLENBQUMsVUFBVTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUN2RixRQUFPLElBQUksRUFBRTtRQUNULEtBQUssU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFHLE9BQU8sSUFBSSxZQUFZLENBQUcsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFLLE9BQU8sSUFBSSxVQUFVLENBQUssT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sQ0FBQyxDQUFnQixPQUFPLElBQUksV0FBVyxDQUFJLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUMxRTtBQUNMLENBQUMsQ0FBQzs7QUFFRixlQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IEdQSHR0cENsaWVudCBmcm9tICcuLi9odHRwL2NsaWVudCc7XG5pbXBvcnQgSXRlbVR5cGVzIGZyb20gJy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgSXRlbVNlcnZpY2UgZnJvbSAnLi9pdGVtJztcbmltcG9ydCBMYXllclNlcnZpY2UgZnJvbSAnLi9sYXllcic7XG5pbXBvcnQgU2VydmljZVNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCBHYWxsZXJ5U2VydmljZSBmcm9tICcuL2dhbGxlcnknO1xuaW1wb3J0IERhdGFzZXRTZXJ2aWNlIGZyb20gJy4vZGF0YXNldCc7XG5pbXBvcnQgTWFwU2VydmljZSBmcm9tICcuL21hcCc7XG5cbi8qKlxuICogQHBhcmFtIGFyZyAtIHN0cmluZyB0eXBlIG9yIG9iamVjdCB3aXRoIHR5cGUgcHJvcGVydHlcbiAqIEBwYXJhbSBiYXNlVXJsIC0gYmFzZSBlbmRwb2ludCBvZiBHZW9QbGF0Zm9ybSBBUElcbiAqIEByZXR1cm4gSXRlbVNlcnZpY2VcbiAqL1xuY29uc3QgU2VydmljZUZhY3RvcnkgPSBmdW5jdGlvbihhcmcgOiBhbnksIGJhc2VVcmwgOiBzdHJpbmcsIGh0dHBDbGllbnQgOiBHUEh0dHBDbGllbnQpIDogYW55IHtcbiAgICBsZXQgdHlwZSA9ICh0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZycpID9cbiAgICAgICAgYXJnIDogKGFyZyAmJiBhcmcudHlwZSA/IGFyZy50eXBlIDogbnVsbCk7XG4gICAgaWYoIXR5cGUpIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhIHR5cGUgb3Igb2JqZWN0IHdpdGggYSB0eXBlIHNwZWNpZmllZFwiKTtcbiAgICBpZighYmFzZVVybCkgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBwcm92aWRlIGEgYmFzZSB1cmxcIik7XG4gICAgaWYoIWh0dHBDbGllbnQpIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhbiBodHRwIGNsaWVudCB0byB1c2UgdG8gbWFrZSByZXF1ZXN0c1wiKTtcbiAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICBjYXNlIEl0ZW1UeXBlcy5MQVlFUjogICByZXR1cm4gbmV3IExheWVyU2VydmljZSggIGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgICAgICBjYXNlIEl0ZW1UeXBlcy5TRVJWSUNFOiByZXR1cm4gbmV3IFNlcnZpY2VTZXJ2aWNlKGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgICAgICBjYXNlIEl0ZW1UeXBlcy5NQVA6ICAgICByZXR1cm4gbmV3IE1hcFNlcnZpY2UoICAgIGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgICAgICBjYXNlIEl0ZW1UeXBlcy5HQUxMRVJZOiByZXR1cm4gbmV3IEdhbGxlcnlTZXJ2aWNlKGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgICAgICBjYXNlIEl0ZW1UeXBlcy5EQVRBU0VUOiByZXR1cm4gbmV3IERhdGFzZXRTZXJ2aWNlKGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEl0ZW1TZXJ2aWNlKCAgIGJhc2VVcmwsIGh0dHBDbGllbnQpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlcnZpY2VGYWN0b3J5O1xuIl19