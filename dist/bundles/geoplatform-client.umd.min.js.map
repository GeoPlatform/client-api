{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@geoplatform/client/shared/error.ts","ng://@geoplatform/client/shared/types.ts","ng://@geoplatform/client/shared/parameters.ts","ng://@geoplatform/client/shared/kg-query.ts","ng://@geoplatform/client/shared/classifiers.ts","ng://@geoplatform/client/shared/query.ts","ng://@geoplatform/client/shared/config.ts","ng://@geoplatform/client/http/client.ts","ng://@geoplatform/client/http/xhr.ts","ng://@geoplatform/client/services/item.ts","ng://@geoplatform/client/services/dataset.ts","ng://@geoplatform/client/services/map.ts","ng://@geoplatform/client/services/layer.ts","ng://@geoplatform/client/services/service.ts","ng://@geoplatform/client/services/gallery.ts","ng://@geoplatform/client/services/utils.ts","ng://@geoplatform/client/services/agol.ts","ng://@geoplatform/client/services/tracking.ts","ng://@geoplatform/client/services/kg.ts","ng://@geoplatform/client/shared/polyfills.ts","ng://@geoplatform/client/index.ts","ng://@geoplatform/client/shared/query-factory.ts","ng://@geoplatform/client/services/factory.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","_super","GPError","tslib_1.__extends","Error","setError","value","error","setStatus","status","statusCode","message","_this","call","ItemTypes","DATASET","SERVICE","LAYER","MAP","GALLERY","COMMUNITY","APPLICATION","TOPIC","WEBSITE","ORGANIZATION","CONTACT","CONCEPT","CONCEPT_SCHEME","STANDARD","RIGHTS_STATEMENT","Parameters","ALTERNATE_TITLE","BEGINS","CLASSIFIERS","CREATED","CREATED_BEFORE","CREATED_AFTER","CREATED_BY","CREATOR","CONTRIBUTED_BY","ENDS","EXTENT","IDENTIFIERS","KEYWORDS","LAST_MODIFIED_BY","MODIFIED","MODIFIED_BEFORE","MODIFIED_AFTER","PUBLISHERS_ID","PUBLISHERS_LABEL","PUBLISHERS_URI","CONTACTS_ID","CONTACTS_LABEL","CONTACTS_URI","QUERY","SCHEMES_ID","SCHEMES_LABEL","SCHEMES_URI","SIMILAR_TO","STATUS","SERVICE_TYPES","THEMES_ID","THEMES_LABEL","THEMES_URI","TOPICS_ID","TOPICS_LABEL","TOPICS_URI","TYPES","URI","USED_BY_ID","USED_BY_LABEL","USED_BY_URI","VISIBILITY","RESOURCE_TYPE","LANDING_PAGE","PURPOSE","RELIABILITY","RELIABILITY_MIN","RELIABILITY_MAX","ONLINE","COMPLIANT","SPEED","SPEED_MIN","SPEED_MAX","LIKES","LIKES_MIN","LIKES_MAX","VIEWS","VIEWS_MIN","VIEWS_MAX","HREF","LAYER_TYPE","LAYER_NAME","PARENT_LAYER","SUB_LAYER","MAP_LAYER","GALLERY_ITEM","FACETS","FIELDS","SORT","PAGE","PAGE_SIZE","FOR_TYPES","SORT_OPTIONS_DEFAULT","label","KGQuery","getQuery","result","prop","query","join","parameter","name","setParameter","undefined","getParameter","key","applyParameters","obj","q","text","setQ","QueryParameters","getQ","classifiers","types","setClassifiers","getClassifiers","objTypes","setTypes","getTypes","page","setPage","isNaN","getPage","nextPage","previousPage","pageSize","size","setPageSize","getPageSize","sort","order","setSort","indexOf","getSort","getSortField","split","getSortOrder","getSortOptions","slice","clear","defaultQuery","Classifiers","FUNCTION","TOPIC_PRIMARY","TOPIC_SECONDARY","SUBJECT_PRIMARY","SUBJECT_SECONDARY","AUDIENCE","PLACE","CATEGORY","Fields","ACCESS_RIGHTS","ALTERNATE_TITLES","ANNOTATIONS","CONTACTS","DATASETS","DESCRIPTION","DISTRIBUTIONS","GALLERY_ITEMS","LABEL","LAYERS","LEGEND","PUBLISHERS","RESOURCE_TYPES","SERVICE_TYPE","SERVICES","SPATIAL","STATISTICS","SUB_LAYERS","TEMPORAL","THEMES","THUMBNAIL","TOPICS","USED_BY","FIELDS_DEFAULT","Facets","CONCEPT_SCHEMES","FACETS_DEFAULT","FacetToParam","BBOX_REGEX","toArray","length","Query","clone","json","JSON","parse","stringify","setFacetParameter","facet","param","console","log","keywords","setKeywords","getKeywords","uri","setUri","getUri","createdBy","user","setCreatedBy","getCreatedBy","lastModifiedBy","setLastModifiedBy","getLastModifiedBy","themes","setThemes","getThemes","topics","setTopics","getTopics","publishers","setPublishers","getPublishers","contacts","setContacts","getContacts","usedBy","ids","setUsedBy","getUsedBy","schemes","setSchemes","getSchemes","serviceTypes","setServiceTypes","getServiceTypes","visibility","vis","setVisibility","getVisibility","getStatus","extent","bbox","setExtent","toBboxString","test","getExtent","classifier","setClassifier","getClassifier","isArray","classes","keys","map","k","forEach","modified","date","beforeOrAfter","setModified","Date","dir","oppProp","arg","getTime","getModified","created","setCreated","getCreated","begins","setBeginDate","getBeginDate","ends","setEndDate","getEndDate","between","begin","end","setBetween","resourceTypes","setResourceTypes","getResourceTypes","facets","names","setFacets","getFacets","addFacet","push","removeFacet","idx","splice","fields","setFields","getFields","addField","field","removeField","options","toString","assign","Config","ualUrl","configure","GPHttpClient","setTimeout","timeout","setAuthToken","token","createRequestOpts","execute","opts","Q.reject","XHRHttpClient","method","url","Authorization","o","promise","axios","then","response","data","catch","err","Q.resolve","ItemService","setUrl","baseUrl","apiBase","milliseconds","_timeout","setLogger","logger","logError","e","logDebug","msg","debug","get","id","version","buildRequest","save","itemObj","item","remove","patch","overrides","search","params","ps","import","format","isFile","ro","processData","formData","overwrite","export","object","type","responseType","getMultiple","identifiers","exists","uris","like","view","associations","versions","httpMethods","request","client","httpClient","DatasetService","MapService","LayerService","style","describe","req","missing","find","srs","height","width","info_format","x","y","i","j","validate","ServiceService","about","service","svc","results","harvest","liveTest","statistics","GalleryService","addItem","galleryId","removeItem","itemId","UtilsService","capabilities","property","parseFile","file","locate","location","AgolQuery","_query","val","groups","setGroups","getGroups","orgs","setOrgs","getOrgs","AgolService","getOrg","searchOrgs","getGroup","searchGroups","getItem","searchItems","getAgolId","filter","replace","Categories","UNKNOWN","KNOWLEDGE_GRAPH","USER","COMMUNITY_POST","COMMUNITY_PAGE","APP_PAGE","Events","ACCESSED","DISPLAYED","VIEWED","EDITED","DELETED","CLONED","ADDED","REMOVED","EXPORTED","IMPORTED","Event","getCategory","category","getType","setItem","getRelated","related","setRelated","DefaultTrackingServiceProvider","logEvent","event","logSearch","resultCount","TrackingService","setProvider","provider","evt","pageView","logPageView","KGService","suggest","_search","sources","Polyfills","apply","defineProperty","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","writable","configurable","queryFactory","TrackingEventFactory","eventType","layers","layerState","layer","layerEvents","concat","baseLayer","baseEvents","services","cats","cat"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nclass GPError extends Error {\n    public error : string|null;\n    public status: number = 500;\n    public statusCode : number = 500;\n    constructor(message : string) {\n        super(message);\n        this.error = null;\n    }\n    public setError(value:string) { this.error = value; }\n    public setStatus(value:number) { this.status = this.statusCode = value; }\n}\n\nexport default GPError;\n","\n\nexport default {\n    DATASET         : \"dcat:Dataset\",\n    SERVICE         : \"regp:Service\",\n    LAYER           : \"Layer\",\n    MAP             : \"Map\",\n    GALLERY         : \"Gallery\",\n    COMMUNITY       : 'Community',\n    APPLICATION     : 'Application',\n    TOPIC           : 'Topic',\n    WEBSITE         : 'WebSite',\n    ORGANIZATION    : \"org:Organization\",\n    CONTACT         : \"vcard:VCard\",\n    CONCEPT         : \"skos:Concept\",\n    CONCEPT_SCHEME  : \"skos:ConceptScheme\",\n    STANDARD        : 'dct:Standard',\n    RIGHTS_STATEMENT: 'dct:RightsStatement'\n};\n","\n\nexport default {\n    ALTERNATE_TITLE  : 'alternateTitles',\n    BEGINS           : 'startDate.min',\n    CLASSIFIERS      : 'classifiers',\n    CREATED          : 'created',\n    CREATED_BEFORE   : 'created.max',\n    CREATED_AFTER    : 'created.min',\n    CREATED_BY       : 'createdBy',\n    CREATOR          : 'creator.id',\n    CONTRIBUTED_BY   : 'contributedBy',\n    ENDS             : 'endDate.max',\n    EXTENT           : 'extent',\n    IDENTIFIERS      : 'identifiers',\n    KEYWORDS         : 'keywords',\n    LAST_MODIFIED_BY : 'lastModifiedBy',\n    MODIFIED         : 'modified',\n    MODIFIED_BEFORE  : 'modified.max',\n    MODIFIED_AFTER   : 'modified.min',\n    PUBLISHERS_ID    : 'publisher.id',\n    PUBLISHERS_LABEL : 'publisher.label',\n    PUBLISHERS_URI   : 'publisher.uri',\n    CONTACTS_ID      : 'contacts.id',\n    CONTACTS_LABEL   : 'contacts.label',\n    CONTACTS_URI     : 'contacts.uri',\n    QUERY            : 'q',\n    SCHEMES_ID       : 'scheme.id',\n    SCHEMES_LABEL    : 'scheme.label',\n    SCHEMES_URI      : 'scheme.uri',\n    SIMILAR_TO       : 'similarTo',\n    STATUS           : 'status',\n    SERVICE_TYPES    : 'serviceType.id',\n    THEMES_ID        : 'theme.id',\n    THEMES_LABEL     : 'theme.label',\n    THEMES_URI       : 'theme.uri',\n    TOPICS_ID        : 'topic.id',\n    TOPICS_LABEL     : 'topic.label',\n    TOPICS_URI       : 'topic.uri',\n    TYPES            : 'type',      //TODO change to 'types'\n    URI              : 'uri',\n    USED_BY_ID       : 'usedBy.id',\n    USED_BY_LABEL    : 'usedBy.label',\n    USED_BY_URI      : 'usedBy.uri',\n    VISIBILITY       : 'visibility',\n    RESOURCE_TYPE    : 'resourceType',\n    DATASET          : 'dataset',\n    LANDING_PAGE     : 'landingPage',\n    PURPOSE          : 'purpose',\n\n    //statistics parameters\n    RELIABILITY      : 'reliability',\n    RELIABILITY_MIN  : 'reliability.min',\n    RELIABILITY_MAX  : 'reliability.max',\n    ONLINE           : 'online',\n    COMPLIANT        : 'compliant',\n    SPEED            : 'speed',\n    SPEED_MIN        : 'speed.min',\n    SPEED_MAX        : 'speed.max',\n    LIKES            : 'likes',\n    LIKES_MIN        : 'likes.min',\n    LIKES_MAX        : 'likes.max',\n    VIEWS            : 'views',\n    VIEWS_MIN        : 'views.min',\n    VIEWS_MAX        : 'views.max',\n\n    //type-specific parameters\n    HREF             : 'href',           //service-specific\n    LAYER_TYPE       : 'layerType',     //layer-specific\n    LAYER_NAME       : 'layerName',     //...\n    PARENT_LAYER     : 'parentLayer',   //...\n    SUB_LAYER        : 'subLayer',      //...\n    SERVICE          : 'service',       //...\n    MAP_LAYER        : 'mapLayer',      //map-specific\n    GALLERY_ITEM     : 'galleryItem',   //gallery-specific\n\n    //meta-parameters\n    FACETS           : 'includeFacets',  //TODO change to 'facets'\n    FIELDS           : 'fields',\n    SORT             : 'sort',\n    PAGE             : 'page',\n    PAGE_SIZE        : 'size',\n\n    //recommender service-specific\n    FOR_TYPES        : 'for'\n};\n","\nimport QueryParameters from './parameters';\n\ninterface KVP<U> { [ key : string ] : U }\n\n\nconst SORT_OPTIONS_DEFAULT : { value:string; label:string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nclass KGQuery {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    constructor() {\n\n        this.defaultQuery = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n        this.query = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n    }\n\n\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    parameter(name : string, value: any) : KGQuery {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    setParameter (name : string, value : any) {\n        if(value === null || value === undefined)\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    applyParameters (obj : KVP<any> ) {Â \n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p, obj[p]);\n            }\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    q(text : string) : KGQuery {\n        this.setQ(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setQ (text : string) {\n        this.setParameter(QueryParameters.QUERY, text);\n    }\n\n    getQ() : string|null {\n        return this.getParameter(QueryParameters.QUERY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    classifiers(types : string|string[]) : KGQuery {\n        this.setClassifiers(types);\n        return this;\n    }\n\n    /**\n     * @param types - KG classifiers for which concepts should be returned\n     */\n    setClassifiers (types : string|string[]) {\n        if(!types) return;\n        if(typeof(types) === 'string') types = types = [types];\n        this.setParameter(QueryParameters.TYPES, types);\n    }\n\n    /**\n     * @return KG classifiers for which concepts should be returned\n     */\n    getClassifiers () : string[] {\n        return this.getParameter(QueryParameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.types()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    types(objTypes : string|string[]) : KGQuery {\n        this.setTypes(objTypes);\n        return this;\n    }\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.setTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @param objTypes - Item object type names\n     */\n    setTypes (objTypes : string|string[]) {\n        if(!objTypes) return;\n        if(typeof(objTypes) === 'string') objTypes = [objTypes];\n        this.setParameter(QueryParameters.FOR_TYPES, objTypes);\n    }\n\n    /**\n     * Get the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.getTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @return Item object type names\n     */\n    getTypes () : string[] {\n        return this.getParameter(QueryParameters.FOR_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : KGQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this.query.page = page*1;\n    }\n\n    getPage() : number {\n        return this.query.page;\n    }\n\n    nextPage() : void {\n        this.setPage(this.query.page+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : KGQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this.query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this.query.size;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order ?: string) : KGQuery {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order ?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.query.sort = sort;\n    }\n\n    getSort() : string | null {\n        return this.query.sort;\n    }\n\n    getSortField() : string | null {\n        return this.query.sort.split(',')[0];\n    }\n\n    getSortOrder() : boolean {\n        return this.query.sort.split(',')[1] === 'asc';\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string, label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = this.defaultQuery;\n    }\n}\n\nexport default KGQuery;\n","\n\n\nexport default  {\n    PURPOSE             : 'purpose',\n    FUNCTION            : 'function',\n    TOPIC_PRIMARY       : 'primaryTopic',\n    TOPIC_SECONDARY     : 'secondaryTopic',\n    SUBJECT_PRIMARY     : 'primarySubject',\n    SUBJECT_SECONDARY   : 'secondarySubject',\n    COMMUNITY           : 'community',\n    AUDIENCE            : 'audience',\n    PLACE               : 'place',\n    CATEGORY            : 'category'\n};\n","\nimport Parameters from './parameters';\nimport Classifiers from './classifiers';\n\ninterface KVP<U> { [ key : string ] : U }\n\nconst Fields : KVP<string> = {\n    ACCESS_RIGHTS       : 'rights',\n    ALTERNATE_TITLES    : 'alternateTitles',\n    ANNOTATIONS         : 'annotations',\n    CLASSIFIERS         : 'classifiers',\n    CONCEPT_SCHEME      : 'scheme',\n    CONTACTS            : 'contacts',\n    CREATED             : 'created',\n    CREATED_BY          : 'createdBy',\n    DATASETS            : 'datasets',\n    DESCRIPTION         : 'description',\n    DISTRIBUTIONS       : 'distributions',\n    EXTENT              : 'extent',\n    GALLERY_ITEMS       : 'items',\n    HREF                : 'href',\n    IDENTIFIERS         : 'identifiers',\n    KEYWORDS            : 'keywords',\n    LABEL               : 'label',\n    LAST_MODIFIED_BY    : 'lastModifiedBy',\n    LAYERS              : 'layers',\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LEGEND              : 'legend',\n    MODIFIED            : 'modified',\n    PARENT_LAYER        : 'parentLayer',\n    PUBLISHERS          : 'publishers',\n    RESOURCE_TYPES      : 'resourceTypes',\n    SERVICE_TYPE        : 'serviceType',\n    SERVICES            : 'services',\n    SPATIAL             : 'spatial',\n    STATISTICS          : 'statistics',\n    STATUS              : 'status',\n    SUB_LAYERS          : 'subLayers',\n    TEMPORAL            : 'temporal',\n    THEMES              : 'themes',\n    THUMBNAIL           : 'thumbnail',\n    TOPICS              : 'topics',\n    USED_BY             : 'usedBy',\n    VISIBILITY          : 'visibility',\n    LANDING_PAGE        : 'landingPage'\n};\n\nconst FIELDS_DEFAULT : string[] = [\n    Fields.CREATED, Fields.MODIFIED, Fields.CREATED_BY,\n    Fields.PUBLISHERS, Fields.THEMES, Fields.DESCRIPTION\n];\n\n/* --------------------------------------------------------- */\n\nconst Facets : KVP<string> = {\n    ALTERNATE_TITLES    : 'alternateTitles',\n    CONCEPT_SCHEMES     : 'schemes',\n    CREATED_BY          : 'createdBy',\n    HREF                : 'href',\n    IDENTIFIERS         : \"identifiers\",\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LIKES               : 'likes',\n    ONLINE              : 'online',\n    PUBLISHERS          : 'publishers',\n    CONTACTS            : 'contacts',\n    RELIABILITY         : 'reliability',\n    SERVICE_TYPES       : 'serviceTypes',\n    SPEED               : 'speed',\n    STATUS              : 'status',\n    THEMES              : 'themes',\n    TOPICS              : 'topics',\n    TYPES               : 'type',   //TODO change to 'types'\n    USED_BY             : 'usedBy',\n    VIEWS               : 'views',\n    VISIBILITY          : 'visibility'\n};\n\nconst FACETS_DEFAULT : string[] = [\n    Facets.TYPES,\n    Facets.PUBLISHERS,\n    Facets.SERVICE_TYPES,\n    Facets.CONCEPT_SCHEMES,\n    Facets.VISIBILITY,\n    Facets.CREATED_BY\n];\n\n\n/*\n    Map facet keys to parameters so clients can set\n    query params using faceted results\n\n    //TODO remove these and their function below\n */\nconst FacetToParam : KVP<string> = {};\nFacetToParam[Facets.TYPES]           = Parameters.TYPES;\nFacetToParam[Facets.THEMES]          = Parameters.THEMES_ID;\nFacetToParam[Facets.TOPICS]          = Parameters.TOPICS_ID;\nFacetToParam[Facets.PUBLISHERS]      = Parameters.PUBLISHERS_ID;\nFacetToParam[Facets.CONTACTS]        = Parameters.CONTACTS_ID;\nFacetToParam[Facets.CONCEPT_SCHEMES] = Parameters.SCHEMES_ID;\nFacetToParam[Facets.USED_BY]         = Parameters.USED_BY_ID;\n\n\n\n/* --------------------------------------------------------- */\n\n\nconst SORT_OPTIONS_DEFAULT : { value: string; label: string; }[] = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nconst BBOX_REGEX = /^\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?$/;\n\n\nfunction toArray(value : any) : any | null {\n    let result = value;\n    //if given a non-array value, wrap in array\n    if(result !== null && typeof(result.push) === 'undefined') result = [result];\n    //if array value is empty, nullify the result\n    if(result !== null && !result.length) result = null;\n    return result;\n}\n\n\n\n/**\n * Query\n *\n * Specify the \"default\" query constraints to use by passing in 'options.defaults = {...}';\n *\n */\nclass Query {\n\n    public query : KVP<any>;\n    private defaultQuery : KVP<any>;\n\n    /**\n     * @param options - set of initial constraints\n     */\n    constructor(options ?: KVP<any>) {\n        this.defaultQuery = { };\n        this.defaultQuery[Parameters.PAGE.toString()] = 0;\n        this.defaultQuery[Parameters.PAGE_SIZE.toString()] = 10;\n        this.defaultQuery[Parameters.SORT.toString()] = \"modified,desc\";\n        this.defaultQuery[Parameters.FIELDS.toString()] = FIELDS_DEFAULT.slice(0);\n        this.defaultQuery[Parameters.FACETS.toString()] = FACETS_DEFAULT.slice(0);\n        if(options && options.defaults) {\n            Object.assign(this.defaultQuery, options.defaults);\n            delete options.defaults;\n        }\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n\n    /**\n     * @return containing request-ready parameters/values\n     */\n    getQuery() : KVP<any> {\n        let result : KVP<any> = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    /**\n     * @return Query\n     */\n    clone() : Query {\n        let result = new Query();\n        let json = JSON.parse(JSON.stringify(this.query));\n        result.applyParameters(json);\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param name\n     * @param value\n     * @return Query this\n     */\n    parameter(name : string, value : any) : Query {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    /**\n     * @param name\n     * @param value\n     */\n    setParameter (name : string, value: any) : void {\n        if(value === null || value === undefined || //if no value was provide\n            (typeof(value.push) !== 'undefined' && !value.length)) //or empty array\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    /**\n     * @param key - name of parameter\n     * @return value of parameter\n     */\n    getParameter (key : string) : any {\n        return this.query[key];\n    }\n\n    /**\n     * @param obj - set of parameter/values to apply to this query\n     */\n    applyParameters (obj : KVP<any>) : void {Â \n        for(let p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p as string, obj[p] as any);\n            }\n        }\n    }\n\n    /**\n     * @param facet - name of facet to set the value for as a parameter\n     * @param value - value of the facet to use as the parameter's value\n     */\n     //TODO remove this function\n    setFacetParameter (facet: string, value: string) : void {\n        let param : string = FacetToParam[facet];\n        if(!param) {\n            console.log(\"WARN : Query.applyFacetParameter() - \" +\n                \"unable to map facet to known parameter '\" + facet + \"', using \" +\n                \"as direct parameter which may not operate as intended\");\n        }\n        this.setParameter(param||facet, value);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param text\n     * @return Query this\n     */\n    q(text : string) : Query { this.setQ(text); return this; }\n\n    /** @param text - free text query */\n    setQ (text : string) : void { this.setParameter(Parameters.QUERY, text); }\n    /** @return */\n    getQ() : string { return this.getParameter(Parameters.QUERY) as string; }\n\n\n    // -----------------------------------------------------------\n\n\n    keywords(text : string|string[]) : Query {\n        this.setKeywords(text);\n        return this;\n    }\n\n    /**\n     * @param text - free text query\n     */\n    setKeywords (text : string|string[]) : void {\n        this.setParameter(Parameters.KEYWORDS, toArray(text));\n    }\n\n    getKeywords() : string[] {\n        return this.getParameter(Parameters.KEYWORDS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    uri (uri : string) : Query {\n        this.setUri(uri);\n        return this;\n    }\n\n    setUri(uri : string) {\n        this.setParameter(Parameters.URI, uri);\n    }\n\n    getUri() : any {\n        return this.getParameter(Parameters.URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    types(types : string|string[]) : Query {\n        this.setTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - name of class(es) to request\n     */\n    setTypes (types : string|string[]) {\n        this.setParameter(Parameters.TYPES, toArray(types));\n    }\n\n    getTypes () : string[] {\n        return this.getParameter(Parameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    createdBy(user : string) : Query {\n        this.setCreatedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setCreatedBy (user : string) {\n        this.setParameter(Parameters.CREATED_BY, user);\n    }\n\n    /** @return username */\n    getCreatedBy () : any {\n        return this.getParameter(Parameters.CREATED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    lastModifiedBy(user : string) : Query {\n        this.setLastModifiedBy(user);\n        return this;\n    }\n\n    /** @param user - username */\n    setLastModifiedBy (user: string) {\n        this.setParameter(Parameters.LAST_MODIFIED_BY, user);\n    }\n\n    /** @return username */\n    getLastModifiedBy () : any {\n        return this.getParameter(Parameters.LAST_MODIFIED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - string or array of strings containing theme constraint\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    themes(themes: string|string[], parameter?:string) : Query {\n        this.setThemes(themes, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param themes - theme or themes to constrain by\n     */\n    setThemes (themes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.THEMES_ID, null);\n        this.setParameter(Parameters.THEMES_LABEL, null);\n        this.setParameter(Parameters.THEMES_URI, null);\n\n        let param = parameter || Parameters.THEMES_ID;\n        this.setParameter(param, toArray(themes));\n    }\n\n    getThemes () : string[] {\n        return this.getParameter(Parameters.THEMES_ID) ||\n            this.getParameter(Parameters.THEMES_LABEL) ||\n            this.getParameter(Parameters.THEMES_URI);\n    }\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param  topics - string or array of strings containing theme constraint\n     * @param  parameter - optional, to indicate the parameter to use\n     * @return Query instance\n     */\n    topics(topics:string|string[], parameter ?: string) : Query {\n        this.setTopics(topics, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Topic or set of Topics to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.TOPIC_LABEL or Parameters.TOPIC_URI\n     * respectively.\n     * @param topics - theme or topics to constrain by\n     */\n    setTopics (topics:string|string[], parameter ?: string) {\n\n        //clear existing\n        this.setParameter(Parameters.TOPICS_ID, null);\n        this.setParameter(Parameters.TOPICS_LABEL, null);\n        this.setParameter(Parameters.TOPICS_URI, null);\n\n        let param = parameter || Parameters.TOPICS_ID;\n        this.setParameter(param, toArray(topics));\n    }\n\n    getTopics () : string[] {\n        return this.getParameter(Parameters.TOPICS_ID) ||\n            this.getParameter(Parameters.TOPICS_LABEL) ||\n            this.getParameter(Parameters.TOPICS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    publishers(publishers:string|string[], parameter?:string) : Query {\n        this.setPublishers(publishers, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param publishers - publishing orgs to constrain by\n     */\n    setPublishers (publishers:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.PUBLISHERS_ID, null);\n        this.setParameter(Parameters.PUBLISHERS_LABEL, null);\n        this.setParameter(Parameters.PUBLISHERS_URI, null);\n\n        let param = parameter || Parameters.PUBLISHERS_ID;\n        this.setParameter(param, toArray(publishers));\n    }\n\n    getPublishers () : string[] {\n        return this.getParameter(Parameters.PUBLISHERS_ID) ||\n            this.getParameter(Parameters.PUBLISHERS_LABEL) ||\n            this.getParameter(Parameters.PUBLISHERS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Point of Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    contacts(contacts:string|string[], parameter?:string) : Query {\n        this.setContacts(contacts, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param contacts - publishing orgs to constrain by\n     */\n    setContacts (contacts:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.CONTACTS_ID, null);\n        this.setParameter(Parameters.CONTACTS_LABEL, null);\n        this.setParameter(Parameters.CONTACTS_URI, null);\n\n        let param = parameter || Parameters.CONTACTS_ID;\n        this.setParameter(param, toArray(contacts));\n    }\n\n    getContacts () : string[] {\n        return this.getParameter(Parameters.CONTACTS_ID) ||\n            this.getParameter(Parameters.CONTACTS_LABEL) ||\n            this.getParameter(Parameters.CONTACTS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    usedBy(ids:string|string[], parameter?:string) : Query {\n        this.setUsedBy(ids, parameter);\n        return this;\n    }\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param ids - publishing orgs to constrain by\n     */\n    setUsedBy (ids:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.USED_BY_ID, null);\n        this.setParameter(Parameters.USED_BY_LABEL, null);\n        this.setParameter(Parameters.USED_BY_URI, null);\n\n        let param = parameter || Parameters.USED_BY_ID;\n        this.setParameter(param, toArray(ids));\n    }\n\n    getUsedBy () : string[] {\n        return this.getParameter(Parameters.USED_BY_ID) ||\n            this.getParameter(Parameters.USED_BY_LABEL) ||\n            this.getParameter(Parameters.USED_BY_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     * @return Query\n     */\n    schemes(schemes:string|string[], parameter?:string) : Query {\n        this.setSchemes(schemes, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param schemes - schemes to constrain by\n     * @param parameter - optional, to indicate the parameter to use\n     */\n    setSchemes (schemes:string|string[], parameter?:string) {\n\n        //clear existing\n        this.setParameter(Parameters.SCHEMES_ID, null);\n        this.setParameter(Parameters.SCHEMES_LABEL, null);\n        this.setParameter(Parameters.SCHEMES_URI, null);\n\n        let param = parameter || Parameters.SCHEMES_ID;\n        this.setParameter(param, toArray(schemes));\n    }\n\n    getSchemes() : string[] {\n        return this.getParameter(Parameters.SCHEMES_ID) ||\n            this.getParameter(Parameters.SCHEMES_LABEL) ||\n            this.getParameter(Parameters.SCHEMES_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     *\n     */\n    serviceTypes(types:string|string[]) : Query {\n        this.setServiceTypes(types);\n        return this;\n    }\n\n    /**\n     * @param types - ids\n     */\n    setServiceTypes (types:string|string[]) {\n        this.setParameter(Parameters.SERVICE_TYPES, toArray(types));\n    }\n\n    getServiceTypes () : string[] {\n        return this.getParameter(Parameters.SERVICE_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    visibility(vis:\"public\"|\"private\") : Query {\n        this.setVisibility(vis);\n        return this;\n    }\n\n    /**\n     * @param visibility - one of 'public' or 'private'\n     */\n    setVisibility (visibility : \"public\"|\"private\") {\n        this.setParameter(Parameters.VISIBILITY, visibility);\n    }\n\n    getVisibility () : any {\n        return this.getParameter(Parameters.VISIBILITY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    status(value : string) : Query {\n        this.setStatus(value);\n        return this;\n    }\n\n    /**\n     * @param status - current status of Item\n     */\n    setStatus (value : string) {\n        this.setParameter(Parameters.STATUS, value);\n    }\n\n    getStatus () : any {\n        return this.getParameter(Parameters.STATUS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    extent(bbox : any) : Query {\n        this.setExtent(bbox);\n        return this;\n    }\n\n    /**\n     * @param bbox - string form of \"minx,miny,maxx,maxy\", or L.LatLngBounds, or Array\n     */\n    setExtent (bbox : any) {\n        if(bbox) {\n            if(typeof(bbox.toBboxString) !== 'undefined') {\n                //Leaflet Bounds instance\n                bbox = bbox.toBboxString();\n\n            } else if(typeof(bbox.push) !== 'undefined' && bbox.length &&\n                //Nested array (alternate Leaflet representation):\n                // [ [minLat,minLong], [maxLat,maxLong] ]\n                typeof(bbox[0].push) !== 'undefined') {\n                bbox = bbox[0][1]+','+bbox[0][0]+','+bbox[1][1]+','+bbox[1][0];\n\n            } else if(typeof(bbox) === 'string') {\n                if(!BBOX_REGEX.test(bbox)) {\n                    throw new Error(\"Invalid argument: bbox string must be \" +\n                        \"in form of 'minx,miny,maxx,maxy'\");\n                }\n            } else {\n                throw new Error(\"Invalid argument: bbox must be one of \" +\n                    \"Leaflet.Bounds, nested array, or bbox string\");\n            }\n        }\n        this.setParameter(Parameters.EXTENT, bbox);\n    }\n\n    /**\n     * @return bbox string or null if not set\n     */\n    getExtent () : any {\n        return this.getParameter(Parameters.EXTENT);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.classifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     * @return Query\n     */\n    classifier(classifier : string, value : string|string[]) : Query {\n        this.setClassifier(classifier, value);\n        return this;\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...';\n     *  let query = new Query();\n     *  query.setClassifier( KGClassifiers.PURPOSE, purposeId );\n     *\n     * @param classifier - string name of classifier to use\n     * @param value - id or array of ids of concepts to use\n     */\n    setClassifier(classifier : string, value : string|string[]) {\n        let classifiers = this.getParameter(Parameters.CLASSIFIERS) || {};\n        classifiers[classifier] = toArray(value);\n        this.setParameter(Parameters.CLASSIFIERS, classifiers);\n    }\n\n    /**\n     * @param classifier - name of classifier constraint in use\n     * @return array of concept ids\n     */\n    getClassifier(classifier : string) : string[] {\n        let classifiers = this.getParameter(Parameters.CLASSIFIERS) || {};\n        return classifiers[classifier] || [];\n    }\n\n    /**\n     * Ex.\n     *  const { KGClassifiers, Query } from 'geoplatform.client';\n     *  let purposeId = '...',\n     *      functionIds = ['...','...'];\n     *  let query = new Query();\n     *  query.classifiers({\n     *       KGClassifiers.PURPOSE: purposeId,\n     *       KGClassifiers.FUNCTION: functionIds\n     *  });\n     *\n     * @param value - object defining classifiers\n     * @return Query instance\n     */\n    classifiers(value : any) : Query {\n        this.setClassifiers(value);\n        return this;\n    }\n\n    /**\n     * @param value - object defining classifiers\n     */\n    setClassifiers (value : any) {\n        if(!value || typeof(value) !== 'object' || Array.isArray(value)) {\n            this.setParameter(Parameters.CLASSIFIERS, null);\n            return;\n        }\n        const classes = Object.keys(Classifiers).map(k=>Classifiers[k]);\n        let classifiers = this.getParameter(Parameters.CLASSIFIERS) || {};\n        Object.keys(value).forEach( classifier => {\n            if(~classes.indexOf(classifier)) {\n                classifiers[classifier] = toArray(value[classifier]);\n            }\n        });\n        this.setParameter(Parameters.CLASSIFIERS, classifiers);\n    }\n\n    /**\n     * @return classifiers used in the query\n     */\n    getClassifiers () : any {\n        return this.getParameter(Parameters.CLASSIFIERS) || null;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    modified(date : number|Date, beforeOrAfter : boolean) : Query {\n        this.setModified(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setModified (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.MODIFIED_BEFORE, null);\n            this.setParameter(Parameters.MODIFIED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.MODIFIED_BEFORE : Parameters.MODIFIED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.MODIFIED_AFTER : Parameters.MODIFIED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getModified () : Date {\n        let value = this.getParameter(Parameters.MODIFIED_BEFORE) ||\n            this.getParameter(Parameters.MODIFIED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    created(date : number|Date, beforeOrAfter:boolean) : Query {\n        this.setCreated(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param date - date to compare against\n     * @param beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setCreated (date : number|Date, beforeOrAfter:boolean) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.CREATED_BEFORE, null);\n            this.setParameter(Parameters.CREATED_AFTER, null);\n            return;\n        }\n\n        if(!(date instanceof Date))\n            date = new Date(date as number);\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.CREATED_BEFORE : Parameters.CREATED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.CREATED_AFTER : Parameters.CREATED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getCreated () : Date {\n        let value = this.getParameter(Parameters.CREATED_BEFORE) ||\n            this.getParameter(Parameters.CREATED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    begins(date : number|Date) : Query {\n        this.setBeginDate(date);\n        return this;\n    }\n\n    setBeginDate (date : number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.BEGINS, date);\n    }\n\n    getBeginDate () : Date {\n        let date = this.getParameter(Parameters.BEGINS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    ends(date : number|Date) : Query {\n        this.setEndDate(date);\n        return this;\n    }\n\n    setEndDate (date: number|Date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.ENDS, date);\n    }\n\n    getEndDate () : Date {\n        let date = this.getParameter(Parameters.ENDS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    between(begin : number|Date, end : number|Date) : Query {\n        this.setBetween(begin, end);\n        return this;\n    }\n\n    setBetween(begin : number|Date, end : number|Date) {\n        this.begins(begin);\n        this.ends(end);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    resourceTypes(types: string|string[]) : Query {\n        this.setResourceTypes(types);\n        return this;\n    }\n\n    setResourceTypes(types: string|string[]) {\n        this.setParameter(Parameters.RESOURCE_TYPE, toArray(types));\n    }\n\n    getResourceTypes() : string[] {\n        return this.getParameter(Parameters.RESOURCE_TYPE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    facets(names : string|string[]) : Query {\n        this.setFacets(names);\n        return this;\n    }\n\n    /*\n     * @param names - names of facets\n     */\n    setFacets (names: string|string[]) {\n        this.setParameter(Parameters.FACETS, toArray(names));\n    }\n\n    getFacets() : string[] {\n        return this.getParameter(Parameters.FACETS);\n    }\n\n    /**\n     * @param name - name of facet to add\n     */\n    addFacet(name: string) {\n        let facets = this.getFacets() || [];\n        facets.push(name);\n        this.setFacets(facets);\n    }\n\n    /**\n     * @param name - name of facet to remove\n     */\n    removeFacet(name: string) {\n        let facets = this.getFacets() || [];\n        let idx = facets.indexOf(name);\n        if(idx>=0) {\n            facets.splice(idx, 1);\n            this.setFacets(facets);\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    fields(fields: string|string[]) : Query {\n        this.setFields(fields);\n        return this;\n    }\n\n    /**\n     * @param fields - list of field names to request for each search result\n     */\n    setFields (fields: string|string[]) {\n        this.setParameter(Parameters.FIELDS, toArray(fields));\n    }\n\n    getFields() : string[] {\n        return this.getParameter(Parameters.FIELDS);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    addField(field: string) {\n        let fields = this.getFields() || [];\n        fields.push(field);\n        this.setFields(fields);\n    }\n\n    /**\n     * @param field - name of field to remove\n     */\n    removeField(field: string) {\n        let fields = this.getFields() || [];\n        let idx = fields.indexOf(field);\n        if(idx>=0) {\n            fields.splice(idx, 1);\n            this.setFields(fields);\n        }\n    }\n\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page: number) : Query {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page: number) {\n        if(isNaN(page) || page*1<0) return;\n        this.setParameter(Parameters.PAGE, page*1);\n    }\n\n    getPage() : number {\n        return this.getParameter(Parameters.PAGE);\n    }\n\n    nextPage() : void {\n        this.setPage(this.getPage()+1);\n    }\n\n    previousPage() : void {\n        this.setPage(this.getPage()-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size: number) : Query {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size: number) {\n        if(isNaN(size) || size*1<0) return;\n        this.setParameter(Parameters.PAGE_SIZE, size*1);\n    }\n\n    getPageSize() : number {\n        return this.getParameter(Parameters.PAGE_SIZE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort: string, order?:string) : Query {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort: string, order?:string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.setParameter(Parameters.SORT, sort);\n    }\n\n    getSort() : string {\n        return this.getParameter(Parameters.SORT);\n    }\n\n    getSortField() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[0] : null;\n    }\n\n    getSortOrder() : string | null {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[1] : null;\n    }\n\n    /**\n     * @return list of key-value pairs of sort options\n     */\n    getSortOptions() : { value: string; label: string; }[] {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n    }\n}\n\nexport {\n    Query as default,\n    Query,\n    Fields,\n    Facets\n};\n","\nvar Config : { [key:string] : any } = {\n\n    ualUrl: 'https://ual.geoplatform.gov',\n    //appId: '...',\n\n    configure: function(options : any) {\n        Object.assign(this, options);\n    }\n};\n\nexport default Config;\n","\n\nimport * as Q from 'q';\n\n\nclass GPHttpClient {\n\n    protected token : any;\n    protected timeout : number = 5000;\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        options = options || {};\n        this.setTimeout(options.timeout||30000);\n        this.setAuthToken(options.token);\n    }\n\n    setTimeout(timeout : number) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg : string|Function) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    createRequestOpts(\n        // @ts-ignore\n        options : { [key:string] : any }\n    ) : any {\n        throw new Error(\"Must implement 'createRequestOpts' in a sub-class\");\n    }\n\n    execute(\n        // @ts-ignore\n        opts : any\n    ) : Q.Promise<any> {\n        return Q.reject(new Error(\"Must overrdie 'execute' in a sub-class\"));\n    }\n\n}\n\nexport default GPHttpClient;\n","\nimport * as Q from 'q';\nimport axios from 'axios';\nimport GPError from '../shared/error';\nimport GPHttpClient from './client';\n\n\nclass XHRHttpClient extends GPHttpClient {\n\n    /**\n     * @param options.timeout\n     * @param options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options ?: { [key:string] : any }) {\n        super(options);\n    }\n\n\n    createRequestOpts(options : { [key:string] : any }) : any {\n\n        let opts : { [key:string] : any } = {\n            method: options.method,\n            url: options.url,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.json === true)\n            opts.responseType = 'json';\n\n        if(options.params) {\n            opts.params = options.params;\n        }\n\n        if(options.data) {\n            opts.data = options.data;\n            opts.contentType = 'application/json';\n        }\n\n        //set authorization header if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.headers = opts.headers || {};\n                opts.headers.Authorization = 'Bearer ' + token;\n                opts.withCredentials = true;\n            }\n        }\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        return opts;\n    }\n\n\n    execute(opts : any) : Q.Promise<any> {\n\n        if(typeof(axios) === 'undefined') {\n            throw new Error(\"Axios not found, check that you have included \" +\n                \"it as a dependency of the application or use a different \" +\n                \"HttpClient implementation\")\n        }\n\n        let promise = axios(opts)\n        .then( response => { return response.data; })\n        .catch( error => {\n            let err : GPError = new GPError(error.message);\n            if (error.response) {\n                err = new GPError(error.response.data);\n            }\n            return Q.reject(err);\n        });\n        return Q.resolve(promise);\n    }\n\n}\n\nexport default XHRHttpClient;\n","\nimport * as Q from 'q';\nimport { Item, SearchResults } from '../shared/models';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\n/**\n * ItemService\n * service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n * Ex Searching Items\n *      let params = { q: 'test' };\n *      itemService.search(params).then(response=>{\n *          console.log(response.results.length + \" of \" + response.totalResults);\n *      }).catch(e=>{...});\n *\n * Ex Fetch Item:\n *      itemService.get(itemId).then(item=>{...}).catch(e=>{...});\n *\n * Ex Saving Item:\n *      itemService.save(item).then(item=>{...}).catch(e=>{...});\n *\n * Ex Deleting Item:\n *      itemService.remove(itemId).then(()=>{...}).catch(e=>{...});\n *\n * Ex Patching Item:\n *      itemService.patch(itemId,patch).then(item=>{...}).catch(e=>{...});\n *\n */\nclass ItemService {\n\n    protected apiBase ?: string;\n    protected baseUrl ?: string;\n    protected client : GPHttpClient;\n    protected _timeout : number = 30000;\n    protected logger : any;\n    protected httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n    }\n\n    setUrl(baseUrl : string) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/items';\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    setTimeout(milliseconds : number) {\n        this._timeout = milliseconds;\n    }\n\n    /**\n     * @param milliseconds - override environment variable timeout\n     */\n    timeout(milliseconds : number) : ItemService {\n        this.setTimeout(milliseconds);\n        return this;\n    }\n\n    /**\n     * @param logger - log service\n     */\n    setLogger(logger : any) {\n        this.logger = logger;\n    }\n\n    /**\n     * @param e - error to log (if logger specified)\n     */\n    logError(e : string|Error) {\n        if(this.logger && this.logger.error) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * @param msg - message to log as debug\n     */\n    logDebug(msg : string) {\n        if(this.logger && this.logger.debug) {\n            this.logger.debug(msg);\n        }\n    }\n\n\n\n\n    /**\n     * @param id - identifier of item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    get (id : string, options ?: any) : Q.Promise<Item> {\n\n        let url = this.baseUrl + '/' + id;\n        if(options && options.version) {\n            url += '/versions/' + options.version;\n            // this.logDebug(\"Client.get requesting version: \" + options.version);\n        }\n        return Q.resolve( url )\n        .then( url => {\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.get() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param itemObj - item to create or update\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    save (itemObj : Item, options ?: any) : Q.Promise<Item> {\n\n        return Q.resolve( itemObj )\n        .then( item => {\n\n            let method = 'POST',\n                url = this.baseUrl;\n            if(item.id) {\n                method = \"PUT\";\n                url += '/' + item.id;\n            } else {\n                //if item is being created and has no URI already defined\n                // attempt to create one using the API's method for doing so\n                // and then attempt the actual item creation\n                if(!item.uri) {\n                    return this.getUri(item, options)\n                    .then( uri => {\n                        item.uri = uri;\n                        let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n                        return this.execute(opts);\n                    });\n                }\n            }\n\n            let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error saving item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.save() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - identifier of item to delete\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving true if successful or an error\n     */\n    remove (id : string, options ?: any) : Q.Promise<boolean> {\n\n        return Q.resolve( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:\"DELETE\", url: url, options: options\n            });\n            return this.execute(opts);\n        })\n        .then( () => true)\n        .catch(e => {\n            let err = new Error(`Error deleting item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.remove() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - identifier of item to patch\n     * @param patch - HTTP-PATCH compliant set of properties to patch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    patch (id : string, patch : any, options ?: any) : Q.Promise<Item> {\n\n        return Q.resolve( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"PATCH\", url: url, data: patch, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error patching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.patch() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to clone\n     * @param overrides - KVP of property-value overrides to apply to cloned instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving clone of Item or an error\n     */\n    clone (id : string, overrides : any, options ?: any) : Q.Promise<Item> {\n\n        return Q.resolve( this.baseUrl + '/' + id + '/clone' )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: overrides, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error cloning item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.clone() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or GeoPlatform.Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    search (arg ?: Query, options ?: any) : Q.Promise<SearchResults> {\n\n        return Q.resolve( arg )\n        .then( params => {\n            let ps = params ? params.getQuery() : {};\n            let opts = this.buildRequest({\n                method:\"GET\", url: this.baseUrl, params: ps, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.search() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     *\n     * @param arg - URL to metadata document or File to upload\n     * @param format - metadata format of specified document\n     * @return Promise resolving GeoPlatform Item\n     */\n    import (arg : any, format : string, options ?: any) : Q.Promise<Item> {\n\n        return Q.resolve( true )\n        .then( () => {\n            if(arg===null || arg === undefined) {\n                throw new Error(\"Must provide a valid URL or File\");\n            }\n            let isFile = typeof(arg) !== 'string';\n            let ro : { [key:string]:any } = {\n                method:\"POST\",\n                url: this.apiBase + '/api/import',\n                processData: true,  //for jQuery\n                formData: true,     //for Node (RequestJS)\n                options: options\n            };\n            if(isFile) {\n                ro.file = arg;\n                ro.data = { format: format };\n            } else {\n                ro.formData = false;    //must be false for data to not be multi-part formdata\n                ro.data = { url: arg, format: format };\n            }\n            if(options && options.overwrite) {\n                ro.data.overwrite = (!!options.overwrite)+'';\n                delete options.overwrite;\n            }\n            let opts = this.buildRequest(ro);\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error importing item: ${e.message}`);\n            Object.assign(err, e);\n            if(e.status === 409 || ~e.message.indexOf('Item already exists'))\n                Object.assign(err, {status: 409});\n            if(e.item)\n                Object.assign(err, { item : e.item });\n            this.logError('ItemService.import() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param id - identifier of the item to export\n     * @param format - string mime type to export\n     * @return Promise resolving HTTP response object for enabling attachment downloading\n     */\n    export (id : string, format : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/export';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                params: {format:format},\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            //https://github.com/GeoPlatform/client-api/issues/1\n            if(e.statusCode && e.statusCode===406 || e.statusCode==='406') {\n                msg = `Unsupported export format specified '${format}'`;\n            }\n            let err = new Error(`Error exporting item: ${msg}`);\n            Object.assign(err, e);\n            this.logError('ItemService.export() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param object - GP object definition to generate a URI for\n     * @param options - optional request options\n     * @return Promise resolving string URI\n     */\n    getUri (object : any, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( object )\n        .then( obj => {\n            if(!obj || !obj.type)\n                throw new Error(\"Must provide an object with a type property\");\n            let url = this.apiBase + '/api/utils/uri';\n            options = options || {};\n            options.responseType = 'text';  //to ensure plaintext is expected\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: obj, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`Error getting URI for item: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getUri() - ' + err.message);\n            return Q.reject(err);\n        });\n\n    }\n\n\n    /**\n     * @param ids - list of identifiers to fetch objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list of matching items or an error\n     */\n    getMultiple (ids : string[], options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( ids )\n        .then( identifiers => {\n\n            let method = 'POST',\n                url = this.apiBase + '/api/fetch';\n\n            let opts = this.buildRequest({method:method, url:url, data:identifiers, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.getMultiple() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param uris - list of URIs to retrieve objects for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving list containing uri-item association where exists\n     */\n    exists(uris : string[], options ?: any) : Q.Promise<any> {\n        return Q.resolve(uris)\n        .then( uris => {\n            let method = 'POST', url = this.apiBase + '/api/utils/exists';\n            let opts = this.buildRequest({method:method, url:url, data:uris, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error resolving items: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.exists() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    like(item : any, options ?: any) : Q.Promise<any> {\n        return Q.resolve(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/likes';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error liking item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    view(item : any, options ?: any) : Q.Promise<any> {\n        return Q.resolve(item.id)\n        .then( id => {\n            let method = 'PUT', url = this.apiBase + '/api/items/' + id + '/views';\n            let opts = this.buildRequest({method:method, url:url, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error incrementing views for item ${item.id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.like() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param id - identifier of item to fetch associations for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of associated items of the item in question\n     */\n    associations (id : string, params : any, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/associations';\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:url,\n                params: params || {},\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching associations for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.associations() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - identifier of item to fetch version info for\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving array of available versions of the item\n     */\n    versions (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/versions';\n            let opts = this.buildRequest({ method:\"GET\", url:url, options:options });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching versions for item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ItemService.versions() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this._timeout || 30000;\n        let opts = this.createRequestOpts(options);\n        return opts;\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        let request = this.client.createRequestOpts(options);\n        this.logDebug(\"ItemService.createRequestOpts() - \" + JSON.stringify(request));\n        return request;\n    }\n\n    execute(opts : {[key:string]:any} ) : Q.Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"ItemService.execute() - Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return Q.reject(e);\n        });\n    }\n\n}\n\nexport default ItemService;\n","\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass DatasetService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/datasets';\n    }\n\n}\n\nexport default DatasetService;\n","\n\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass MapService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/maps';\n    }\n\n\n}\n\nexport default MapService;\n","\n\nimport * as Q from 'q';\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass LayerService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/layers';\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving style JSON object\n     */\n    style (id : string, options ?: any) : Q.Promise<any> {\n        return Q.resolve( id )\n        .then( (id) => {\n\n            let url = this.baseUrl + '/' + id + '/style';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error fetching style: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.style() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param req identifying extent, x, y\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving feature JSON object\n     */\n    describe( id : string, req : any, options ?: any ) : Q.Promise<any> {\n\n        return Q.resolve( req )\n        .then( (req) => {\n\n            if(!req) {\n                throw new Error(\"Must provide describe parameters to use\");\n            }\n\n            let keys = ['bbox', 'height', 'width', 'x', 'y'];\n            let missing = keys.find(key => !req[key]);\n            if(missing) {\n                throw new Error(`Must specify ${missing} in describe req`);\n            }\n\n            let params = {\n                srs         : 'EPSG:4326',\n                bbox        : req.bbox,\n                height      : req.height,\n                width       : req.width,\n                info_format : 'text/xml',\n                x           : req.x,\n                y           : req.y,\n                i           : req.x, //WMS 1.3.0\n                j           : req.y  //WMS 1.3.0\n            };\n\n            let url = this.baseUrl + '/' + id + '/describe';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing layer feature: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - GeoPlatform Layer identifier\n     * @param params describing layer request to validate\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving empty if successful or a message if failed\n     */\n    validate(id : string, params : any, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( params )\n        .then( params => {\n\n            if(!params) {\n                throw new Error(\"Must provide parameters to use in layer validation\");\n            }\n\n            let url = this.baseUrl + '/' + id + '/validate';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error validating layer request: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('LayerService.describe() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default LayerService;\n","\n\nimport * as Q from 'q';\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport Query from '../shared/query';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Service service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate service objects.\n *\n * @see ItemService\n */\n\nclass ServiceService extends ItemService {\n\n    constructor(url:string, httpClient:GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl:string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/services';\n    }\n\n\n    /**\n     * Fetch metadata from the specified GeoPlatform Service's\n     * web-accessible implementation using either GetCapabilities\n     * or ESRI documentInfo.\n     * @param service - GeoPlatform Service object\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving service metadata\n     */\n    about( service : any, options ?: any ) : Q.Promise<any> {\n\n        return Q.resolve( service )\n        .then( svc => {\n            if(!svc)\n                throw new Error(\"Must provide service to get metadata about\");\n            let opts = this.buildRequest({\n                method:'POST', url:this.baseUrl + '/about', data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error describing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.about() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service types\n     */\n    types (options ?: any) : Q.Promise<any> {\n\n        let query = new Query()\n        .types(ItemTypes.STANDARD)\n        .resourceTypes('ServiceType')\n        .pageSize(50)\n        .getQuery();\n\n        return Q.resolve( query )\n        .then( (params) => {\n            let url = this.apiBase + '/api/items';\n            let opts = this.buildRequest({\n                method:'GET', url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response.results)\n        .catch(e => {\n            let err = new Error(`Error fetching service types: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.types() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param service - GP Service definition\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving imported service\n     */\n    import (service : any, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( service )\n        .then( svc => {\n            let url = this.baseUrl + '/import';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error importing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.import() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param id - identifier of GP service to harvest layers for\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service layers\n     */\n    harvest (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/harvest';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error harvesting layers from service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.harvest() - ' + err.message);\n            return Q.reject(err);\n        });\n\n    }\n\n    /**\n     * @param id - identifier of GP service to live test\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    liveTest (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/test';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error testing service: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.liveTest() - '  + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param id - identifier of GP service to fetch statistics about\n     * @param options - optional set of request options to apply to request\n     * @return Promise resolving service statistics\n     */\n    statistics (id : string, options ?: any) : Q.Promise<any> {\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/statistics';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting service statistics: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('ServiceService.statistics() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default ServiceService;\n","\nimport * as Q from 'q';\nimport ItemService from './item';\nimport GPHttpClient from '../http/client';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass GalleryService extends ItemService {\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl : string) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/galleries';\n    }\n\n    addItem (galleryId : string, itemObj : any, options ?: any) : Q.Promise<any> {\n        return Q.resolve( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + galleryId + '/items';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data: itemObj, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    removeItem( galleryId : string, itemId : any, options ?: any) : Q.Promise<any> {\n        return Q.resolve( this.baseUrl + '/' + galleryId + '/items/' + itemId )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:'DELETE', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .then( () =>true)\n        .catch(e => {\n            let err = new Error(\"Error adding item: \" + e.message);\n            Object.assign(err, e);\n            this.logError('GalleryService.addItem() - '+ err.message);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default GalleryService;\n","\nimport * as Q from 'q';\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\n\nclass UtilsService {\n\n    private baseUrl : string;\n    private client : GPHttpClient;\n    private timeout : number = 30000;\n    private logger : any;\n    private httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.client = httpClient;\n        this.baseUrl = url;\n        this.timeout = Config.timeout || 30000;\n    }\n\n    setUrl(baseUrl : string) {\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * @param logger - log service\n     */\n    setLogger(logger : any) {\n        this.logger = logger;\n    }\n\n    /**\n     * @param e - error to log (if logger specified)\n     */\n    logError(e : string|Error) {\n        if(this.logger && this.logger.error) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * @param msg - message to log as debug\n     */\n    logDebug(msg : string) {\n        if(this.logger && this.logger.debug) {\n            this.logger.debug(msg);\n        }\n    }\n\n\n    /**\n     * @param property - optional capa property to specifically request\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving capabilities object\n     */\n    capabilities (property : string|null, query : any, options ?: any) : Q.Promise<any> {\n\n        let url = this.baseUrl + '/api/capabilities';\n        if(property)\n            url += '/' + property;\n\n        return Q.resolve( url )\n        .then( (url) => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:query||{}, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`Error getting capabilities: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.capabilities() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param file\n     * @param format\n     * @param options\n     * @return Promise\n     */\n    parseFile (file : any, format : string, options ?: any) : Q.Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/parse';\n\n        return Q.resolve( url )\n        .then( url => {\n\n            let opts = this.buildRequest({\n                method:\"POST\",  url:url,\n                data: { format: format },\n                file: file,\n                formData: true,   //NodeJS (RequestJS)\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then( response => response )\n        .catch(e => {\n            let err = new Error(`Error parsing file: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.parseFile() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * Geolocate the specified argument to a set of candidate locations.\n     * @param value - text string to geolocate (name or lat,lng)\n     * @param options - optional config to send with http request\n     * @return Promise resolving an array of geocoded results\n     */\n    locate(value : any, options ?: any) : Q.Promise<any> {\n\n        var url = this.baseUrl + '/api/utils/gazetteer';\n        return Q.resolve(url)\n        .then( url => {\n            let opts = this.buildRequest({\n                method: 'GET',\n                url: url,\n                params: { location: value },\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response)\n        .catch(e => {\n            let err = new Error(`Error resolving location: ${e.message}`);\n            Object.assign(err, e);\n            this.logError('UtilsService.locate() - ' + err.message);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout || Config.timeout || 30000;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts : {[key:string]:any}) : Q.Promise<any> {\n        return this.client.execute(opts)\n        .catch(( e : Error ) => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"UtilsService.execute() - Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return Q.reject(e);\n        });\n    }\n\n}\n\nexport default UtilsService;\n","\n\nimport * as Q from 'q';\nimport ItemTypes from '../shared/types';\nimport Config from '../shared/config';\nimport GPHttpClient from '../http/client';\n\n\nclass AgolQuery {\n\n    private _query : { [key:string]:any };\n\n    constructor() {\n        this._query = {\n            page: 0,\n            size: 10\n        };\n    }\n\n    getQuery() : { [key:string]:any } {\n        let result : { [key:string]:any } = {};\n        for(let prop in this._query) {\n            let value = this._query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    // ---------------------------------------\n\n    q(value : string) : AgolQuery { this.setQ(value); return this; }\n    setQ(value : string) { this._query.q = value; }\n    getQ() : string { return this._query.q; }\n\n    // ---------------------------------------\n\n    types(value : string|string[]) : AgolQuery {\n        this.setTypes(value); return this;\n    }\n    setTypes(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.types = val;\n    }\n    getTypes() : string[] { return this._query.types; }\n\n    // ---------------------------------------\n\n    groups(value : string|string[]) : AgolQuery {\n        this.setGroups(value); return this;\n    }\n    setGroups(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.groups = val;\n    }\n    getGroups() : string[] { return this._query.groups; }\n\n    // ---------------------------------------\n\n    orgs(value : string|string[]) : AgolQuery {\n        this.setOrgs(value); return this;\n    }\n    setOrgs(value : string|string[]) {\n        let val : string;\n        if(value && Array.isArray(value))\n            val = (value as Array<string>).join(',');\n        else val = value as string;\n        this._query.orgs = val;\n    }\n    getOrgs() : string[] { return this._query.orgs; }\n\n    // ---------------------------------------\n\n    extent(value : any) : AgolQuery { this.setExtent(value); return this; }\n    setExtent(value : any) { this._query.bbox = value; }\n    getExtent() : any { return this._query.bbox; }\n\n    // ---------------------------------------\n\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n    sort (sort : string, order : string) : AgolQuery {\n        this.setSort(sort, order); return this;\n    }\n    /**\n     * @param sort - form of <field>,<dir> or just field name\n     * @param order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort : string, order : string) {\n         order = order || 'desc';\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this._query.sort = sort;\n    }\n    getSort() : string { return this._query.sort; }\n    getSortField() : string { return this._query.sort.split(',')[0]; }\n    getSortOrder() : boolean { return this._query.sort.split(',')[1] === 'asc'; }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param page - page of results to fetch\n     */\n    page (page : number) : AgolQuery {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page : number) {\n        if(isNaN(page) || page*1<0) return;\n        this._query.page = page*1;\n    }\n\n    getPage() : number {\n        return this._query.page;\n    }\n\n    nextPage() {\n        this.setPage(this._query.page+1);\n    }\n\n    previousPage() {\n        this.setPage(this._query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param size - page size to request\n     */\n    pageSize (size : number) : AgolQuery {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size : number) {\n        if(isNaN(size) || size*1<0) return;\n        this._query.size = size*1;\n    }\n\n    getPageSize() : number {\n        return this._query.size;\n    }\n\n}\n\n\n\n\nclass AgolService {\n\n\n    // @ts-ignore\n    private baseUrl : string;\n    private client : GPHttpClient;\n    private timeout : number = 30000;\n    private httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n        this.timeout = 30000;\n    }\n\n    setUrl(baseUrl : string) {\n        this.baseUrl = baseUrl + '/api/agol';\n    }\n\n    // -----------------------------------------------------------------------\n    // AGOL ORGS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL organization to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getOrg (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/orgs/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getOrg() - Error fetching org ${id}: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param arg - either JS object of query parameters or Query instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchOrgs (arg : AgolQuery, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/orgs',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchOrgs() - Error searching orgs: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL GROUPS METHODS\n\n\n    /**\n     * @param id - identifier of AGOL group to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getGroup (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/groups/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getGroup() - Error fetching group ${id}: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchGroups (arg : AgolQuery, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/groups',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchGroups() - Error searching groups: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL ITEMS METHODS\n\n    /**\n     * @param id - identifier of AGOL item to fetch\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving Item object or an error\n     */\n    getItem (id : string, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( id )\n        .then( (id : string) => {\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url:this.baseUrl + '/items/' + id,\n                options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getItem() - Error fetching item ${id}: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param arg - either JS object of query parameters or AgolQuery instance\n     * @param options - optional set of request options to apply to xhr request\n     * @return Promise resolving search results\n     */\n    searchItems (arg : AgolQuery, options ?: any) : Q.Promise<any> {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            let ps = params.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\",\n                url: this.baseUrl + '/items',\n                params: ps,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchItems() - Error searching items: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /* --------------------------- */\n\n    getAgolId (obj : any) : string|null {\n        if(!obj) return null;\n\n        if(!obj.type) return null;\n\n        if(ItemTypes.ORGANIZATION === obj.type || 'Group' === obj.type) {\n            return obj.id;\n        }\n\n        if(!obj.identifiers || !obj.identifiers.length) return null;\n        let ids = obj.identifiers.filter( (id:string) => ~id.indexOf('agol:'));\n        if(!ids.length) return null;\n        return ids[0].replace('agol:','');\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any} ) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout || Config.timeout || 30000 ;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts : {[key:string]:any}) : Q.Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"AGOLService.execute() - Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return Q.reject(e);\n        });\n    }\n\n}\n\nexport {\n    AgolService as default,\n    AgolService,\n    AgolQuery\n};\n","\n\nimport ItemTypes from '../shared/types';\n\n\nconst Categories : {[key:string]:string} = {\n    UNKNOWN:         'Unknown Category',\n    DATASET:         'Dataset',\n    SERVICE:         'Service',\n    LAYER:           'Layer',\n    MAP:             'Map',\n    GALLERY:         'Gallery',\n    COMMUNITY:       'Community',\n    CONTACT:         'Contact',\n    ORGANIZATION:    'Organization',\n    CONCEPT:         'Concept',\n    CONCEPT_SCHEME:  'Concept Scheme',\n    APPLICATION:     'Application',\n    TOPIC:           'Topic',\n    WEBSITE:         'WebSite',\n    RIGHTS_STATEMENT: 'RightsStatement',\n    KNOWLEDGE_GRAPH: 'Knowledge Graph',\n    USER:            'User',\n    COMMUNITY_POST:  'Community Post',   //post within a community portal\n    COMMUNITY_PAGE:  'Community Page',   //page within a community portal\n    APP_PAGE:        'Application Page', //page/view within a client application\n};\n\nconst Events : {[key:string]:string} = {\n    ACCESSED:   'Accessed',  //related item was accessed using API\n    DISPLAYED:  'Displayed', //related item was displayed in a native form (map)\n    VIEWED:     'Viewed',    //related item was viewed in general form (metadata)\n    CREATED:    'Created',\n    EDITED:     'Edited',\n    DELETED:    'Deleted',\n    CLONED:     'Cloned',\n    ADDED:      'Added',    //item was added to another (ie, layer on map)\n    REMOVED:    'Removed',  //item was removed from another (ie, item from gallery)\n    EXPORTED:   'Exported',\n    IMPORTED:   'Imported'\n};\n\n\nfunction getCategory(type : string) : string {\n    let result = Categories.UNKNOWN;\n    if(type) {\n        let cats : string[] = Object.keys(Categories).map((k:string)=>Categories[k]);\n        //if existing category was specified\n        if(~cats.indexOf(type))\n            return type;\n        //if an ItemType with prefix was specified (strip off prefix)\n        else if(~type.indexOf(':')) {\n            let cat = type.split(':')[1];\n            if(~cats.indexOf(cat))\n                return cat;\n        }\n    }\n    return result;\n}\n\n\n\n/**\n *\n */\nclass Event {\n\n    private category : string;\n    private type : string;\n    private item : any = null;\n    private related : any = null;\n\n    constructor(category : string, type : string, item ?: any, related ?: any) {\n        if(!category || ! type) {\n            throw new Error(\"TrackingService Event - Must specific an event \" +\n            \"category and event type when constructing events\");\n        }\n        this.category = category;\n        this.type = type;\n        this.setItem(item);\n        this.setRelated(related);\n    }\n    getCategory() : string { return this.category; }\n    getType() : string { return this.type; }\n    getItem() : any { return this.item; }\n    setItem(item : any) { this.item = item ? (item.id || item) : null; }\n    getRelated() : any { return this.related; }\n    setRelated(related : any) {\n        this.related = related ? (related.id || related) : null;\n    }\n}\n\n\n\n/**\n * @param eventType - type of event being created\n * @param item - GeoPlatform Item instance\n * @return list of event objects\n */\nfunction TrackingEventFactory(eventType : string, item : any) : Event[] {\n    let result : Event[] = [] as Event[];\n    if(eventType && item && item.type) {\n        if(ItemTypes.MAP === item.type) {\n            result.push( new Event(Categories.MAP, eventType, item) );\n            if(Events.DISPLAYED === eventType) {\n\n                item.layers.forEach( (layerState : any) => {\n                    if(layerState.layer) {\n                        let layerEvents = TrackingEventFactory(eventType, layerState.layer)\n                            .filter(e=>e!==null);\n                        if(layerEvents && layerEvents.length) {\n                            result = result.concat(layerEvents);\n                        }\n                    }\n                });\n\n                if(item.baseLayer) {\n                    let baseEvents = TrackingEventFactory(eventType, item.baseLayer)\n                        .filter(e=>e!==null);\n                    if(baseEvents && baseEvents.length)\n                        result = result.concat( baseEvents );\n                }\n            }\n\n        } else if(ItemTypes.LAYER === item.type) {\n            result.push( new Event(Categories.LAYER, eventType, item) );\n            if(Events.DISPLAYED === eventType && item.services && item.services.length) {\n                result.push( new Event(Categories.SERVICE, eventType, item.services[0]) );\n            }\n        } else {\n            let category = getCategory(item.type);\n            result.push( new Event(category, eventType, item) );\n        }\n    }\n    // else {\n    //     if(!event) console.log(\"Missing event\");\n    //     if(!item) console.log(\"Missing item\");\n    //     if(!item.type) console.log(\"Missing item type\");\n    // }\n    return result;\n}\n\n\n\n\n\n/**\n *\n */\nclass DefaultTrackingServiceProvider {\n    constructor() {}\n    logEvent(\n        category : string,\n        event : string,\n        item ?: any,\n        // @ts-ignore\n        related ?: any\n    ) {\n        console.log( \"EVENT (\" + category + \") - \" + event + \" : \" + item);\n    }\n    // logPageView( view, data ) {\n    //     console.log(\"PAGEVIEW \" + view + (data ? \" : \" + JSON.stringify(data) : '') );\n    // }\n    logSearch(params : string, resultCount : string|number) {\n        console.log( \"Query : \" + JSON.stringify(params) + \" found \" + resultCount+ \" matches\");\n    }\n}\n\n\n\n\n\n\n/**\n * TrackingService\n *\n * Service for logging events related to usage of the GeoPlatform and its data\n *\n * Example:\n *\n *   import { TrackingService, EventCategories, EventTypes } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *   tracker.event( Event.of(EventCategories.MAP, EventTypes.VIEWED, map) );\n *\n * Multi-event example:\n *\n *   import {\n *      TrackingService, TrackingEventCategories, TrackingEventTypes, TrackingEventFactory\n *   } from 'geoplatform.client';\n *\n *   let tracker = new TrackingService();\n *   tracker.setProvider( ... );\n *\n *   let events = [\n *       TrackingEvent.of( TrackingCategories.MAP, TrackingEventTypes.VIEWED, this.map )\n *       TrackingEvent.of( TrackingCategories.LAYER, TrackingEventTypes.VIEWED, this.map.baseLayer )\n *   ];\n *   tracker.event(events);\n *\n *   //OR use the event factory:\n *   tracker.event( TrackingEventFactory(EventTypes.VIEWED, this.map) );\n */\nclass TrackingService {\n\n    private provider : any = null;\n\n    constructor(options ?: any) {\n        if(options && typeof(options) === 'object')\n            Object.assign(this, options);\n\n        if(!this.provider)\n            this.setProvider(new DefaultTrackingServiceProvider());\n    }\n\n    /**\n     * @param provider -\n     */\n    setProvider(provider : any) {\n        if(provider)\n            this.provider = provider;\n    }\n\n    /**\n     * @param event - event to log\n     * @return TrackingService\n     */\n    event( event : Event ) : TrackingService {\n        this.logEvent( event );\n        return this;\n    }\n\n    /**\n     * @param event - event to log\n     */\n    logEvent( event : Event|Event[]) {\n        if(!this.provider || !this.provider.logEvent || !event) return;\n\n        if(Array.isArray(event)) {\n            let events : Event[] = event as Event[];\n            events.forEach( (evt : Event) => this.logEvent(evt) );\n\n        } else {\n            let evt : Event = event as Event;\n            try {\n                this.provider.logEvent(\n                    evt.getCategory(),\n                    evt.getType(),\n                    evt.getItem(),\n                    evt.getRelated()\n                );\n            } catch(e) {\n                console.log(\n                    \"TrackingService.logEvent() - Error logging event (\" +\n                    evt.getCategory() + \", \" + evt.getType() + \", \" +\n                    evt.getItem() + \") - \" + e.message\n                );\n            }\n        }\n    }\n\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @return TrackingService\n     * @deprecated use svc.event( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    pageView( view : string, data : any) {\n        this.logPageView(view, data);\n        return this;\n    }\n\n    /**\n     * @param view - name of the view being activated\n     * @param data - additional context to supply for the event\n     * @deprecated use svc.logEvent( new Event(EventCategories.APP_PAGE, EventTypes.VIEWED, pageId) )\n     */\n    logPageView(\n        view : string,\n        // @ts-ignore\n        data ?: any\n    ) {\n        this.logEvent( new Event(Categories.APP_PAGE, Events.VIEWED, view) );\n        // if(this.provider && this.provider.logPageView) {\n        //     this.provider.logPageView(view, data);\n        // }\n    }\n\n    /**\n     * @param params\n     * @param resultCount\n     */\n    logSearch (params : any, resultCount : string|number) {\n        this.provider.logSearch(params, resultCount);\n    }\n\n}\n\n\nexport {\n    Event as TrackingEvent,\n    TrackingService,\n    Categories as TrackingCategories,\n    Events as TrackingTypes,\n    TrackingEventFactory\n};\n","\nimport * as Q from 'q';\nimport Config from '../shared/config';\nimport KGQuery from '../shared/kg-query';\nimport GPHttpClient from '../http/client';\n\nclass KGService {\n\n    // @ts-ignore\n    private apiBase : string;\n    // @ts-ignore\n    private baseUrl : string;\n    private client : GPHttpClient;\n    private timeout : number = 30000;\n    private httpMethods : string[] = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n\n    constructor(url : string, httpClient : GPHttpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n    }\n\n    setUrl(baseUrl : string) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/recommender';\n    }\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving recommended concepts as search results\n     */\n    suggest (query : KGQuery, options ?: any) : Q.Promise<any> {\n        let url = this.baseUrl + '/suggest';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.suggest() - Error suggesting concepts: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept types as search results\n     */\n    types (query : KGQuery, options ?: any) : Q.Promise<any> {\n        let url = this.baseUrl + '/types';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.types() - Error searching types: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param query - optional query parameters to include with request\n     * @param options - optional config to send with http request\n     * @return Promise resolving concept sources as search results\n     */\n    sources (query : KGQuery, options ?: any) : Q.Promise<any> {\n        let url = this.baseUrl + '/sources';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.sources() - Error searching sources: ${e.message}`);\n            Object.assign(err, e);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n\n    /**\n     * internal method used by exposed methods\n     */\n    _search (url : string, query : KGQuery, options ?: any) : Q.Promise<any> {\n        return Q.resolve( true )\n        .then( () => {\n            let q : { [key:string]:any } = query.getQuery();\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:q, options:options\n            });\n            return this.execute(opts);\n        });\n    }\n\n\n\n    /**\n     * @param method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param url - destination of xhr request\n     * @param params - object to be sent with request as query parameters\n     * @param data - object to be sent with request as body\n     * @param options - optional object defining request options\n     * @return request options for xhr\n     */\n    buildRequest (options : {[key:string]:any}) : {[key:string]:any} {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout || Config.timeout || 30000;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options : {[key:string]:any}) : {[key:string]:any} {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts : {[key:string]:any}) : Q.Promise<any> {\n        return this.client.execute(opts)\n        .catch(e => {\n            if(e === null || typeof(e) === 'undefined') {\n                e = new Error(\"KGService.execute() - Request failed but didn't return an \" +\n                \"error. This is most likely because the request timed out\");\n            }\n            return Q.reject(e);\n        });\n    }\n\n}\n\nexport default KGService;\n","\nfunction apply() {\n    if (typeof Object.assign != 'function') {\n      // Must be writable: true, enumerable: false, configurable: true\n      Object.defineProperty(Object, \"assign\", {\n        value: function assign(target : any, varArgs : any[]) { // .length of function is 2\n\n          if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          if(varArgs) { }\n          var to = Object(target);\n\n          for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource != null) { // Skip over if undefined or null\n              for (var nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n          return to;\n        },\n        writable: true,\n        configurable: true\n      });\n    }\n}\n\n\nexport default function() {\n    apply();\n};\n","import Polyfills from \"./shared/polyfills\";\nPolyfills();\n\nimport GPError from './shared/error';\nimport ItemTypes from './shared/types';\nimport KGQuery from './shared/kg-query';\nimport KGClassifiers from './shared/classifiers';\nimport QueryParameters from './shared/parameters';\nimport {\n    Query,\n    Fields as QueryFields,\n    Facets as QueryFacets\n} from './shared/query';\nimport QueryFactory    from './shared/query-factory';\nimport Config from './shared/config';\n\nimport {\n    Item, Asset, Dataset, Service, Layer, Map, Gallery,\n    Application, Topic, WebSite,\n    Organization, Contact, ConceptScheme, SearchResults, ServiceTypeStandard\n} from \"./shared/models\";\n\nimport GPHttpClient from './http/client';\n// import JQueryHttpClient from './http/jq';\nimport XHRHttpClient from './http/xhr';\n\n\nimport ItemService from './services/item';\nimport DatasetService from './services/dataset';\nimport MapService from './services/map';\nimport LayerService from './services/layer';\nimport ServiceService from './services/service';\nimport GalleryService from './services/gallery';\nimport UtilsService from './services/utils';\nimport { AgolService, AgolQuery } from './services/agol';\n\nimport {\n    TrackingEvent,\n    TrackingService,\n    TrackingCategories,\n    TrackingTypes,\n    TrackingEventFactory\n} from './services/tracking';\n\nimport KGService from './services/kg';\nimport ServiceFactory  from './services/factory';\n\n\n\n\nexport {\n\n    //shared classes\n    GPError,\n    ItemTypes,\n    QueryParameters,\n    QueryFacets,\n    Query,\n    QueryFactory,\n    QueryFields,\n    KGQuery,\n    KGClassifiers,\n    AgolQuery,\n\n    //model interfaces\n    Item, Asset, Dataset, Service, Layer, Map, Gallery,\n    Application, Topic, WebSite,\n    Organization, Contact, ConceptScheme, SearchResults, ServiceTypeStandard,\n\n    Config,\n\n    GPHttpClient,\n    XHRHttpClient,\n\n\n    ItemService,\n    DatasetService,\n    MapService,\n    LayerService,\n    ServiceService,\n    GalleryService,\n    UtilsService,\n    KGService,\n    ServiceFactory,\n    AgolService,\n\n\n    TrackingEvent,\n    TrackingService,\n    TrackingCategories,\n    TrackingTypes,\n    TrackingEventFactory\n\n};\n","\nimport Query from './query';\n\nexport default function() {\n    return new Query();\n}\n","\nimport GPHttpClient from '../http/client';\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport LayerService from './layer';\nimport ServiceService from './service';\nimport GalleryService from './gallery';\nimport DatasetService from './dataset';\nimport MapService from './map';\n\n/**\n * @param arg - string type or object with type property\n * @param baseUrl - base endpoint of GeoPlatform API\n * @return ItemService\n */\nconst ServiceFactory = function(arg : any, baseUrl : string, httpClient : GPHttpClient) : any {\n    let type = (typeof(arg) === 'string') ?\n        arg : (arg && arg.type ? arg.type : null);\n    if(!type) throw new Error(\"Must provide a type or object with a type specified\");\n    if(!baseUrl) throw new Error(\"Must provide a base url\");\n    if(!httpClient) throw new Error(\"Must provide an http client to use to make requests\");\n    switch(type) {\n        case ItemTypes.LAYER:   return new LayerService(  baseUrl, httpClient);\n        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);\n        case ItemTypes.MAP:     return new MapService(    baseUrl, httpClient);\n        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);\n        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);\n        default:                return new ItemService(   baseUrl, httpClient);\n    }\n};\n\nexport default ServiceFactory;\n"]}