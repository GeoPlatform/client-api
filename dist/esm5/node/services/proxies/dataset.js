/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DatasetService } from "@geoplatform/client";
import ServiceProxy from './base';
var ɵ0 = function (svc, req) {
    return svc.search(req.query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
// @ts-ignore
result, res) {
    res.status(204).end();
}, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ8 = function (result, res) {
    /** @type {?} */
    var mimeType = result.headers['content-type'];
    /** @type {?} */
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
};
/** @type {?} */
var Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'datasets',
        auth: false,
        execFn: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'datasets/:id',
        auth: false,
        execFn: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'datasets',
        auth: true,
        execFn: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'datasets/:id',
        auth: true,
        execFn: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'datasets/:id',
        auth: true,
        execFn: ɵ4,
        respFn: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'datasets/:id',
        auth: true,
        execFn: ɵ6
    },
    {
        key: 'export',
        method: 'get',
        path: 'datasets/:id/export',
        auth: false,
        execFn: ɵ7,
        respFn: ɵ8
    }
];
/**
 * DatasetServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 * @param {?=} options
 * @return {?}
 */
function DatasetServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    /** @type {?} */
    var router = options.router;
    if (!options.router) {
        /** @type {?} */
        var express = require('express');
        if (!express) {
            throw new Error("DatasetServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("DatasetServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = DatasetService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default DatasetServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNldC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW9wbGF0Zm9ybS9jbGllbnQvbm9kZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Byb3hpZXMvZGF0YXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sWUFBWSxNQUFNLFFBQVEsQ0FBQztTQVNsQixVQUFTLEdBQW9CLEVBQUUsR0FBUztJQUM1QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2hDLE9BT08sVUFBUyxHQUFvQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDakMsT0FPTyxVQUFTLEdBQW9CLEVBQUUsR0FBUztJQUM1QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzdCLE9BT08sVUFBUyxHQUFvQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM3QixPQU9PLFVBQVMsR0FBb0IsRUFBRSxHQUFTO0lBQzVDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3BDLE9BQ087O0FBRUosQUFEQSxhQUFhO0FBQ2IsTUFBWSxFQUNaLEdBQVM7SUFDVCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ3pCLE9BT08sVUFBUyxHQUFvQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUFF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QUFDO0NBQ2pCO0FBRUQsZUFBZSxtQkFBbUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQge0RhdGFzZXRTZXJ2aWNlfSBmcm9tIFwiQGdlb3BsYXRmb3JtL2NsaWVudFwiO1xuaW1wb3J0IFNlcnZpY2VQcm94eSBmcm9tICcuL2Jhc2UnO1xuXG5cbmNvbnN0IFJvdXRlcyA9IFtcbiAgICB7XG4gICAgICAgIGtleTogJ3NlYXJjaCcsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHBhdGg6ICdkYXRhc2V0cycsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBleGVjRm46IGZ1bmN0aW9uKHN2YyA6IERhdGFzZXRTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuc2VhcmNoKHJlcS5xdWVyeSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnZ2V0JyxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgcGF0aDogJ2RhdGFzZXRzLzppZCcsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBleGVjRm46IGZ1bmN0aW9uKHN2YyA6IERhdGFzZXRTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0KHJlcS5wYXJhbXMuaWQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2NyZWF0ZScsXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBwYXRoOiAnZGF0YXNldHMnLFxuICAgICAgICBhdXRoOiB0cnVlLFxuICAgICAgICBleGVjRm46IGZ1bmN0aW9uKHN2YyA6IERhdGFzZXRTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuc2F2ZShyZXEuYm9keSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAndXBkYXRlJyxcbiAgICAgICAgbWV0aG9kOiAncHV0JyxcbiAgICAgICAgcGF0aDogJ2RhdGFzZXRzLzppZCcsXG4gICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgIGV4ZWNGbjogZnVuY3Rpb24oc3ZjIDogRGF0YXNldFNlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5zYXZlKHJlcS5ib2R5KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdkZWxldGUnLFxuICAgICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgICBwYXRoOiAnZGF0YXNldHMvOmlkJyxcbiAgICAgICAgYXV0aDogdHJ1ZSxcbiAgICAgICAgZXhlY0ZuOiBmdW5jdGlvbihzdmMgOiBEYXRhc2V0U2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnJlbW92ZShyZXEucGFyYW1zLmlkKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcEZuOiBmdW5jdGlvbihcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHJlc3VsdCA6IGFueSxcbiAgICAgICAgICAgIHJlcyA6IGFueSkge1xuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDQpLmVuZCgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ3BhdGNoJyxcbiAgICAgICAgbWV0aG9kOiAncGF0Y2gnLFxuICAgICAgICBwYXRoOiAnZGF0YXNldHMvOmlkJyxcbiAgICAgICAgYXV0aDogdHJ1ZSxcbiAgICAgICAgZXhlY0ZuOiBmdW5jdGlvbihzdmMgOiBEYXRhc2V0U2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnBhdGNoKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5KTsgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdleHBvcnQnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnZGF0YXNldHMvOmlkL2V4cG9ydCcsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBleGVjRm46IGZ1bmN0aW9uKHN2YyA6IERhdGFzZXRTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuZXhwb3J0KHJlcS5wYXJhbXMuaWQsIHJlcS5xdWVyeS5mb3JtYXQpO1xuICAgICAgICB9LFxuICAgICAgICByZXNwRm46IGZ1bmN0aW9uKHJlc3VsdCA6IGFueSwgcmVzIDogYW55KSB7XG4gICAgICAgICAgICBsZXQgbWltZVR5cGUgPSByZXN1bHQuaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gICAgICAgICAgICBsZXQgZGlzcG9zaXRpb24gPSByZXN1bHQuaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddO1xuICAgICAgICAgICAgcmVzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBtaW1lVHlwZSk7XG4gICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LWRpc3Bvc2l0aW9uJywgZGlzcG9zaXRpb24pO1xuICAgICAgICAgICAgcmVzLnNlbmQocmVzdWx0LmJvZHkpO1xuICAgICAgICB9XG4gICAgfVxuXTtcblxuXG4vKipcbiAqIERhdGFzZXRTZXJ2aWNlUHJveHlcbiAqXG4gKiBzZWUgZXhhbXBsZXMvbm9kZS9pdGVtLXByb3h5IGZvciBhbiBpbi1kZXB0aCBleGFtcGxlXG4gKi9cbmZ1bmN0aW9uIERhdGFzZXRTZXJ2aWNlUHJveHkoIG9wdGlvbnMgPzogYW55ICkge1xuXG4gICAgaWYodHlwZW9mKG9wdGlvbnMpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfTtcblxuICAgIGxldCByb3V0ZXIgPSBvcHRpb25zLnJvdXRlcjtcbiAgICBpZighb3B0aW9ucy5yb3V0ZXIpIHtcbiAgICAgICAgbGV0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG4gICAgICAgIGlmKCFleHByZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhc2V0U2VydmljZVByb3h5KCkgLSBNdXN0IHByb3ZpZGVcIiArXG4gICAgICAgICAgICAgICAgXCInb3B0aW9ucy5yb3V0ZXInIG9yIGluY2x1ZGUgZXhwcmVzcyBhcyBhIGRlcGVuZGVuY3lcIik7XG4gICAgICAgIH1cbiAgICAgICAgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbiAgICB9XG5cbiAgICBpZighcm91dGVyKSB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhc2V0U2VydmljZVByb3h5KCkgLSBcIiArXG4gICAgICAgIFwiVW5hYmxlIHRvIGNyZWF0ZSBwcm94eSByb3V0ZSwgbWlzc2luZyByb3V0ZXJcIik7XG5cbiAgICBvcHRpb25zLnNlcnZpY2VDbGFzcyA9IERhdGFzZXRTZXJ2aWNlO1xuICAgIFNlcnZpY2VQcm94eS5iaW5kUm91dGVzKHJvdXRlciwgUm91dGVzLCBvcHRpb25zKTtcblxuICAgIHJldHVybiByb3V0ZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFzZXRTZXJ2aWNlUHJveHk7XG4iXX0=