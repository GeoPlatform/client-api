{"version":3,"file":"geoplatform.client.js","sources":["../../src/http/jq.js","../../src/http/ng.js","../../src/http/node.js","../../src/shared/types.js","../../src/services/item.js","../../src/services/dataset.js","../../src/services/map.js","../../src/services/layer.js","../../src/services/service.js","../../src/services/gallery.js","../../src/services/utils.js","../../src/services/agol.js","../../src/shared/parameters.js","../../src/shared/kg-query.js","../../src/services/kg.js","../../src/shared/classifiers.js","../../src/shared/query.js","../../src/shared/query-factory.js","../../src/services/factory.js","../../src/shared/config.js"],"sourcesContent":["\nimport Q from 'q';\n\nclass JQueryHttpClient {\n\n    /**\n     * @param {integer} options.timeout\n     * @param {string} options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options) {\n        options = options || {};\n        this.setTimeout(options.timeout||10000);\n        this.setAuthToken(options.token);\n    }\n\n    setTimeout(timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param {string|Function} arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    createRequestOpts(options) {\n\n        let opts = {\n            method: options.method,\n            url: options.url,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.json === true)\n            opts.dataType = 'json';\n\n        if(options.params) {\n            opts.data = options.params;\n            opts.processData = true;\n        }\n\n        if(options.data) {\n            opts.data = options.data;\n            opts.processData = options.processData || false;\n            opts.contentType = 'application/json';\n        }\n\n        //set authorization header if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.headers = opts.headers || {};\n                opts.headers.Authorization = 'Bearer ' + token;\n            }\n        }\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        return opts;\n    }\n\n\n    execute(opts) {\n\n        if(typeof(jQuery) === 'undefined') {\n            throw new Error(\"jQuery is not available. Ensure it is included in your application\");\n        }\n        let d = Q.defer();\n        opts.success = function(data) { d.resolve(data); };\n        opts.error = function(xhr, status, message) { d.reject(new Error(message)); };\n        jQuery.ajax(opts);\n        return d.promise;\n    }\n\n}\n\nexport default JQueryHttpClient;\n","\nimport Q from 'q';\n\nclass NGHttpClient {\n\n    /**\n     * @param {integer} options.timeout\n     * @param {string} options.token - the bearer token or a function to retrieve it\n     * @param {Object} options.$http - angular $http service instance\n     */\n    constructor(options) {\n        if(typeof(angular) === 'undefined')\n            throw new Error(\"Angular not defined\");\n\n        options = options || {};\n        this.setTimeout(options.timeout||10000);\n        this.setAuthToken(options.token);\n\n        if(options.$http)\n            this.$http = options.$http;\n\n    }\n\n    setTimeout(timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param {string|Function} arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    createRequestOpts(options) {\n\n        let opts = {\n            method: options.method,\n            url: options.url,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.json === true)\n            opts.dataType = 'json';\n\n        if(options.params) {\n            opts.params = options.params;\n        }\n\n        if(options.data) {\n            opts.data = options.data;\n        }\n\n        //set authorization token if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.headers = opts.headers || {};\n                opts.headers.Authorization = 'Bearer ' + token;\n                opts.useXDomain = true;\n            }\n        }\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        return opts;\n    }\n\n    execute(opts) {\n\n        if(typeof(angular) === 'undefined')\n            throw new Error(\"Angular is not defined, ensure you have included it as a dependency in your application\");\n\n        let $http = this.$http || angular.injector(['ng']).get('$http');\n        return Q.resolve( $http )\n        .then($http => {\n            if(typeof($http) === 'undefined')\n                throw new Error(\"Angular $http not resolved\");\n\n            // console.log(opts);\n            return $http(opts);\n        })\n        .then(response=>response.data)\n        .catch(response=>Q.reject(response.data));\n    }\n\n}\n\nexport default NGHttpClient;\n","\nimport Q from 'q';\n\nclass NodeHttpClient {\n\n    /**\n     * @param {integer} options.timeout\n     * @param {string} options.token - the bearer token or a function to retrieve it\n     */\n    constructor(options) {\n        options = options || {};\n        this.setTimeout(options.timeout||10000);\n        this.setAuthToken(options.token);\n    }\n\n    setTimeout(timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * @param {string|Function} arg - specify the bearer token or a function to retrieve it\n     */\n    setAuthToken(arg) {\n        if(arg && typeof(arg) === 'string')\n            this.token = function() { return arg; };\n        else if(arg && typeof(arg) === 'function')\n            this.token = arg;\n        //else do nothing\n    }\n\n    createRequestOpts(options) {\n\n        let opts = {\n            method: options.method,\n            url: options.url,\n            json: false !== options.json,\n            timeout: options.timeout || this.timeout\n        };\n\n        if(options.params) {\n            opts.qs = options.params;\n        }\n\n        if(options.file) {\n            const fs = require('fs');\n            if(!fs) throw new Error(\"Module 'fs' not available\");\n            opts.formData = {\n                file: {\n                    value:  fs.createReadStream(options.file.path),\n                    options: {\n                        filename: options.file.originalFilename\n                    }\n                }\n            };\n            Object.assign(opts.formData, options.data||{});\n\n        } else if(options.data) {\n            if(options.formData) {\n                opts.formData = options.data;\n            } else {\n                opts.body = options.data;\n            }\n        }\n\n        //set authorization header if one was provided\n        if(this.token) {\n            let token = this.token();\n            if(token) {\n                opts.auth = { 'bearer': token };\n            }\n        }\n\n        //copy over user-supplied options\n        if(options.options) {\n            for(let o in options.options) {\n                if(options.options.hasOwnProperty(o)) {\n                    opts[o] = options.options[o];\n                }\n            }\n        }\n\n        // console.log(JSON.stringify(opts));\n\n        return opts;\n    }\n\n\n\n    /**\n     *\n     */\n    execute(options) {\n        let deferred = Q.defer();\n\n        const request = require('request');\n        if(!request) {\n            throw new Error(\"Module 'request' not available\");\n        }\n        // require('request-debug')(request);\n\n        request(options, (error, response, body) => {\n            this.checkAndHandleError(error, response)\n            .then( () =>  {\n                if(options.json === false)\n                    deferred.resolve( response );\n                else\n                    deferred.resolve( body );\n            })\n            .catch( e => deferred.reject(e) );\n        });\n        return deferred.promise;\n    }\n\n\n    /**\n     *\n     */\n    checkAndHandleError (error, response) {\n\n        let props = {\n            message: null,\n            error: null,    //error type\n            status: 200\n        };\n\n        if(error) {\n            // Logger.debug(\"Error generated by request library: \" + error.code);\n\n            if(error.code === 'ETIMEDOUT' || error.code === 'ESOCKETTIMEDOUT') {\n\n                props.status = 500;\n                props.error = \"Connection Timeout\";\n                props.message = \"The response from the service took too long to read\";\n\n                if(error.connect === true) {\n                    props.message = \"Unable to establish a connection to the service\";\n                }\n\n            } else {\n                return Q.reject(error);\n            }\n\n        } else if(response.statusCode < 200 || response.statusCode > 204) {\n\n            // Logger.debug('Error returned by remote endpoint (' + response.statusCode + ')');\n            // Logger.debug(JSON.stringify(response));\n\n            props.status = response.statusCode;\n\n            if(response.body && typeof(response.body) === 'object') {\n                props = response.body;\n                props.status = props.status || response.statusCode;\n                props.message = props.message || \"An error occurred communicating with service\";\n\n                if(response.statusCode === 409) {\n                    let sidx = response.body.message.indexOf(\" \");\n                    let eidx = response.body.message.indexOf(' already exists');\n                    if(sidx >= 0 && eidx > sidx) {\n                        props.item = response.body.message.substring(sidx+1, eidx);\n                    }\n                }\n\n            } else {\n\n                switch(response.statusCode) {\n                    case 404 :\n                        props.error = \"Not Found\";\n                        props.message = response.request.uri.pathname + \" cannot be found\";\n                        break;\n                    case 401 :\n                        props.error = \"Unauthenticated\";\n                        props.message = \"You are not authenticated\";\n                        break;\n                    case 403 :\n                        props.error = \"Unauthorized\";\n                        props.message = \"You are not authorized to access \" + response.request.uri.pathname;\n                        break;\n                    case 409 :\n                        props.error = \"Conflict\";\n                        props.message = \"Item already exists\";\n\n                        // pattern received is: { ..., message: 'Resource <identifier> already exists', ... }\n                        try {\n                            let json = JSON.parse(response.body);\n                            let sidx = json.message.indexOf(\" \");\n                            let eidx = json.message.indexOf(' already exists');\n                            if(sidx >= 0 && eidx > sidx) {\n                                props.item = json.message.substring(sidx+1, eidx);\n                            }\n                        } catch( e ) {\n                            message += '.  Unable to extract existing identifier from service response';\n                        }\n                        break;\n\n                    default:\n\n                        try {\n                            let json = JSON.parse(response.body);\n                            props = json;\n                            props.status = response.statusCode;\n                            // Logger.debug(\"PARSED ERROR: \" + JSON.stringify(props));\n\n                        } catch (e) {\n                            props.error = \"Server Error\";\n                            props.message = response.body;\n                            // Logger.debug(\"DEFAULTED ERROR: \" + JSON.stringify(props));\n                        }\n                }\n\n            }\n\n        }\n\n        if( props.status < 200 || props.status > 204 ) {\n\n            props.error = props.error || \"Server Error\";\n            props.status = props.status || response.statusCode;\n            props.message = props.message || \"An error occurred communicating with service\";\n\n            let err = new Error(props.message);\n            Object.assign(err, props);\n\n            // Logger.debug(\"UTILS.checkAndHandleError : \" + err);\n            // Logger.debug(\"UTILS.checkAndHandleError : \" + JSON.stringify(err));\n            // Logger.debug(\"UTILS.checkAndHandleError : \" + err.message);\n            return Q.reject(err);\n        }\n\n        return Q.resolve();\n    }\n\n}\n\n\nexport default NodeHttpClient;\n","\n\nexport default {\n    DATASET         : \"dcat:Dataset\",\n    SERVICE         : \"regp:Service\",\n    LAYER           : \"Layer\",\n    MAP             : \"Map\",\n    GALLERY         : \"Gallery\",\n    COMMUNITY       : 'Community',\n    ORGANIZATION    : \"org:Organization\",\n    CONTACT         : \"vcard:VCard\",\n    CONCEPT         : \"skos:Concept\",\n    CONCEPT_SCHEME  : \"skos:ConceptScheme\",\n    STANDARD        : 'dct:Standard'\n};\n","\nimport Q from 'q';\n\n\n/**\n * ItemService\n * service for working with the GeoPlatform API to\n * retrieve and manipulate items.\n *\n * Ex Searching Items\n *      let params = { q: 'test' };\n *      itemService.search(params).then(response=>{\n *          console.log(response.results.length + \" of \" + response.totalResults);\n *      }).catch(e=>{...});\n *\n * Ex Fetch Item:\n *      itemService.get(itemId).then(item=>{...}).catch(e=>{...});\n *\n * Ex Saving Item:\n *      itemService.save(item).then(item=>{...}).catch(e=>{...});\n *\n * Ex Deleting Item:\n *      itemService.remove(itemId).then(()=>{...}).catch(e=>{...});\n *\n * Ex Patching Item:\n *      itemService.patch(itemId,patch).then(item=>{...}).catch(e=>{...});\n *\n */\nclass ItemService {\n\n    constructor(url, httpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n        this.timeout = 10000;\n        this.httpMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n    }\n\n    setUrl(baseUrl) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/items';\n    }\n\n\n    /**\n     * @param {string} id - identifier of item to fetch\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    get (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.get() - Error fetching item ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {Object} itemObj - item to create or update\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    save (itemObj, options) {\n\n        return Q.resolve( itemObj )\n        .then( item => {\n\n            let method = 'POST',\n                url = this.baseUrl;\n            if(item.id) {\n                method = \"PUT\";\n                url += '/' + item.id;\n            } else {\n                //if item is being created and has no URI already defined\n                // attempt to create one using the API's method for doing so\n                // and then attempt the actual item creation\n                if(!item.uri) {\n                    return this.getUri(item, options)\n                    .then( uri => {\n                        item.uri = uri;\n                        let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n                        return this.execute(opts);\n                    });\n                }\n            }\n\n            let opts = this.buildRequest({method:method, url:url, data:item, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.save() - Error saving item: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {string} id - identifier of item to delete\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving true if successful or an error\n     */\n    remove (id, options) {\n\n        return Q.resolve( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:\"DELETE\", url: url, options: options\n            });\n            return this.execute(opts);\n        })\n        .then(response => true)\n        .catch(e => {\n            let err = new Error(`ItemService.remove() - Error deleting item ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {string} id - identifier of item to patch\n     * @param {Object} patch - HTTP-PATCH compliant set of properties to patch\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    patch (id, patch, options) {\n\n        return Q.resolve( this.baseUrl + '/' + id )\n        .then( url => {\n            let opts = this.buildRequest({\n                method: \"PATCH\", url: url, data: patch, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.patch() - Error patching item ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {Object} arg - either JS object of query parameters or GeoPlatform.Query instance\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving search results\n     */\n    search (arg, options) {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            if(params && typeof(params.getQuery) !== 'undefined') {\n                //if passed a GeoPlatform.Query object,\n                // convert to parameters object\n                params = params.getQuery();\n            }\n            let opts = this.buildRequest({\n                method:\"GET\", url: this.baseUrl, params: params, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.search() - Error searching items: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     *\n     * @param {string} arg - URL to metadata document or File to upload\n     * @param {string} format - metadata format of specified document\n     * @return {Promise} resolving GeoPlatform Item\n     */\n    import (arg, format, options) {\n\n        return Q.resolve( true )\n        .then( () => {\n            if(arg===null || arg === undefined) {\n                throw new Error(\"Must provide a valid URL or File\");\n            }\n            let isFile = typeof(arg) !== 'string';\n            let ro = {\n                method:\"POST\",\n                url: this.apiBase + '/api/import',\n                processData: true,  //for jQuery\n                formData: true,     //for Node (RequestJS)\n                options: options\n            };\n            if(isFile) {\n                ro.file = arg;\n                ro.data = { format: format };\n            } else {\n                ro.formData = false;    //must be false for data to not be multi-part formdata\n                ro.data = { url: arg, format: format };\n            }\n            let opts = this.buildRequest(ro);\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`ItemService.import() - Error importing item: ${e.message}`);\n            if(e.status === 409 || ~e.message.indexOf('Item already exists')) err.status = 409;\n            if(e.item) err.item = e.item;\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param {string} id - identifier of the item to export\n     * @param {format} format - string mime type to export\n     * @return {Promise} resolving HTTP response object for enabling attachment downloading\n     */\n    export (id, format, options) {\n\n        return Q.resolve( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + id + '/export';\n            let opts = this.buildRequest({\n                method: \"GET\", url: url,\n                params: {format:format},\n                json: false,\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let msg = e.message;\n            //https://github.com/GeoPlatform/client-api/issues/1\n            if(e.statusCode && e.statusCode===406 || e.statusCode==='406') {\n                msg = `Unsupported export format specified '${format}'`;\n            }\n            let err = new Error(`ItemService.export() - Error exporting item: ${msg}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Object} object - GP object definition to generate a URI for\n     * @param {Object} options - optional request options\n     * @return {Promise} resolving string URI\n     */\n    getUri (object, options) {\n\n        return Q.resolve( object )\n        .then( obj => {\n            if(!obj || !obj.type)\n                throw new Error(\"Must provide an object with a type property\");\n            let url = this.apiBase + '/api/utils/uri';\n            let opts = this.buildRequest({\n                method: \"POST\", url: url, data: obj, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch( e => {\n            let err = new Error(`ItemService.getUri() - Error getting URI for item: ${e.message}`);\n            return Q.reject(err);\n        });\n\n    }\n\n\n    /**\n     * @param {Array} ids - list of identifiers to fetch objects for\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving list of matching items or an error\n     */\n    getMultiple (ids, options) {\n\n        return Q.resolve( ids )\n        .then( identifiers => {\n\n            let method = 'POST',\n                url = this.apiBase + '/api/fetch';\n\n            let opts = this.buildRequest({method:method, url:url, data:identifiers, options:options});\n            return this.execute(opts);\n\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.getMultiple() - Error fetching items: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Array} uris - list of URIs to retrieve objects for\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving list containing uri-item association where exists\n     */\n    exists(uris, options) {\n        return Q.resolve(uris)\n        .then( uris => {\n            let method = 'POST', url = this.apiBase + '/api/utils/exists';\n            let opts = this.buildRequest({method:method, url:url, data:uris, options:options});\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ItemService.exists() - Error resolving items: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param {string} method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param {string} url - destination of xhr request\n     * @param {Object} params - object to be sent with request as query parameters\n     * @param {Object} data - object to be sent with request as body\n     * @param {Object} options - optional object defining request options\n     * @return {Object} request options for xhr\n     */\n    buildRequest (options) {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout;\n\n        let opts = this.createRequestOpts(options);\n\n        return opts;\n    }\n\n    createRequestOpts(options) {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts) {\n        return this.client.execute(opts);\n    }\n\n}\n\nexport default ItemService;\n","\nimport ItemService from './item';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass DatasetService extends ItemService {\n\n    constructor(url, httpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/datasets';\n    }\n\n\n}\n\nexport default DatasetService;\n","\nimport Q from 'q';\nimport ItemService from './item';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass MapService extends ItemService {\n\n    constructor(url, httpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/maps';\n    }\n\n\n}\n\nexport default MapService;\n","\n\nimport Q from 'q';\nimport ItemService from './item';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass LayerService extends ItemService {\n\n    constructor(url, httpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/layers';\n    }\n\n    /**\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving style JSON object\n     */\n    style (options) {\n        return Q.resolve( true )\n        .then( () => {\n\n            let url = this.baseUrl + '/' + id + '/style';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`LayerService.style() - Error fetching style: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {string} id - GeoPlatform Layer identifier\n     * @param {Object} req identifying extent, x, y\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving feature JSON object\n     */\n    describe( id, req, options ) {\n\n        return Q.resolve( req )\n        .then( (req) => {\n\n            if(!req) {\n                throw new Error(\"Must provide describe parameters to use\");\n            }\n\n            let keys = ['bbox', 'height', 'width', 'x', 'y'];\n            let missing = keys.find(key => !req[key]);\n            if(missing) {\n                throw new Error(`Must specify ${missing} in describe req`);\n            }\n\n            let params = {\n                srs         : 'EPSG:4326',\n                bbox        : req.bbox,\n                height      : req.height,\n                width       : req.width,\n                info_format : 'text/xml',\n                x           : req.x,\n                y           : req.y,\n                i           : req.x, //WMS 1.3.0\n                j           : req.y  //WMS 1.3.0\n            };\n\n            let url = this.baseUrl + '/' + id + '/describe';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`LayerService.describe() -\n                Error describing layer feature: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {string} id - GeoPlatform Layer identifier\n     * @param {Object} params describing layer request to validate\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving empty if successful or a message if failed\n     */\n    validate(id, params, options) {\n\n        return Q.resolve( params )\n        .then( params => {\n\n            if(!params) {\n                throw new Error(\"Must provide parameters to use in layer validation\");\n            }\n\n            let url = this.baseUrl + '/' + id + '/validate';\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`LayerService.describe() -\n                Error describing layer feature: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default LayerService;\n","\n\nimport Q from 'q';\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\n\n/**\n * GeoPlatform Service service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate service objects.\n *\n * @see ItemService\n */\n\nclass ServiceService extends ItemService {\n\n    constructor(url, httpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/services';\n    }\n\n\n    /**\n     * Fetch metadata from the specified GeoPlatform Service's\n     * web-accessible implementation using either GetCapabilities\n     * or ESRI documentInfo.\n     * @param {Object} service - GeoPlatform Service object\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving service metadata\n     */\n    about( service, options ) {\n\n        return Q.resolve( service )\n        .then( svc => {\n            if(!svc)\n                throw new Error(\"Must provide service to get metadata about\");\n            let opts = this.buildRequest({\n                method:'POST', url:this.baseUrl + '/about', data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ServiceService.about() -\n                Error describing service: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param {Object} options - optional set of request options to apply to request\n     * @return {Promise} resolving service types\n     */\n    types (options) {\n\n        let query = new Query()\n        .types(ItemTypes.STANDARD)\n        .resourceTypes('ServiceType')\n        .pageSize(50)\n        .getQuery();\n\n        return Q.resolve( query )\n        .then( (params) => {\n            let url = this.apiBase + '/api/items';\n            let opts = this.buildRequest({\n                method:'GET', url:url, params:params, options:options\n            });\n            return this.execute(opts);\n        })\n        .then(response => response.results)\n        .catch(e => {\n            let err = new Error(`ServiceService.types() -\n                Error fetching service types: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Object} service - GP Service definition\n     * @param {Object} options - optional set of request options to apply to request\n     * @return {Promise} resolving imported service\n     */\n    import (service, options) {\n\n        return Q.resolve( service )\n        .then( svc => {\n            let url = this.baseUrl + '/import';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data:svc, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ServiceService.import() -\n                Error importing service: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {string} id - identifier of GP service to harvest layers for\n     * @param {Object} options - optional set of request options to apply to request\n     * @return {Promise} resolving service layers\n     */\n    harvest (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/harvest';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ServiceService.harvest() -\n                Error harvesting layers from service: ${e.message}`);\n            return Q.reject(err);\n        });\n\n    }\n\n    /**\n     * @param {string} id - identifier of GP service to live test\n     * @param {Object} options - optional set of request options to apply to request\n     * @return {Promise} resolving service statistics\n     */\n    liveTest (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/test';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ServiceService.liveTest() -\n                Error testing service: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {string} id - identifier of GP service to fetch statistics about\n     * @param {Object} options - optional set of request options to apply to request\n     * @return {Promise} resolving service statistics\n     */\n    statistics (id, options) {\n        return Q.resolve( id )\n        .then( id => {\n            let url = this.baseUrl + '/' + id + '/statistics';\n            let opts = this.buildRequest({\n                method:'GET', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`ServiceService.statistics() -\n                Error getting service statistics: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default ServiceService;\n","\nimport Q from 'q';\nimport ItemService from './item';\n\n/**\n * GeoPlatform Map service\n * service for working with the GeoPlatform API to\n * retrieve and manipulate map objects.\n *\n * @see GeoPlatform.ItemService\n */\n\nclass GalleryService extends ItemService {\n\n    constructor(url, httpClient) {\n        super(url, httpClient);\n    }\n\n    setUrl(baseUrl) {\n        super.setUrl(baseUrl);\n        this.baseUrl = baseUrl + '/api/galleries';\n    }\n\n    addItem (galleryId, itemObj, options) {\n        return Q.resolve( true )\n        .then( () => {\n            let url = this.baseUrl + '/' + galleryId + '/items';\n            let opts = this.buildRequest({\n                method:'POST', url:url, data: itemObj, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(\"GalleryService.addItem() - Error adding item: \" + e.message);\n            return Q.reject(err);\n        });\n    }\n\n    removeItem( galleryId, itemId, options) {\n        return Q.resolve( this.baseUrl + '/' + galleryId + '/items/' + itemId )\n        .then( url => {\n            let opts = this.buildRequest({\n                method:'DELETE', url:url, options:options\n            });\n            return this.execute(opts);\n        })\n        .then(response=>true)\n        .catch(e => {\n            let err = new Error(\"GalleryService.addItem() - Error adding item: \" + e.message);\n            return Q.reject(err);\n        });\n    }\n\n}\n\nexport default GalleryService;\n","\n\nimport Q from 'q';\n\nclass UtilsService {\n\n    constructor(url, httpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n        this.timeout = 10000;\n        this.httpMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n    }\n\n    setUrl(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n\n    /**\n     * @param {string} property - optional capa property to specifically request\n     * @param {Object} query - optional query parameters to include with request\n     * @param {Object} options - optional config to send with http request\n     * @return {Promise} resolving capabilities object\n     */\n    capabilities (property, query, options) {\n\n        let url = this.baseUrl + '/api/capabilities';\n        if(property)\n            url += '/' + property;\n\n        return Q.resolve( url )\n        .then( (url) => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:query||{}, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`UtilsService.capabilities() - Error getting capabilities: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {File} file\n     * @param {string} format\n     * @param {Object} options\n     * @return {Promise}\n     */\n    parseFile (file, format, options) {\n\n        var url = this.baseUrl + '/api/utils/parse';\n\n        return Q.resolve( url )\n        .then( url => {\n\n            let opts = this.buildRequest({\n                method:\"POST\",  url:url,\n                data: { format: format },\n                file: file,\n                formData: true,   //NodeJS (RequestJS)\n                options: options\n            });\n            return this.execute(opts);\n        })\n        .then( response => response )\n        .catch(e => {\n            let err = new Error(`UtilsService.parseFile() - Error parsing file: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * Geolocate the specified argument to a set of candidate locations.\n     * @param {Object} value - text string to geolocate (name or lat,lng)\n     * @param {Object} options - optional config to send with http request\n     * @return {Promise} resolving an array of geocoded results\n     */\n    locate(value, options) {\n\n        var url = this.baseUrl + '/api/utils/gazetteer';\n        return Q.resolve(url)\n        .then( url => {\n            let opts = this.buildRequest({\n                method: 'GET',\n                url: url,\n                params: { location: value }\n            });\n            return this.execute(opts);\n        })\n        .then(response => response)\n        .catch(e => {\n            let err = new Error(`UtilsService.locate() - Error resolving location: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param {string} method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param {string} url - destination of xhr request\n     * @param {Object} params - object to be sent with request as query parameters\n     * @param {Object} data - object to be sent with request as body\n     * @param {Object} options - optional object defining request options\n     * @return {Object} request options for xhr\n     */\n    buildRequest (options) {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options) {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts) {\n        return this.client.execute(opts);\n    }\n\n}\n\nexport default UtilsService;\n","\n\nimport Q from 'q';\nimport ItemTypes from '../shared/types';\n\n\nclass AgolQuery {\n\n    constructor() {\n        this._query = {\n            page: 0,\n            size: 10\n        };\n    }\n\n    getQuery() {\n        let result = {};\n        for(let prop in this._query) {\n            let value = this._query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    // ---------------------------------------\n\n    q(value) { this.setQ(value); return this; }\n    setQ(value) { this._query.q = value; }\n    getQ() { return this._query.q; }\n\n    // ---------------------------------------\n\n    types(value) { this.setTypes(value); return this; }\n    setTypes(value) {\n        if(value && typeof(value.push) !== 'undefined')\n            value = value.join(',');\n        this._query.types = value;\n    }\n    getTypes() { return this._query.types; }\n\n    // ---------------------------------------\n\n    groups(value) { this.setGroups(value); return this; }\n    setGroups(value) {\n        if(value && typeof(value.push) !== 'undefined')\n            value = value.join(',');\n        this._query.groups = value;\n    }\n    getGroups() { return this._query.groups; }\n\n    // ---------------------------------------\n\n    orgs(value) { this.setOrgs(value); return this; }\n    setOrgs(value) {\n        if(value && typeof(value.push) !== 'undefined')\n            value = value.join(',');\n        this._query.orgs = value;\n    }\n    getOrgs() { return this._query.orgs; }\n\n    // ---------------------------------------\n\n    extent(value) { this.setExtent(value); return this; }\n    setExtent(value) { this._query.bbox = value; }\n    getExtent() { return this._query.bbox; }\n\n    // ---------------------------------------\n\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n    sort (sort, order) { this.setSort(sort, order); return this; }\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort, order) {\n         order = (order && (order !== 'asc' || order !== 'desc')) ? 'desc' : order;\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this._query.sort = sort;\n    }\n    getSort() { return this._query.sort; }\n    getSortField() { return this._query.sort.split(',')[0]; }\n    getSortOrder() { return this._query.sort.split(',')[1] === 'asc'; }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} page - page of results to fetch\n     */\n    page (page) {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page) {\n        if(isNaN(page) || page*1<0) return;\n        this._query.page = page*1;\n    }\n\n    getPage() {\n        return this._query.page;\n    }\n\n    nextPage() {\n        this.setPage(this._query.page+1);\n    }\n\n    previousPage() {\n        this.setPage(this._query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} size - page size to request\n     */\n    pageSize (size) {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size) {\n        if(isNaN(size) || size*1<0) return;\n        this._query.size = size*1;\n    }\n\n    getPageSize() {\n        return this._query.size;\n    }\n\n}\n\n\n\n\nclass AgolService {\n\n\n\n    constructor(url, httpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n        this.timeout = 10000;\n        this.httpMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n    }\n\n    setUrl(baseUrl) {\n        this.baseUrl = baseUrl + '/api/agol/';\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL ORGS METHODS\n\n\n    /**\n     * @param {string} id - identifier of AGOL organization to fetch\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    getOrg (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/orgs/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getOrg() - Error fetching org ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n    /**\n     * @param {Object} arg - either JS object of query parameters or Query instance\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving search results\n     */\n    searchOrgs (arg, options) {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            if(params && typeof(params.getQuery) !== 'undefined') {\n                //if passed a GeoPlatform.Query object,\n                // convert to parameters object\n                params = params.getQuery();\n            }\n            let opts = this.buildRequest({\n                method:\"GET\", url: this.baseUrl + '/orgs', params: params, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchOrgs() - Error searching orgs: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL GROUPS METHODS\n\n\n    /**\n     * @param {string} id - identifier of AGOL group to fetch\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    getGroup (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/groups/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getGroup() - Error fetching group ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Object} arg - either JS object of query parameters or AgolQuery instance\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving search results\n     */\n    searchGroups (arg, options) {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            if(params && typeof(params.getQuery) !== 'undefined') {\n                //if passed a GeoPlatform.Query object,\n                // convert to parameters object\n                params = params.getQuery();\n            }\n            let opts = this.buildRequest({\n                method:\"GET\", url: this.baseUrl + '/groups', params: params, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchGroups() - Error searching groups: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n    // -----------------------------------------------------------------------\n    // AGOL ITEMS METHODS\n\n    /**\n     * @param {string} id - identifier of AGOL item to fetch\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving Item object or an error\n     */\n    getItem (id, options) {\n\n        return Q.resolve( id )\n        .then( id => {\n            let opts = this.buildRequest({\n                method:\"GET\", url:this.baseUrl + '/items/' + id, options:options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.getItem() - Error fetching item ${id}: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Object} arg - either JS object of query parameters or AgolQuery instance\n     * @param {Object} options - optional set of request options to apply to xhr request\n     * @return {Promise} resolving search results\n     */\n    searchItems (arg, options) {\n\n        return Q.resolve( arg )\n        .then( params => {\n\n            if(params && typeof(params.getQuery) !== 'undefined') {\n                //if passed a GeoPlatform.Query object,\n                // convert to parameters object\n                params = params.getQuery();\n            }\n            let opts = this.buildRequest({\n                method:\"GET\", url: this.baseUrl + '/items', params: params, options: options\n            });\n            return this.execute(opts);\n        })\n        .catch(e => {\n            let err = new Error(`AgolService.searchItems() - Error searching items: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /* --------------------------- */\n\n    getAgolId (obj) {\n        if(!obj) return null;\n\n        if(!obj.type) return null;\n\n        if(ItemTypes.ORGANIZATION === obj.type || 'Group' === obj.type) {\n            return obj.id;\n        }\n\n        if(!obj.identifiers || !obj.identifiers.length) return null;\n        let ids = obj.identifiers.filter(id => ~id.indexOf('agol:'));\n        if(!ids.length) return null;\n        return ids[0].replace('agol:','');\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @param {string} method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param {string} url - destination of xhr request\n     * @param {Object} params - object to be sent with request as query parameters\n     * @param {Object} data - object to be sent with request as body\n     * @param {Object} options - optional object defining request options\n     * @return {Object} request options for xhr\n     */\n    buildRequest (options) {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options) {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts) {\n        return this.client.execute(opts);\n    }\n\n}\n\nexport {\n    AgolService as default,\n    AgolService,\n    AgolQuery\n};\n","\n\nexport default {\n    ALTERNATE_TITLE  : 'alternateTitles',\n    BEGINS           : 'startDate.min',\n    CREATED          : 'created',\n    CREATED_BEFORE   : 'created.max',\n    CREATED_AFTER    : 'created.min',\n    CREATED_BY       : 'createdBy',\n    CREATOR          : 'creator.id',\n    CONTRIBUTED_BY   : 'contributedBy',\n    ENDS             : 'endDate.max',\n    EXTENT           : 'extent',\n    IDENTIFIERS      : 'identifiers',\n    KEYWORDS         : 'keyword',\n    LAST_MODIFIED_BY : 'lastModifiedBy',\n    MODIFIED         : 'modified',\n    MODIFIED_BEFORE  : 'modified.max',\n    MODIFIED_AFTER   : 'modified.min',\n    PUBLISHERS_ID    : 'publisher.id',\n    PUBLISHERS_LABEL : 'publisher.label',\n    PUBLISHERS_URI   : 'publisher.uri',\n    CONTACTS_ID      : 'contacts.id',\n    CONTACTS_LABEL   : 'contacts.label',\n    CONTACTS_URI     : 'contacts.uri',\n    QUERY            : 'q',\n    SCHEMES_ID       : 'scheme.id',\n    SCHEMES_LABEL    : 'scheme.label',\n    SCHEMES_URI      : 'scheme.uri',\n    STATUS           : 'status',\n    SERVICE_TYPES    : 'serviceType.id',\n    THEMES_ID        : 'theme.id',\n    THEMES_LABEL     : 'theme.label',\n    THEMES_URI       : 'theme.uri',\n    TYPES            : 'type',      //TODO change to 'types'\n    URI              : 'uri',\n    USED_BY_ID       : 'usedBy.id',\n    USED_BY_LABEL    : 'usedBy.label',\n    USED_BY_URI      : 'usedBy.uri',\n    VISIBILITY       : 'visibility',\n    RESOURCE_TYPE    : 'resourceType',\n    DATASET          : 'dataset',\n    LANDING_PAGE     : 'landingPage',\n    PURPOSE          : 'purpose',\n\n    //statistics parameters\n    RELIABILITY      : 'reliability',\n    RELIABILITY_MIN  : 'reliability.min',\n    RELIABILITY_MAX  : 'reliability.max',\n    ONLINE           : 'online',\n    COMPLIANT        : 'compliant',\n    SPEED            : 'speed',\n    SPEED_MIN        : 'speed.min',\n    SPEED_MAX        : 'speed.max',\n    LIKES            : 'likes',\n    LIKES_MIN        : 'likes.min',\n    LIKES_MAX        : 'likes.max',\n    VIEWS            : 'views',\n    VIEWS_MIN        : 'views.min',\n    VIEWS_MAX        : 'views.max',\n\n    //type-specific parameters\n    HREF             : 'href',           //service-specific\n    LAYER_TYPE       : 'layerType',     //layer-specific\n    LAYER_NAME       : 'layerName',     //...\n    PARENT_LAYER     : 'parentLayer',   //...\n    SUB_LAYER        : 'subLayer',      //...\n    SERVICE          : 'service',       //...\n    MAP_LAYER        : 'mapLayer',      //map-specific\n    GALLERY_ITEM     : 'galleryItem',   //gallery-specific\n\n    //meta-parameters\n    FACETS           : 'includeFacets',  //TODO change to 'facets'\n    FIELDS           : 'fields',\n    SORT             : 'sort',\n    PAGE             : 'page',\n    PAGE_SIZE        : 'size',\n\n    //recommender service-specific\n    FOR_TYPES        : 'for'\n};\n","\nimport QueryParameters from './parameters';\n\nconst SORT_OPTIONS_DEFAULT = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nclass KGQuery {\n\n    constructor() {\n\n        this.defaultQuery = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n        this.query = {\n            page: 0,\n            size: 10,\n            sort: \"modified,desc\"\n        };\n\n    }\n\n\n\n    getQuery() {\n        let result = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    parameter(name, value) {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    setParameter (name, value) {\n        if(value === null || value === undefined)\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    getParameter (key) {\n        return this.query[key];\n    }\n\n    applyParameters (obj) { \n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p, obj[p]);\n            }\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    q(text) {\n        this.setQ(text);\n        return this;\n    }\n\n    /**\n     * @param {string} text - free text query\n     */\n    setQ (text) {\n        this.setParameter(QueryParameters.QUERY, text);\n    }\n\n    getQ() {\n        return this.getParameter(QueryParameters.QUERY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {array[string]} types - KG classifiers for which concepts should be returned\n     */\n    classifiers(types) {\n        this.setClassifiers(types);\n        return this;\n    }\n\n    /**\n     * @param {array[string]} types - KG classifiers for which concepts should be returned\n     */\n    setClassifiers (types) {\n        if(types && typeof(types.push) === 'undefined')\n            types = [types];\n        this.setParameter(QueryParameters.TYPES, types);\n    }\n\n    /**\n     * @return {array[string]} KG classifiers for which concepts should be returned\n     */\n    getClassifiers () {\n        return this.getParameter(QueryParameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.types()\n     * query parameter (they map to different HTTP request parameters).\n     * @param {array[string]} objTypes - Item object type names\n     */\n    types(objTypes) {\n        this.setTypes(objTypes);\n        return this;\n    }\n\n    /**\n     * Specify the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.setTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @param {array[string]} objTypes - Item object type names\n     */\n    setTypes (objTypes) {\n        if(objTypes && typeof(objTypes.push) === 'undefined')\n            objTypes = [objTypes];\n        this.setParameter(QueryParameters.FOR_TYPES, objTypes);\n    }\n\n    /**\n     * Get the Item object model type name(s) for which\n     * recommended concepts should be returned. Note: this\n     * query parameter is not the same as the GeoPlatform.Query.getTypes()\n     * query parameter (they map to different HTTP request parameters).\n     * @return {array[string]} Item object type names\n     */\n    getTypes () {\n        return this.getParameter(QueryParameters.FOR_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} page - page of results to fetch\n     */\n    page (page) {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page) {\n        if(isNaN(page) || page*1<0) return;\n        this.query.page = page*1;\n    }\n\n    getPage() {\n        return this.query.page;\n    }\n\n    nextPage() {\n        this.setPage(this.query.page+1);\n    }\n\n    previousPage() {\n        this.setPage(this.query.page-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} size - page size to request\n     */\n    pageSize (size) {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size) {\n        if(isNaN(size) || size*1<0) return;\n        this.query.size = size*1;\n    }\n\n    getPageSize() {\n        return this.query.size;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n    sort (sort, order) {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort, order) {\n         order = (order && (order !== 'asc' || order !== 'desc')) ? 'desc' : order;\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.query.sort = sort;\n    }\n\n    getSort() {\n        return this.query.sort;\n    }\n\n    getSortField() {\n        return this.query.sort.split(',')[0];\n    }\n\n    getSortOrder() {\n        return this.query.sort.split(',')[1] === 'asc';\n    }\n\n    /**\n     * @return {array} list of key-value pairs of sort options\n     */\n    getSortOptions() {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = this.defaultQuery;\n    }\n}\n\nexport default KGQuery;\n","\nimport Q from 'q';\nimport QueryParameters from '../shared/parameters';\n\n\nclass KGService {\n\n    constructor(url, httpClient) {\n        this.setUrl(url);\n        this.client = httpClient;\n        this.timeout = 10000;\n        this.httpMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n    }\n\n    setUrl(baseUrl) {\n        this.apiBase = baseUrl;\n        this.baseUrl = baseUrl + '/api/recommender';\n    }\n\n    /**\n     * @param {Object} query - optional query parameters to include with request\n     * @param {Object} options - optional config to send with http request\n     * @return {Promise} resolving recommended concepts as search results\n     */\n    suggest (query, options) {\n        let url = this.baseUrl + '/suggest';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.suggest() - Error suggesting concepts: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n    /**\n     * @param {Object} query - optional query parameters to include with request\n     * @param {Object} options - optional config to send with http request\n     * @return {Promise} resolving concept types as search results\n     */\n    types (query, options) {\n        let url = this.baseUrl + '/types';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.types() - Error searching types: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n    /**\n     * @param {Object} query - optional query parameters to include with request\n     * @param {Object} options - optional config to send with http request\n     * @return {Promise} resolving concept sources as search results\n     */\n    sources (query, options) {\n        let url = this.baseUrl + '/sources';\n        return this._search(url, query, options)\n        .catch(e => {\n            let err = new Error(`KGService.sources() - Error searching sources: ${e.message}`);\n            return Q.reject(err);\n        });\n    }\n\n\n\n\n\n    /* ----------------------------------------------------------- */\n\n\n    /**\n     * internal method used by exposed methods\n     */\n    _search (url, query, options) {\n        return Q.resolve( true )\n        .then( () => {\n\n            if(query && typeof(query.getQuery) !== 'undefined') {\n                //if passed a GeoPlatform.Query object,\n                // convert to parameters object\n                query = query.getQuery();\n            }\n\n            let opts = this.buildRequest({\n                method:\"GET\", url:url, params:query, options:options\n            });\n            return this.execute(opts);\n        });\n    }\n\n\n\n    /**\n     * @param {string} method - one of \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"\n     * @param {string} url - destination of xhr request\n     * @param {Object} params - object to be sent with request as query parameters\n     * @param {Object} data - object to be sent with request as body\n     * @param {Object} options - optional object defining request options\n     * @return {Object} request options for xhr\n     */\n    buildRequest (options) {\n\n        if(this.httpMethods.indexOf(options.method)<0)\n            throw new Error(`Unsupported HTTP method ${options.method}`);\n\n        if(!options.url)\n            throw new Error(`Must specify a URL for HTTP requests`);\n\n        options.timeout = this.timeout;\n\n        return this.createRequestOpts(options);\n    }\n\n    createRequestOpts(options) {\n        return this.client.createRequestOpts(options);\n    }\n\n    execute(opts) {\n        return this.client.execute(opts);\n    }\n\n}\n\nexport default KGService;\n","\n\n\nexport default  {\n    PURPOSE             : 'purposes',\n    FUNCTION            : 'functions',\n    TOPIC_PRIMARY       : 'primaryTopics',\n    TOPIC_SECONDARY     : 'secondaryTopics',\n    SUBJECT_PRIMARY     : 'primarySubjects',\n    SUBJECT_SECONDARY   : 'secondarySubjects',\n    COMMUNITY           : 'communities',\n    AUDIENCE            : 'audiences',\n    PLACE               : 'places',\n    CATEGORY            : 'categories'\n};\n","\nimport Parameters from './parameters';\n\nconst Fields = {\n    ACCESS_RIGHTS       : 'rights',\n    ALTERNATE_TITLES    : 'alternateTitles',\n    ANNOTATIONS         : 'annotations',\n    CLASSIFIERS         : 'classifiers',\n    CONCEPT_SCHEME      : 'scheme',\n    CONTACTS            : 'contacts',\n    CREATED             : 'created',\n    CREATED_BY          : 'createdBy',\n    DATASETS            : 'datasets',\n    DESCRIPTION         : 'description',\n    DISTRIBUTIONS       : 'distributions',\n    EXTENT              : 'extent',\n    GALLERY_ITEMS       : 'items',\n    HREF                : 'href',\n    IDENTIFIERS         : 'identifiers',\n    KEYWORDS            : 'keywords',\n    LABEL               : 'label',\n    LAST_MODIFIED_BY    : 'lastModifiedBy',\n    LAYERS              : 'layers',\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LEGEND              : 'legend',\n    MODIFIED            : 'modified',\n    PARENT_LAYER        : 'parentLayer',\n    PUBLISHERS          : 'publishers',\n    RESOURCE_TYPES      : 'resourceTypes',\n    SERVICE_TYPE        : 'serviceType',\n    SERVICES            : 'services',\n    SPATIAL             : 'spatial',\n    STATISTICS          : 'statistics',\n    STATUS              : 'status',\n    SUB_LAYERS          : 'subLayers',\n    TEMPORAL            : 'temporal',\n    THEMES              : 'themes',\n    THUMBNAIL           : 'thumbnail',\n    USED_BY             : 'usedBy',\n    VISIBILITY          : 'visibility',\n    LANDING_PAGE        : 'landingPage'\n};\n\nconst FIELDS_DEFAULT = [\n    Fields.CREATED, Fields.MODIFIED, Fields.CREATED_BY,\n    Fields.PUBLISHERS, Fields.THEMES, Fields.DESCRIPTION\n];\n\n/* --------------------------------------------------------- */\n\nconst Facets = {\n    ALTERNATE_TITLES    : 'alternateTitles',\n    CONCEPT_SCHEMES     : 'schemes',\n    CREATED_BY          : 'createdBy',\n    HREF                : 'href',\n    IDENTIFIERS         : \"identifiers\",\n    LAYER_TYPE          : 'layerType',\n    LAYER_NAME          : 'layerName',\n    LIKES               : 'likes',\n    ONLINE              : 'online',\n    PUBLISHERS          : 'publishers',\n    CONTACTS            : 'contacts',\n    RELIABILITY         : 'reliability',\n    SERVICE_TYPES       : 'serviceTypes',\n    SPEED               : 'speed',\n    STATUS              : 'status',\n    THEMES              : 'themes',\n    TYPES               : 'type',   //TODO change to 'types'\n    USED_BY             : 'usedBy',\n    VIEWS               : 'views',\n    VISIBILITY          : 'visibility'\n};\n\nconst FACETS_DEFAULT = [\n    Facets.TYPES,\n    Facets.PUBLISHERS,\n    Facets.SERVICE_TYPES,\n    Facets.CONCEPT_SCHEMES,\n    Facets.VISIBILITY,\n    Facets.CREATED_BY\n];\n\n\n/*\n    Map facet keys to parameters so clients can set\n    query params using faceted results\n\n    //TODO remove these and their function below\n */\nconst FacetToParam = {};\nFacetToParam[Facets.TYPES]           = Parameters.TYPES;\nFacetToParam[Facets.THEMES]          = Parameters.THEMES_ID;\nFacetToParam[Facets.PUBLISHERS]      = Parameters.PUBLISHERS_ID;\nFacetToParam[Facets.CONTACTS]        = Parameters.CONTACTS_ID;\nFacetToParam[Facets.CONCEPT_SCHEMES] = Parameters.SCHEMES_ID;\nFacetToParam[Facets.USED_BY]         = Parameters.USED_BY_ID;\n\n\n\n/* --------------------------------------------------------- */\n\n\nconst SORT_OPTIONS_DEFAULT = [\n    { value:\"label,asc\",       label: \"Name (A-Z)\"              },\n    { value:\"label,desc\",      label: \"Name (Z-A)\"              },\n    { value:\"type,asc\",        label: \"Type (A-Z)\"              },\n    { value:\"type,desc\",       label: \"Type (Z-A)\"              },\n    { value:\"modified,desc\",   label: \"Most recently modified\"  },\n    { value:\"modified,asc\",    label: \"Least recently modified\" },\n    { value:\"_score,desc\",     label: \"Relevance\"               }\n];\n\n\nconst BBOX_REGEX = /^\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?,\\-?\\d+(\\.\\d*)?$/;\n\n\nfunction toArray(value) {\n    let result = value;\n    //if given a non-array value, wrap in array\n    if(result !== null && typeof(result.push) === 'undefined') result = [result];\n    //if array value is empty, nullify the result\n    if(result !== null && !result.length) result = null;\n    return result;\n}\n\n\n\n/**\n * Query\n *\n * Specify the \"default\" query constraints to use by passing in 'options.defaults = {...}';\n *\n * @constructor\n */\nclass Query {\n\n    /**\n     * @param {Object} options - set of initial constraints\n     */\n    constructor(options) {\n        this.defaultQuery = { };\n        this.defaultQuery[Parameters.PAGE] = 0;\n        this.defaultQuery[Parameters.PAGE_SIZE] = 10;\n        this.defaultQuery[Parameters.SORT] = \"modified,desc\";\n        this.defaultQuery[Parameters.FIELDS] = FIELDS_DEFAULT.slice(0);\n        this.defaultQuery[Parameters.FACETS] = FACETS_DEFAULT.slice(0);\n        if(options && options.defaults) {\n            Object.assign(this.defaultQuery, options.defaults);\n            delete options.defaults;\n        }\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n        if(options) {\n            this.applyParameters(options);\n        }\n    }\n\n\n    /**\n     * @return {object} containing request-ready parameters/values\n     */\n    getQuery() {\n        let result = {};\n        for(let prop in this.query) {\n            let value = this.query[prop];\n            if(value !== null && typeof(value.push) !== 'undefined') {\n                value = value.join(',');\n            }\n            result[prop] = value;\n        }\n        return result;\n    }\n\n    /**\n     * @return {Query}\n     */\n    clone() {\n        let result = new Query();\n        let json = JSON.parse(JSON.stringify(this.query));\n        result.applyParameters(json);\n        return result;\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param {string} name\n     * @param {any} value\n     * @return {Query} this\n     */\n    parameter(name, value) {\n        this.setParameter(name, value);\n        return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {any} value\n     */\n    setParameter (name, value) {\n        if(value === null || value === undefined || //if no value was provide\n            (typeof(value.push) !== 'undefined' && !value.length)) //or empty array\n            delete this.query[name];\n        else\n            this.query[name] = value;\n    }\n\n    /**\n     * @param {string} key - name of parameter\n     * @return {string} value of parameter\n     */\n    getParameter (key) {\n        return this.query[key];\n    }\n\n    /**\n     * @param {object} obj - set of parameter/values to apply to this query\n     */\n    applyParameters (obj) { \n        for(var p in obj) {\n            if(obj.hasOwnProperty(p)) {\n                this.setParameter(p, obj[p]);\n            }\n        }\n    }\n\n    /**\n     * @param {string} facet - name of facet to set the value for as a parameter\n     * @param {string} value - value of the facet to use as the parameter's value\n     */\n     //TODO remove this function\n    setFacetParameter (facet, value) {\n        let param = FacetToParam[facet];\n        if(!param) {\n            console.log(\"WARN : Query.applyFacetParameter() - \" +\n                \"unable to map facet to known parameter '\" + facet + \"', using \" +\n                \"as direct parameter which may not operate as intended\");\n        }\n        this.setParameter(param||facet, value);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     * @param {string} text\n     * @return {Query} this\n     */\n    q(text) { this.setQ(text); return this; }\n    /** @param {string} text - free text query */\n    setQ (text) { this.setParameter(Parameters.QUERY, text); }\n    /** @return {string} */\n    getQ() { return this.getParameter(Parameters.QUERY); }\n\n\n    // -----------------------------------------------------------\n\n\n    keywords(text) {\n        this.setKeywords(text);\n        return this;\n    }\n\n    /**\n     * @param {string} text - free text query\n     */\n    setKeywords (text) {\n        this.setParameter(Parameters.KEYWORDS, toArray(text));\n    }\n\n    getKeywords() {\n        return this.getParameter(Parameters.KEYWORDS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    uri (uri) {\n        this.setUri(uri);\n        return this;\n    }\n\n    setUri(uri) {\n        this.setParameter(Parameters.URI, uri);\n    }\n\n    getUri() {\n        return this.getParameter(Parameters.URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    types(types) {\n        this.setTypes(types);\n        return this;\n    }\n\n    /**\n     * @param {array[string]} types - name of class(es) to request\n     */\n    setTypes (types) {\n        this.setParameter(Parameters.TYPES, toArray(types));\n    }\n\n    getTypes () {\n        return this.getParameter(Parameters.TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    createdBy(user) {\n        this.setCreatedBy(user);\n        return this;\n    }\n\n    /** @param {string} user - username */\n    setCreatedBy (user) {\n        this.setParameter(Parameters.CREATED_BY, user);\n    }\n\n    /** @return {string} username */\n    getCreatedBy () {\n        return this.getParameter(Parameters.CREATED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    lastModifiedBy(user) {\n        this.setLastModifiedBy(user);\n        return this;\n    }\n\n    /** @param {string} user - username */\n    setLastModifiedBy (user) {\n        this.setParameter(Parameters.LAST_MODIFIED_BY, user);\n    }\n\n    /** @return {string} username */\n    getLastModifiedBy () {\n        return this.getParameter(Parameters.LAST_MODIFIED_BY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param {array[string]} themes - string or array of strings containing theme constraint\n     * @param {string} parameter - optional, to indicate the parameter to use\n     * @return {Query}\n     */\n    themes(themes, parameter) {\n        this.setThemes(themes, parameter);\n        return this;\n    }\n\n\n    /**\n     * Specify a Theme or set of Themes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.THEMES_LABEL or Parameters.THEMES_URI\n     * respectively.\n     * @param {array[string]} themes - theme or themes to constrain by\n     */\n    setThemes (themes, parameter) {\n\n        //clear existing\n        this.setParameter(Parameters.THEMES_ID, null);\n        this.setParameter(Parameters.THEMES_LABEL, null);\n        this.setParameter(Parameters.THEMES_URI, null);\n\n        let param = parameter || Parameters.THEMES_ID;\n        this.setParameter(param, toArray(themes));\n    }\n\n    getThemes () {\n        return this.getParameter(Parameters.THEMES_ID) ||\n            this.getParameter(Parameters.THEMES_LABEL) ||\n            this.getParameter(Parameters.THEMES_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param {string} parameter - optional, to indicate the parameter to use\n     * @return {Query}\n     */\n    publishers(publishers, parameter) {\n        this.setPublishers(publishers, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Publisher or set of Publishers to constrain results. By\n     * default, values are assumed to be identifiers. If using labels or uris,\n     * specify the optional second parameter to be either\n     * Parameters.PUBLISHERS_LABEL or Parameters.PUBLISHERS_URI respectively.\n     * @param {array[string]} publishers - publishing orgs to constrain by\n     */\n    setPublishers (publishers, parameter) {\n\n        //clear existing\n        this.setParameter(Parameters.PUBLISHERS_ID, null);\n        this.setParameter(Parameters.PUBLISHERS_LABEL, null);\n        this.setParameter(Parameters.PUBLISHERS_URI, null);\n\n        let param = parameter || Parameters.PUBLISHERS_ID;\n        this.setParameter(param, toArray(publishers));\n    }\n\n    getPublishers () {\n        return this.getParameter(Parameters.PUBLISHERS_ID) ||\n            this.getParameter(Parameters.PUBLISHERS_LABEL) ||\n            this.getParameter(Parameters.PUBLISHERS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Point of Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param {string} parameter - optional, to indicate the parameter to use\n     * @return {Query}\n     */\n    contacts(contacts, parameter) {\n        this.setContacts(contacts, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Contact or set of Contacts to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter to be either\n     * Parameters.CONTACTS_LABEL or Parameters.CONTACTS_URI respectively.\n     * @param {array[string]} contacts - publishing orgs to constrain by\n     */\n    setContacts (contacts, parameter) {\n\n        //clear existing\n        this.setParameter(Parameters.CONTACTS_ID, null);\n        this.setParameter(Parameters.CONTACTS_LABEL, null);\n        this.setParameter(Parameters.CONTACTS_URI, null);\n\n        let param = parameter || Parameters.CONTACTS_ID;\n        this.setParameter(param, toArray(contacts));\n    }\n\n    getContacts () {\n        return this.getParameter(Parameters.CONTACTS_ID) ||\n            this.getParameter(Parameters.CONTACTS_LABEL) ||\n            this.getParameter(Parameters.CONTACTS_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param {string} parameter - optional, to indicate the parameter to use\n     * @return {Query}\n     */\n    usedBy(ids, parameter) {\n        this.setUsedBy(ids, parameter);\n        return this;\n    }\n\n    /**\n     * Specify the identifier of an Agent (Community, Group, etc) that\n     * uses items you wish to find in search results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.USED_BY_LABEL or Parameters.USED_BY_URI\n     * respectively.\n     * @param {array[string]} ids - publishing orgs to constrain by\n     */\n    setUsedBy (ids, parameter) {\n\n        //clear existing\n        this.setParameter(Parameters.USED_BY_ID, null);\n        this.setParameter(Parameters.USED_BY_LABEL, null);\n        this.setParameter(Parameters.USED_BY_URI, null);\n\n        let param = parameter || Parameters.USED_BY_ID;\n        this.setParameter(param, toArray(ids));\n    }\n\n    getUsedBy () {\n        return this.getParameter(Parameters.USED_BY_ID) ||\n            this.getParameter(Parameters.USED_BY_LABEL) ||\n            this.getParameter(Parameters.USED_BY_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be identifiers. If using\n     * labels or uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param {array[string]} schemes - schemes to constrain by\n     * @param {string} parameter - optional, to indicate the parameter to use\n     * @return {Query}\n     */\n    schemes(schemes, parameter) {\n        this.setSchemes(schemes, parameter);\n        return this;\n    }\n\n    /**\n     * Specify a Concept Scheme or set of Concept Schemes to constrain results. By\n     * default, values are assumed to be theme identifiers. If using\n     * theme labels or theme uris, specify the optional second parameter\n     * to be either Parameters.SCHEMES_LABEL or Parameters.SCHEMES_URI\n     * respectively.\n     * @param {array[string]} schemes - schemes to constrain by\n     * @param {string} parameter - optional, to indicate the parameter to use\n     */\n    setSchemes (schemes, parameter) {\n\n        //clear existing\n        this.setParameter(Parameters.SCHEMES_ID, null);\n        this.setParameter(Parameters.SCHEMES_LABEL, null);\n        this.setParameter(Parameters.SCHEMES_URI, null);\n\n        let param = parameter || Parameters.SCHEMES_ID;\n        this.setParameter(param, toArray(schemes));\n    }\n\n    getSchemes() {\n        return this.getParameter(Parameters.SCHEMES_ID) ||\n            this.getParameter(Parameters.SCHEMES_LABEL) ||\n            this.getParameter(Parameters.SCHEMES_URI);\n    }\n\n\n    // -----------------------------------------------------------\n\n    /**\n     *\n     */\n    serviceTypes(types) {\n        this.setServiceTypes(types);\n        return this;\n    }\n\n    /**\n     * @param {array[string]} types - ids\n     */\n    setServiceTypes (types) {\n        this.setParameter(Parameters.SERVICE_TYPES, toArray(types));\n    }\n\n    getServiceTypes () {\n        return this.getParameter(Parameters.SERVICE_TYPES);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    visibility(vis) {\n        this.setVisibility(vis);\n        return this;\n    }\n\n    /**\n     * @param {string} visibility - one of 'public' or 'private'\n     */\n    setVisibility (visibility) {\n        this.setParameter(Parameters.VISIBILITY, visibility);\n    }\n\n    getVisibility () {\n        return this.getParameter(Parameters.VISIBILITY);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    status(value) {\n        this.setStatus(value);\n        return this;\n    }\n\n    /**\n     * @param {string} status - current status of Item\n     */\n    setStatus (value) {\n        this.setParameter(Parameters.STATUS, value);\n    }\n\n    getStatus () {\n        return this.getParameter(Parameters.STATUS);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    extent(bbox) {\n        this.setExtent(bbox);\n        return this;\n    }\n\n    /**\n     * @param {string} bboxStr - form of \"minx,miny,maxx,maxy\"\n     */\n    setExtent (bbox) {\n        if(bbox && typeof(bbox.toBboxString) !== 'undefined') {\n            //Leaflet Bounds instance\n            bbox = bbox.toBboxString();\n        } else if(typeof(bbox.push) !== 'undefined' && bbox.length &&\n            //Nested array (alternate Leaflet representation):\n            // [ [minLat,minLong], [maxLat,maxLong] ]\n            typeof(bbox[0].push) !== 'undefined') {\n            bbox = bbox[0][1]+','+bbox[0][0]+','+bbox[1][1]+','+bbox[1][0];\n        } else if(typeof(bbox) === 'string') {\n            if(!BBOX_REGEX.test(bbox)) {\n                throw new Error(\"Invalid argument: bbox string must be \" +\n                    \"in form of 'minx,miny,maxx,maxy'\");\n            }\n        } else {\n            throw new Error(\"Invalid argument: bbox must be one of \" +\n                \"Leaflet.Bounds, nested array, or bbox string\");\n        }\n        this.setParameter(Parameters.EXTENT, bbox);\n    }\n\n    /**\n     * @return {string} bbox string or null if not set\n     */\n    getExtent () {\n        return this.getParameter(Parameters.EXTENT);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    modified(date, beforeOrAfter) {\n        this.setModified(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param {Date} date - date to compare against\n     * @param {boolean} beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setModified (date, beforeOrAfter) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.MODIFIED_BEFORE, null);\n            this.setParameter(Parameters.MODIFIED_AFTER, null);\n            return;\n        }\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.MODIFIED_BEFORE : Parameters.MODIFIED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.MODIFIED_AFTER : Parameters.MODIFIED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getModified () {\n        let value = this.getParameter(Parameters.MODIFIED_BEFORE) ||\n            this.getParameter(Parameters.MODIFIED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    created(date, beforeOrAfter) {\n        this.setCreated(date, beforeOrAfter);\n        return this;\n    }\n\n    /**\n     * @param {Date} date - date to compare against\n     * @param {boolean} beforeOrAfter - flag specifying which boundary condition (true = before, false = after) flag specifying whether to trigger update automatically\n     */\n    setCreated (date, beforeOrAfter) {\n\n        //if no date was supplied, consider it \"unset\" for both properties\n        if(!date) {\n            this.setParameter(Parameters.CREATED_BEFORE, null);\n            this.setParameter(Parameters.CREATED_AFTER, null);\n            return;\n        }\n\n        let dir = beforeOrAfter && (beforeOrAfter === true || beforeOrAfter === \"true\");\n        let prop = dir ? Parameters.CREATED_BEFORE : Parameters.CREATED_AFTER;       //property being set\n        let oppProp = dir ? Parameters.CREATED_AFTER : Parameters.CREATED_BEFORE;    //unset opposite property\n        let arg = (date && date.getTime) ? date.getTime() : date;\n\n        this.setParameter(oppProp, null);\n        this.setParameter(prop, arg);\n    }\n\n    getCreated () {\n        let value = this.getParameter(Parameters.CREATED_BEFORE) ||\n            this.getParameter(Parameters.CREATED_AFTER);\n        if(value && typeof(value) === 'number') {\n            value = new Date(value);\n        }\n        return value;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    begins(date) {\n        this.setBeginDate(date);\n        return this;\n    }\n\n    setBeginDate (date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.BEGINS, date);\n    }\n\n    getBeginDate () {\n        let date = this.getParameter(Parameters.BEGINS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    ends(date) {\n        this.setEndDate(date);\n        return this;\n    }\n\n    setEndDate (date) {\n        if(date && date instanceof Date)\n            date = date.getTime();\n        this.setParameter(Parameters.ENDS, date);\n    }\n\n    getEndDate () {\n        let date = this.getParameter(Parameters.ENDS);\n        if(date) date = new Date(date);\n        return date;\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    between(begin, end) {\n        this.setBetween(begin, end);\n        return this;\n    }\n\n    setBetween(begin, end) {\n        this.begins(begin);\n        this.ends(end);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    resourceTypes(types) {\n        this.setResourceTypes(types);\n        return this;\n    }\n\n    setResourceTypes(types) {\n        this.setParameter(Parameters.RESOURCE_TYPE, toArray(types));\n    }\n\n    getResourceTypes() {\n        return this.getParameter(Parameters.RESOURCE_TYPE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    facets(names) {\n        this.setFacets(names);\n        return this;\n    }\n\n    /*\n     * @param {array[string]} names - names of facets\n     */\n    setFacets (names) {\n        this.setParameter(Parameters.FACETS, toArray(names));\n    }\n\n    getFacets() {\n        return this.getParameter(Parameters.FACETS);\n    }\n\n    /**\n     * @param {string} name - name of facet to add\n     */\n    addFacet(name) {\n        let facets = this.getFacets() || [];\n        facets.push(name);\n        this.setFacets(facets);\n    }\n\n    /**\n     * @param {string} name - name of facet to remove\n     */\n    removeFacet(name) {\n        let facets = this.getFacets() || [];\n        let idx = facets.indexOf(name);\n        if(idx>=0) {\n            facets.splice(idx, 1);\n            this.setFacets(facets);\n        }\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    fields(fields) {\n        this.setFields(fields);\n        return this;\n    }\n\n    /**\n     * @param {array[string]} fields - list of field names to request for each search result\n     */\n    setFields (fields) {\n        this.setParameter(Parameters.FIELDS, toArray(fields));\n    }\n\n    getFields() {\n        return this.getParameter(Parameters.FIELDS);\n    }\n\n    /**\n     * @param {string} field - name of field to remove\n     */\n    addField(field) {\n        let fields = this.getFields() || [];\n        fields.push(field);\n        this.setFields(fields);\n    }\n\n    /**\n     * @param {string} field - name of field to remove\n     */\n    removeField(field) {\n        let fields = this.getFields() || [];\n        let idx = fields.indexOf(name);\n        if(idx>=0) {\n            fields.splice(idx, 1);\n            this.setFields(fields);\n        }\n    }\n\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} page - page of results to fetch\n     */\n    page (page) {\n        this.setPage(page);\n        return this;\n    }\n\n    setPage(page) {\n        if(isNaN(page) || page*1<0) return;\n        this.setParameter(Parameters.PAGE, page*1);\n    }\n\n    getPage() {\n        return this.getParameter(Parameters.PAGE);\n    }\n\n    nextPage() {\n        this.setPage(this.getPage()+1);\n    }\n\n    previousPage() {\n        this.setPage(this.getPage()-1);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {int} size - page size to request\n     */\n    pageSize (size) {\n        this.setPageSize(size);\n        return this;\n    }\n\n    setPageSize (size) {\n        if(isNaN(size) || size*1<0) return;\n        this.setParameter(Parameters.PAGE_SIZE, size*1);\n    }\n\n    getPageSize() {\n        return this.getParameter(Parameters.PAGE_SIZE);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n    sort (sort, order) {\n        this.setSort(sort, order);\n        return this;\n    }\n\n    /**\n     * @param {string} sort - form of <field>,<dir> or just field name\n     * @param {string} order - optional, either 'asc' or 'desc'\n     */\n     setSort(sort, order) {\n         order = (order && (order !== 'asc' || order !== 'desc')) ? 'desc' : order;\n         if(sort && sort.indexOf(',')<0)\n            sort = sort + ',' + order;\n         this.setParameter(Parameters.SORT, sort);\n    }\n\n    getSort() {\n        return this.getParameter(Parameters.SORT);\n    }\n\n    getSortField() {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[0] : null;\n    }\n\n    getSortOrder() {\n        let value = this.getSort();\n        return value && value.length ? value.split(',')[1] : null;\n    }\n\n    /**\n     * @return {array} list of key-value pairs of sort options\n     */\n    getSortOptions() {\n        return SORT_OPTIONS_DEFAULT.slice(0);\n    }\n\n\n    // -----------------------------------------------------------\n\n\n    /**\n     *\n     */\n    clear () {\n        this.query = JSON.parse(JSON.stringify(this.defaultQuery));\n    }\n}\n\nexport {\n    Query as default,\n    Query,\n    Fields,\n    Facets\n};\n","\nimport Query from './query';\n\nexport default function() {\n    return new Query();\n}\n","\nimport ItemTypes from '../shared/types';\nimport ItemService from './item';\nimport LayerService from './layer';\nimport ServiceService from './service';\nimport GalleryService from './gallery';\nimport DatasetService from './dataset';\nimport MapService from './map';\n\n/**\n * @param {any} arg - string type or object with type property\n * @param {string} baseUrl - base endpoint of GeoPlatform API\n * @return {ItemService}\n */\nconst ServiceFactory = function(arg, baseUrl, httpClient) {\n    let type = (typeof(arg) === 'string') ?\n        arg : (arg && arg.type ? arg.type : null);\n    if(!type) throw new Error(\"Must provide a type or object with a type specified\");\n    if(!baseUrl) throw new Error(\"Must provide a base url\");\n    if(!httpClient) throw new Error(\"Must provide an http client to use to make requests\");\n    switch(type) {\n        case ItemTypes.LAYER:   return new LayerService(  baseUrl, httpClient);\n        case ItemTypes.SERVICE: return new ServiceService(baseUrl, httpClient);\n        case ItemTypes.MAP:     return new MapService(    baseUrl, httpClient);\n        case ItemTypes.GALLERY: return new GalleryService(baseUrl, httpClient);\n        case ItemTypes.DATASET: return new DatasetService(baseUrl, httpClient);\n        default:                return new ItemService(   baseUrl, httpClient);\n    }\n};\n\nexport default ServiceFactory;\n","export default {\n\n    //ualUrl: '...',\n    //appId: '...',\n\n    configure: function(options) {\n        Object.assign(this, options);\n    }\n};\n"],"names":["JQueryHttpClient","options","setTimeout","timeout","setAuthToken","token","arg","opts","method","url","json","dataType","params","data","processData","contentType","headers","Authorization","o","hasOwnProperty","jQuery","Error","d","Q","defer","success","resolve","error","xhr","status","message","reject","ajax","promise","NGHttpClient","angular","$http","useXDomain","injector","get","then","response","catch","NodeHttpClient","qs","file","fs","require","formData","value","createReadStream","path","filename","originalFilename","Object","assign","body","auth","deferred","request","checkAndHandleError","e","props","code","connect","statusCode","babelHelpers.typeof","sidx","indexOf","eidx","item","substring","uri","pathname","JSON","parse","err","DATASET","SERVICE","LAYER","MAP","GALLERY","COMMUNITY","ORGANIZATION","CONTACT","CONCEPT","CONCEPT_SCHEME","STANDARD","ItemService","httpClient","setUrl","client","httpMethods","baseUrl","apiBase","id","buildRequest","execute","itemObj","getUri","patch","getQuery","format","undefined","isFile","ro","msg","object","obj","type","ids","identifiers","uris","createRequestOpts","DatasetService","MapService","LayerService","req","keys","missing","find","key","srs","bbox","height","width","info_format","x","y","i","j","ServiceService","service","svc","query","Query","types","ItemTypes","resourceTypes","pageSize","results","GalleryService","galleryId","itemId","UtilsService","property","location","AgolQuery","_query","page","size","result","prop","push","join","setQ","q","setTypes","setGroups","groups","setOrgs","orgs","setExtent","sort","order","setSort","split","setPage","isNaN","setPageSize","AgolService","length","filter","replace","ALTERNATE_TITLE","BEGINS","CREATED","CREATED_BEFORE","CREATED_AFTER","CREATED_BY","CREATOR","CONTRIBUTED_BY","ENDS","EXTENT","IDENTIFIERS","KEYWORDS","LAST_MODIFIED_BY","MODIFIED","MODIFIED_BEFORE","MODIFIED_AFTER","PUBLISHERS_ID","PUBLISHERS_LABEL","PUBLISHERS_URI","CONTACTS_ID","CONTACTS_LABEL","CONTACTS_URI","QUERY","SCHEMES_ID","SCHEMES_LABEL","SCHEMES_URI","STATUS","SERVICE_TYPES","THEMES_ID","THEMES_LABEL","THEMES_URI","TYPES","URI","USED_BY_ID","USED_BY_LABEL","USED_BY_URI","VISIBILITY","RESOURCE_TYPE","LANDING_PAGE","PURPOSE","RELIABILITY","RELIABILITY_MIN","RELIABILITY_MAX","ONLINE","COMPLIANT","SPEED","SPEED_MIN","SPEED_MAX","LIKES","LIKES_MIN","LIKES_MAX","VIEWS","VIEWS_MIN","VIEWS_MAX","HREF","LAYER_TYPE","LAYER_NAME","PARENT_LAYER","SUB_LAYER","MAP_LAYER","GALLERY_ITEM","FACETS","FIELDS","SORT","PAGE","PAGE_SIZE","FOR_TYPES","SORT_OPTIONS_DEFAULT","label","KGQuery","defaultQuery","name","setParameter","p","text","QueryParameters","getParameter","setClassifiers","objTypes","slice","KGService","_search","FUNCTION","TOPIC_PRIMARY","TOPIC_SECONDARY","SUBJECT_PRIMARY","SUBJECT_SECONDARY","AUDIENCE","PLACE","CATEGORY","Fields","ACCESS_RIGHTS","ALTERNATE_TITLES","ANNOTATIONS","CLASSIFIERS","CONTACTS","DATASETS","DESCRIPTION","DISTRIBUTIONS","GALLERY_ITEMS","LABEL","LAYERS","LEGEND","PUBLISHERS","RESOURCE_TYPES","SERVICE_TYPE","SERVICES","SPATIAL","STATISTICS","SUB_LAYERS","TEMPORAL","THEMES","THUMBNAIL","USED_BY","FIELDS_DEFAULT","Facets","CONCEPT_SCHEMES","FACETS_DEFAULT","FacetToParam","Parameters","BBOX_REGEX","toArray","defaults","stringify","applyParameters","facet","param","console","log","setKeywords","setUri","user","setCreatedBy","setLastModifiedBy","themes","parameter","setThemes","publishers","setPublishers","contacts","setContacts","setUsedBy","schemes","setSchemes","setServiceTypes","vis","setVisibility","visibility","setStatus","toBboxString","test","date","beforeOrAfter","setModified","dir","oppProp","getTime","Date","setCreated","setBeginDate","setEndDate","begin","end","setBetween","begins","ends","setResourceTypes","names","setFacets","facets","getFacets","idx","splice","fields","setFields","field","getFields","getPage","getSort","ServiceFactory","configure"],"mappings":"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"}