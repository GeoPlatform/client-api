/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Query, ItemService } from "@geoplatform/client";
import ServiceProxy from './base';
var ɵ0 = function (svc, req) {
    return svc.search(req.query);
}, ɵ1 = function (svc, req) {
    return svc.get(req.params.id);
}, ɵ2 = function (svc, req) {
    return svc.save(req.body);
}, ɵ3 = function (svc, req) {
    return svc.save(req.body);
}, ɵ4 = function (svc, req) {
    return svc.remove(req.params.id);
}, ɵ5 = function (
// @ts-ignore
// @ts-ignore
result, res) {
    res.status(204).end();
}, ɵ6 = function (svc, req) {
    return svc.patch(req.params.id, req.body);
}, ɵ7 = function (svc, req) { return svc.clone(req.params.id, req.body); }, ɵ8 = function (svc, req) {
    return svc.export(req.params.id, req.query.format);
}, ɵ9 = function (result, res) {
    /** @type {?} */
    var mimeType = result.headers['content-type'];
    /** @type {?} */
    var disposition = result.headers['content-disposition'];
    res.set("Content-Type", mimeType);
    res.setHeader('Content-disposition', disposition);
    res.send(result.body);
}, ɵ10 = function (svc, req) {
    return svc.getUri(req.body);
}, ɵ11 = function (result, res) {
    res.json({ uri: result });
}, ɵ12 = function (svc, req) {
    return svc.getUri(req.body)
        .then(function (uri) {
        /** @type {?} */
        var fields = ['serviceType', 'services', 'scheme', 'themes', 'publishers', 'keywords'];
        /** @type {?} */
        var query = new Query().uri(uri).fields(fields);
        return svc.search(query);
    });
}, ɵ13 = function (svc, req) {
    /** @type {?} */
    var input = req.body.url || req.files.file;
    return svc.import(input, req.query.format);
}, ɵ14 = function (svc, req) {
    return svc.associations(req.params.id, req.query);
}, ɵ15 = function (svc, req) {
    return svc.versions(req.params.id, req.query);
}, ɵ16 = function (svc, req) {
    return svc.get(req.params.id, { version: req.params.version });
};
/** @type {?} */
var Routes = [
    {
        key: 'search',
        method: 'get',
        path: 'items',
        auth: false,
        execFn: ɵ0
    },
    {
        key: 'get',
        method: 'get',
        path: 'items/:id',
        auth: false,
        execFn: ɵ1
    },
    {
        key: 'create',
        method: 'post',
        path: 'items',
        auth: true,
        execFn: ɵ2
    },
    {
        key: 'update',
        method: 'put',
        path: 'items/:id',
        auth: true,
        execFn: ɵ3
    },
    {
        key: 'delete',
        method: 'delete',
        path: 'items/:id',
        auth: true,
        execFn: ɵ4,
        respFn: ɵ5
    },
    {
        key: 'patch',
        method: 'patch',
        path: 'items/:id',
        auth: true,
        execFn: ɵ6
    },
    {
        key: 'clone',
        method: 'post',
        path: 'items/:id/clone',
        auth: true,
        execFn: ɵ7
    },
    {
        key: 'export',
        method: 'get',
        path: 'items/:id/export',
        auth: false,
        execFn: ɵ8,
        respFn: ɵ9
    },
    {
        key: 'uri',
        method: 'post',
        path: 'items/uri',
        auth: false,
        execFn: ɵ10,
        respFn: ɵ11
    },
    {
        key: 'exists',
        method: 'post',
        path: 'items/exists',
        auth: false,
        execFn: ɵ12
    },
    {
        key: 'import',
        method: 'post',
        path: 'items/import',
        auth: true,
        execFn: ɵ13
    },
    {
        key: 'associations',
        method: 'get',
        path: 'items/:id/associations',
        auth: false,
        execFn: ɵ14
    },
    {
        key: 'versions',
        method: 'get',
        path: 'items/:id/versions',
        auth: false,
        execFn: ɵ15
    },
    {
        key: 'getVersion',
        method: 'get',
        path: 'items/:id/versions/:version',
        auth: false,
        execFn: ɵ16
    }
];
/**
 *
 * @param {?} router
 * @param {?=} options
 * @return {?}
 */
function bindRoutes(router, options) {
    //bind common endpoints
    options.pathBaseDefault = "items";
    options.serviceClass = ItemService;
    ServiceProxy.bindRoutes(router, Routes, options);
}
/**
 * ItemServiceProxy
 *
 * see examples/node/item-proxy for an in-depth example
 * @param {?=} options
 * @return {?}
 */
function ItemServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    /** @type {?} */
    var router = options.router;
    if (!options.router) {
        /** @type {?} */
        var express = require('express');
        if (!express) {
            throw new Error("ItemServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("ItemServiceProxy() - " +
            "Unable to create proxy route, missing router");
    bindRoutes(router, options);
    return router;
}
export default ItemServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16 };

//# sourceMappingURL=data:application/json;base64,