
import Q from 'q';

/**
 * BaseService
 * service for working with the GeoPlatform API to
 * retrieve and manipulate items.
 *
 * Ex Searching Items
 *      let params = { q: 'test' };
 *      itemService.search(params).then(response=>{
 *          console.log(response.results.length + " of " + response.totalResults);
 *      }).catch(e=>{...});
 *
 * Ex Fetch Item:
 *      itemService.get(itemId).then(item=>{...}).catch(e=>{...});
 *
 * Ex Saving Item:
 *      itemService.save(item).then(item=>{...}).catch(e=>{...});
 *
 * Ex Deleting Item:
 *      itemService.remove(itemId).then(()=>{...}).catch(e=>{...});
 *
 * Ex Patching Item:
 *      itemService.patch(itemId,patch).then(item=>{...}).catch(e=>{...});
 *
 */
class BaseService {

    constructor(url, httpClient) {
        this.setUrl(url);
        this.client = httpClient;
        this.setTimeout(10000);
        this.httpMethods = ["GET", "POST", "PUT", "DELETE", "PATCH"];
    }

    setUrl(baseUrl) {
        this.apiBase = baseUrl;
        this.baseUrl = baseUrl + '/api/items';
    }

    /**
     * @param {number} milliseconds - override environment variable timeout
     */
    setTimeout(milliseconds) {
        this.timeout = milliseconds;
    }

    /**
     * @param {Error} e - error generated by the api
     * @param {string} prefixMsg - label or message to prepend to the error's message
     * @return {Promise} rejecting with the updated error
     */
    _onError (e, prefixMsg) {

        let code = e.statusCode || e.status || 500;
        let title = e.error;
        let msg = e.message;
        if(!msg) {
            if(code === 400) msg = "The request was invalid";
            else if(code === 401) msg = "You must sign in before making this request";
            else if(code === 403) msg = "You are not authorized to make this request";
            else if(code === 404) msg = "The specified resource was not found";
            else if(code === 409) msg = "The resource already exists";
            else msg = "The request resulted in an unspecified error";
        }

        e.message = prefixMsg ? (prefixMsg + ": " + msg) : msg;
        e.status = code;
        e.error = title;
        return Q.reject(e);
    }

}

export default BaseService;
