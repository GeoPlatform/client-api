import request from 'request';
import { Config, ItemService } from '@geoplatform/client';
import NodeHttpClient from '../../http/node';
var GP_AUTH_COOKIE = 'gpoauth-a';
var ɵ0 = function (router, routes, options) {
    var _this = this;
    options = options || {};
    var paths = options.paths || {};
    var auths = options.auth || {};
    routes.forEach(function (route) {
        if (paths[route.key] === false)
            return; //disabled endpoint
        if (!paths[route.key] && !route.path)
            return; //something is wrong with route
        //newer route override...
        // {
        //   'create': {
        //     'path': 'custom/path',
        //     'auth': true,
        //     'onResponse': function(result, res, next) { }
        //   }
        // }
        var overrides = options[route.key] || {};
        //look for overriden paths in either new override structure or older key:path format
        var path = '/' + (overrides.path || paths[route.key] || route.path);
        //look for authentication override in either new structure or older format
        var needsAuth = overrides.auth || auths[route.key] || route.auth;
        if (options.logger) {
            options.logger.debug("Binding Service Route [" + route.method + "] " + path);
        }
        router[route.method](path, function (req, res, next) {
            var promise = null;
            if (typeof (route.onExecute) !== 'function') {
                promise = Promise.resolve(null);
            }
            else {
                if (options.logger) {
                    options.logger.debug("Executing Service Route [" + route.method + "] " + path);
                    options.logger.debug(JSON.stringify(req.params));
                    options.logger.debug("-------------------------");
                }
                var svc = _this.getService(req, needsAuth, options);
                try {
                    promise = route.onExecute(svc, req);
                }
                catch (e) {
                    promise = Promise.reject(e);
                }
            }
            promise.then(function (result) {
                var onResponse = overrides.onResponse || route.onResponse;
                if (onResponse)
                    onResponse(result, res, next);
                else
                    res.json(result);
            })
                .catch(function (err) {
                if (overrides.onError)
                    overrides.onError(err);
                if (options.onError)
                    options.onError(route.key, err);
                next(err);
            })
                .finally(function () {
                //if route has a finish function defined, invoke it
                if (overrides.onFinish) {
                    overrides.onFinish(req, res);
                }
                //if proxy has an overall finish function defined, invoke it
                var finishFn = options.onFinish;
                if (finishFn)
                    finishFn(route.key, req, res);
            });
        });
    });
    if (options && options.addl) {
        this.bindAdditionalRoutes(router, options);
    }
}, ɵ1 = function (router, options) {
    var _this = this;
    //fetch thumbnail proxy
    router.get('/items/:id/thumbnail', function (req, res, next) {
        var url = Config.ualUrl + '/api/items/' + req.params.id + '/thumbnail';
        request.get(url).pipe(res);
    });
    if (options && options.logger) {
        options.logger.debug("Binding Service Route [get] /items/:id/thumbnail");
    }
    //request new thumbnail be created
    router.post('/items/:id/thumbnail', function (req, res, next) {
        var url = Config.ualUrl + '/api/items/' + req.params.id + '/thumbnail';
        var token = _this.getAuthToken(req);
        var cookie = _this.getAuthCookie(req);
        var opts = {}; //doesn't need a body when posting to thumbnail
        if (token)
            opts.auth = { bearer: token };
        if (cookie)
            opts.headers = { Cookie: _this.authCookieName + '=' + cookie };
        request.post(url, opts).pipe(res);
    });
    if (options && options.logger) {
        options.logger.debug("Binding Service Route [post] /items/:id/thumbnail");
    }
}, ɵ2 = function (req, needsAuth, options) {
    var token = this.getAuthToken(req);
    if (needsAuth) {
        if (options && options.logger) {
            // options.logger.debug(`ServiceProxy.getClient() - Token: ${token}`);
            // options.logger.debug(`ServiceProxy.getClient() - JWT: ${req.jwt}`);
            if (!token) {
                options.logger.warn("ServiceProxy.getClient() - No Access Token was provided on incoming request header!");
            }
            else if (!!options.debug) {
                options.logger.debug("ServiceProxy.getClient() - Token: " + token);
                options.logger.debug("ServiceProxy.getClient() - JWT: " + req.jwt);
            }
        }
        else if (!token) {
            console.log("[WARN] No Access Token provided on incoming request header");
        }
    }
    //check the incoming proxied request for cookies that should be forwarded along
    var cookie = this.getAuthCookie(req);
    // console.log("COOKIE IS " + cookie);
    if (cookie && !cookie.length)
        cookie = null;
    // if(options && options.logger) {
    //     options.logger.debug("Proxying Request Cookie: " + cookie);
    //     options.logger.debug(" ");
    // } else {
    //     console.log("Proxying Request Cookie: " + cookie);
    // }
    return new NodeHttpClient({
        timeout: Config.timeout,
        token: needsAuth ? token : null,
        cookie: needsAuth ? cookie : null
    });
}, ɵ3 = function (req, needsAuth, options) {
    var client = this.getClient(req, needsAuth, options);
    var svcClass = options.serviceClass || ItemService;
    // console.log("Proxying to " + Config.ualUrl);
    if (options.logger) {
        options.logger.debug("Proxying to " + Config.ualUrl);
        // options.logger.debug("Using service class: " + svcClass);
    }
    var service = new svcClass(Config.ualUrl, client);
    service.setTimeout(Config.timeout || 30000);
    if (options.logger) {
        service.setLogger(options.logger);
    }
    return service;
}, ɵ4 = function (req) {
    var token = req.accessToken || null;
    if (!token && !req.jwt) { //if not processed by middleware...
        token = (req.headers.authorization || '').replace('Bearer ', '');
    }
    return token;
}, ɵ5 = function (req) {
    if (!req)
        return null;
    if (req.cookies) { //parsed by cookieParser already
        // console.log("COOKIES PARSED ... ");
        // console.log("COOKIES ARE...");
        // console.log(JSON.stringify(req.cookies));
        // console.log(" ");
        // console.log("AUTH COOKIE IS " + req.cookies[GP_AUTH_COOKIE]);
        return req.cookies[GP_AUTH_COOKIE];
    }
    else if (req.headers.cookie) {
        // console.log("COOKIES NEED PARSING");
        try {
            var cookies = this.parseCookies(req.headers.cookie);
            return cookies[GP_AUTH_COOKIE];
        }
        catch (e) {
            console.log("ERROR parsing cookies: " + e.message);
            return null;
        }
    }
}, ɵ6 = function parse(str) {
    if (!str || typeof str !== 'string' || !str.length)
        return null;
    var result = {};
    var expr = /; */;
    var pairs = str.split(expr);
    pairs.forEach(function (pair) {
        var sepIdx = pair.indexOf('=');
        if (sepIdx < 0)
            return; //ignore non- 'key=value' values
        var key = pair.substr(0, sepIdx).trim();
        var val = pair.substr(++sepIdx, pair.length).trim();
        // quoted values
        if ('"' == val[0])
            val = val.slice(1, -1);
        // only assign once
        if (undefined == result[key]) {
            var value = val;
            try {
                value = decodeURIComponent(val);
            }
            catch (e) { }
            result[key] = value;
        }
    });
    return result;
};
var ServiceProxy = {
    /**
     * @param {Router} router - ExpressJS router instance
     * @param {array[object]} routes - list of routes to map to the router
     * @param {object} options - additional configuration needed
     */
    bindRoutes: ɵ0,
    /**
     *
     */
    bindAdditionalRoutes: ɵ1,
    /**
    * @param {HttpRequest} req - incoming http request being proxied
    * @param {boolean} needsAuth - flag indicating if the request must provide an authentication token
    * @param {object} options - additional configuration options
    * @return {HttpClient} client to use to make requests to GeoPlatform API endpoint
    */
    getClient: ɵ2,
    /**
     * @param {HttpRequest} req - incoming http request being proxied
     * @param {boolean} needsAuth - flag indicating if request requires authorization token
     * @param {object} options - additional configuration options
     */
    getService: ɵ3,
    /**
     * @return JWT authorization bearer token
     */
    getAuthToken: ɵ4,
    /**
     * @return GP Authentication cookie
     */
    getAuthCookie: ɵ5,
    parseCookies: ɵ6
};
export default ServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6 };
//# sourceMappingURL=data:application/json;base64,