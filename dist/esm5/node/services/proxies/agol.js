import { AgolService } from "@geoplatform/client";
import ServiceProxy from './base';
var ɵ0 = function (svc, req) {
    return svc.searchItems(req.query);
}, ɵ1 = function (svc, req) {
    return svc.searchGroups(req.query);
}, ɵ2 = function (svc, req) {
    return svc.searchOrgs(req.query);
}, ɵ3 = function (svc, req) {
    return svc.getItem(req.params.id);
}, ɵ4 = function (svc, req) {
    return svc.getGroup(req.params.id);
}, ɵ5 = function (svc, req) {
    return svc.getOrg(req.params.id);
};
var Routes = [
    {
        key: 'searchItems',
        method: 'get',
        path: 'agol/items',
        auth: false,
        onExecute: ɵ0
    },
    {
        key: 'searchGroups',
        method: 'get',
        path: 'agol/groups',
        auth: false,
        onExecute: ɵ1
    },
    {
        key: 'searchOrgs',
        method: 'get',
        path: 'agol/orgs',
        auth: false,
        onExecute: ɵ2
    },
    {
        key: 'getItem',
        method: 'get',
        path: 'agol/items/:id',
        auth: false,
        onExecute: ɵ3
    },
    {
        key: 'getGroup',
        method: 'get',
        path: 'agol/groups/:id',
        auth: false,
        onExecute: ɵ4
    },
    {
        key: 'getOrg',
        method: 'get',
        path: 'agol/orgs/:id',
        auth: false,
        onExecute: ɵ5
    }
];
/**
 *
 */
function AgolServiceProxy(options) {
    if (typeof (options) === 'undefined') {
        options = {};
    }
    ;
    var router = options.router;
    if (!options.router) {
        var express = require('express');
        if (!express) {
            throw new Error("AgolServiceProxy() - Must provide" +
                "'options.router' or include express as a dependency");
        }
        router = express.Router();
    }
    if (!router)
        throw new Error("AgolServiceProxy() - " +
            "Unable to create proxy route, missing router");
    options.serviceClass = AgolService;
    ServiceProxy.bindRoutes(router, Routes, options);
    return router;
}
export default AgolServiceProxy;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdvbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW9wbGF0Zm9ybS9jbGllbnQvbm9kZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Byb3hpZXMvYWdvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxZQUFZLE1BQU0sUUFBUSxDQUFDO1NBU2YsVUFBUyxHQUFpQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLE9BT1UsVUFBUyxHQUFpQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDLE9BT1UsVUFBUyxHQUFpQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxDQUFDLE9BT1UsVUFBUyxHQUFpQixFQUFFLEdBQVM7SUFDNUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsQ0FBQyxPQU9VLFVBQVMsR0FBaUIsRUFBRSxHQUFTO0lBQzVDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsT0FPVSxVQUFTLEdBQWlCLEVBQUUsR0FBUztJQUM1QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBckRULElBQU0sTUFBTSxHQUFHO0lBQ1g7UUFDSSxHQUFHLEVBQUUsYUFBYTtRQUNsQixNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBRSxZQUFZO1FBQ2xCLElBQUksRUFBRSxLQUFLO1FBQ1gsU0FBUyxJQUVSO0tBQ0o7SUFDRDtRQUNJLEdBQUcsRUFBRSxjQUFjO1FBQ25CLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLEtBQUs7UUFDWCxTQUFTLElBRVI7S0FDSjtJQUNEO1FBQ0ksR0FBRyxFQUFFLFlBQVk7UUFDakIsTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsV0FBVztRQUNqQixJQUFJLEVBQUUsS0FBSztRQUNYLFNBQVMsSUFFUjtLQUNKO0lBQ0Q7UUFDSSxHQUFHLEVBQUUsU0FBUztRQUNkLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixJQUFJLEVBQUUsS0FBSztRQUNYLFNBQVMsSUFFUjtLQUNKO0lBQ0Q7UUFDSSxHQUFHLEVBQUUsVUFBVTtRQUNmLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixJQUFJLEVBQUUsS0FBSztRQUNYLFNBQVMsSUFFUjtLQUNKO0lBQ0Q7UUFDSSxHQUFHLEVBQUUsUUFBUTtRQUNiLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLGVBQWU7UUFDckIsSUFBSSxFQUFFLEtBQUs7UUFDWCxTQUFTLElBRVI7S0FDSjtDQUNKLENBQUM7QUFJRjs7R0FFRztBQUNILFNBQVMsZ0JBQWdCLENBQUUsT0FBYztJQUVyQyxJQUFHLE9BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUFXLEVBQUU7UUFDaEMsT0FBTyxHQUFHLEVBQUUsQ0FBQztLQUNoQjtJQUFBLENBQUM7SUFFRixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzVCLElBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2hCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxJQUFHLENBQUMsT0FBTyxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUM7Z0JBQy9DLHFEQUFxRCxDQUFDLENBQUM7U0FDOUQ7UUFDRCxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQzdCO0lBRUQsSUFBRyxDQUFDLE1BQU07UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QjtZQUMvQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBRXBELE9BQU8sQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0lBQ25DLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVqRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsZUFBZSxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgeyBBZ29sU2VydmljZSB9IGZyb20gXCJAZ2VvcGxhdGZvcm0vY2xpZW50XCI7XG5pbXBvcnQgU2VydmljZVByb3h5IGZyb20gJy4vYmFzZSc7XG5cblxuY29uc3QgUm91dGVzID0gW1xuICAgIHtcbiAgICAgICAga2V5OiAnc2VhcmNoSXRlbXMnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnYWdvbC9pdGVtcycsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBvbkV4ZWN1dGU6IGZ1bmN0aW9uKHN2YyA6IEFnb2xTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuc2VhcmNoSXRlbXMocmVxLnF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdzZWFyY2hHcm91cHMnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnYWdvbC9ncm91cHMnLFxuICAgICAgICBhdXRoOiBmYWxzZSxcbiAgICAgICAgb25FeGVjdXRlOiBmdW5jdGlvbihzdmMgOiBBZ29sU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLnNlYXJjaEdyb3VwcyhyZXEucXVlcnkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ3NlYXJjaE9yZ3MnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICBwYXRoOiAnYWdvbC9vcmdzJyxcbiAgICAgICAgYXV0aDogZmFsc2UsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogQWdvbFNlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5zZWFyY2hPcmdzKHJlcS5xdWVyeSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnZ2V0SXRlbScsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHBhdGg6ICdhZ29sL2l0ZW1zLzppZCcsXG4gICAgICAgIGF1dGg6IGZhbHNlLFxuICAgICAgICBvbkV4ZWN1dGU6IGZ1bmN0aW9uKHN2YyA6IEFnb2xTZXJ2aWNlLCByZXEgOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0SXRlbShyZXEucGFyYW1zLmlkKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdnZXRHcm91cCcsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHBhdGg6ICdhZ29sL2dyb3Vwcy86aWQnLFxuICAgICAgICBhdXRoOiBmYWxzZSxcbiAgICAgICAgb25FeGVjdXRlOiBmdW5jdGlvbihzdmMgOiBBZ29sU2VydmljZSwgcmVxIDogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLmdldEdyb3VwKHJlcS5wYXJhbXMuaWQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtleTogJ2dldE9yZycsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHBhdGg6ICdhZ29sL29yZ3MvOmlkJyxcbiAgICAgICAgYXV0aDogZmFsc2UsXG4gICAgICAgIG9uRXhlY3V0ZTogZnVuY3Rpb24oc3ZjIDogQWdvbFNlcnZpY2UsIHJlcSA6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRPcmcocmVxLnBhcmFtcy5pZCk7XG4gICAgICAgIH1cbiAgICB9XG5dO1xuXG5cblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBBZ29sU2VydmljZVByb3h5KCBvcHRpb25zID86IGFueSApIHtcblxuICAgIGlmKHR5cGVvZihvcHRpb25zKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH07XG5cbiAgICBsZXQgcm91dGVyID0gb3B0aW9ucy5yb3V0ZXI7XG4gICAgaWYoIW9wdGlvbnMucm91dGVyKSB7XG4gICAgICAgIGxldCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuICAgICAgICBpZighZXhwcmVzcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWdvbFNlcnZpY2VQcm94eSgpIC0gTXVzdCBwcm92aWRlXCIgK1xuICAgICAgICAgICAgICAgIFwiJ29wdGlvbnMucm91dGVyJyBvciBpbmNsdWRlIGV4cHJlc3MgYXMgYSBkZXBlbmRlbmN5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgfVxuXG4gICAgaWYoIXJvdXRlcikgdGhyb3cgbmV3IEVycm9yKFwiQWdvbFNlcnZpY2VQcm94eSgpIC0gXCIgK1xuICAgICAgICBcIlVuYWJsZSB0byBjcmVhdGUgcHJveHkgcm91dGUsIG1pc3Npbmcgcm91dGVyXCIpO1xuXG4gICAgb3B0aW9ucy5zZXJ2aWNlQ2xhc3MgPSBBZ29sU2VydmljZTtcbiAgICBTZXJ2aWNlUHJveHkuYmluZFJvdXRlcyhyb3V0ZXIsIFJvdXRlcywgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gcm91dGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBZ29sU2VydmljZVByb3h5O1xuIl19